/*!
 * surveyjs - Survey JavaScript library v0.10.2
 * (c) Andrew Telnov - http://surveyjs.org/
 * License: MIT (http://www.opensource.org/licenses/mit-license.php)
 */

(function webpackUniversalModuleDefinition(root, factory) {
  if(typeof exports === 'object' && typeof module === 'object')
    module.exports = factory();
  else if(typeof define === 'function' && define.amd)
    define("Survey", [], factory);
  else if(typeof exports === 'object')
    exports["Survey"] = factory();
  else
    root["Survey"] = factory();
})(this, function() {
  return /******/ (function(modules) { // webpackBootstrap
    /******/ 	// The module cache
    /******/ 	var installedModules = {};
    /******/
    /******/ 	// The require function
    /******/ 	function __webpack_require__(moduleId) {
      /******/
      /******/ 		// Check if module is in cache
      /******/ 		if(installedModules[moduleId])
      /******/ 			return installedModules[moduleId].exports;
      /******/
      /******/ 		// Create a new module (and put it into the cache)
      /******/ 		var module = installedModules[moduleId] = {
        /******/ 			exports: {},
        /******/ 			id: moduleId,
        /******/ 			loaded: false
        /******/ 		};
      /******/
      /******/ 		// Execute the module function
      /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
      /******/
      /******/ 		// Flag the module as loaded
      /******/ 		module.loaded = true;
      /******/
      /******/ 		// Return the exports of the module
      /******/ 		return module.exports;
      /******/ 	}
    /******/
    /******/
    /******/ 	// expose the modules object (__webpack_modules__)
    /******/ 	__webpack_require__.m = modules;
    /******/
    /******/ 	// expose the module cache
    /******/ 	__webpack_require__.c = installedModules;
    /******/
    /******/ 	// __webpack_public_path__
    /******/ 	__webpack_require__.p = "";
    /******/
    /******/ 	// Load entry module and return exports
    /******/ 	return __webpack_require__(0);
    /******/ })
  /************************************************************************/
  /******/ ([
    /* 0 */
    /***/ function(module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _react = __webpack_require__(1);

      Object.keys(_react).forEach(function (key) {
        if (key === "default" || key === "__esModule") return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _react[key];
          }
        });
      });

      var _assign = __webpack_require__(73);

      Object.defineProperty(exports, "__assign", {
        enumerable: true,
        get: function get() {
          return _assign.__assign;
        }
      });

      var _SurveyNG = __webpack_require__(74);

      Object.defineProperty(exports, "SurveyNG", {
        enumerable: true,
        get: function get() {
          return _SurveyNG.SurveyNG;
        }
      });
      Object.defineProperty(exports, "SurveyWindowNG", {
        enumerable: true,
        get: function get() {
          return _SurveyNG.SurveyWindowNG;
        }
      });

      /***/ },
    /* 1 */
    /***/ function(module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.__extends = exports.QuestionFactory = exports.ReactQuestionFactory = exports.SurveyWindow = exports.SurveyQuestionRating = exports.SurveyProgress = exports.SurveyQuestionMatrixDynamicRow = exports.SurveyQuestionMatrixDynamic = exports.SurveyQuestionText = exports.SurveyQuestionRadiogroup = exports.SurveyQuestionMultipleTextItem = exports.SurveyQuestionMultipleText = exports.SurveyQuestionFile = exports.SurveyQuestionHtml = exports.SurveyQuestionMatrixRow = exports.SurveyQuestionMatrix = exports.SurveyQuestionMatrixDropdownRow = exports.SurveyQuestionMatrixDropdown = exports.SurveyQuestionDropdown = exports.SurveyQuestionCheckboxItem = exports.SurveyQuestionCheckbox = exports.SurveyQuestionComment = exports.SurveyQuestionCommentItem = exports.SurveyQuestionErrors = exports.SurveyQuestion = exports.SurveyRow = exports.SurveyPage = exports.SurveyNavigation = exports.SurveyNavigationBase = exports.Model = exports.ReactSurveyModel = exports.Survey = exports.defaultStandardCss = undefined;

      var _model = __webpack_require__(2);

      Object.keys(_model).forEach(function (key) {
        if (key === "default" || key === "__esModule") return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _model[key];
          }
        });
      });

      var _cssstandard = __webpack_require__(35);

      Object.defineProperty(exports, "defaultStandardCss", {
        enumerable: true,
        get: function get() {
          return _cssstandard.defaultStandardCss;
        }
      });

      var _reactSurvey = __webpack_require__(36);

      Object.defineProperty(exports, "Survey", {
        enumerable: true,
        get: function get() {
          return _reactSurvey.Survey;
        }
      });

      var _reactsurveymodel = __webpack_require__(41);

      Object.defineProperty(exports, "ReactSurveyModel", {
        enumerable: true,
        get: function get() {
          return _reactsurveymodel.ReactSurveyModel;
        }
      });
      Object.defineProperty(exports, "Model", {
        enumerable: true,
        get: function get() {
          return _reactsurveymodel.ReactSurveyModel;
        }
      });

      var _reactSurveyNavigationBase = __webpack_require__(47);

      Object.defineProperty(exports, "SurveyNavigationBase", {
        enumerable: true,
        get: function get() {
          return _reactSurveyNavigationBase.SurveyNavigationBase;
        }
      });

      var _reactSurveyNavigation = __webpack_require__(46);

      Object.defineProperty(exports, "SurveyNavigation", {
        enumerable: true,
        get: function get() {
          return _reactSurveyNavigation.SurveyNavigation;
        }
      });

      var _reactpage = __webpack_require__(42);

      Object.defineProperty(exports, "SurveyPage", {
        enumerable: true,
        get: function get() {
          return _reactpage.SurveyPage;
        }
      });
      Object.defineProperty(exports, "SurveyRow", {
        enumerable: true,
        get: function get() {
          return _reactpage.SurveyRow;
        }
      });

      var _reactquestion = __webpack_require__(43);

      Object.defineProperty(exports, "SurveyQuestion", {
        enumerable: true,
        get: function get() {
          return _reactquestion.SurveyQuestion;
        }
      });
      Object.defineProperty(exports, "SurveyQuestionErrors", {
        enumerable: true,
        get: function get() {
          return _reactquestion.SurveyQuestionErrors;
        }
      });

      var _reactquestioncomment = __webpack_require__(44);

      Object.defineProperty(exports, "SurveyQuestionCommentItem", {
        enumerable: true,
        get: function get() {
          return _reactquestioncomment.SurveyQuestionCommentItem;
        }
      });
      Object.defineProperty(exports, "SurveyQuestionComment", {
        enumerable: true,
        get: function get() {
          return _reactquestioncomment.SurveyQuestionComment;
        }
      });

      var _reactquestioncheckbox = __webpack_require__(49);

      Object.defineProperty(exports, "SurveyQuestionCheckbox", {
        enumerable: true,
        get: function get() {
          return _reactquestioncheckbox.SurveyQuestionCheckbox;
        }
      });
      Object.defineProperty(exports, "SurveyQuestionCheckboxItem", {
        enumerable: true,
        get: function get() {
          return _reactquestioncheckbox.SurveyQuestionCheckboxItem;
        }
      });

      var _reactquestiondropdown = __webpack_require__(50);

      Object.defineProperty(exports, "SurveyQuestionDropdown", {
        enumerable: true,
        get: function get() {
          return _reactquestiondropdown.SurveyQuestionDropdown;
        }
      });

      var _reactquestionmatrixdropdown = __webpack_require__(51);

      Object.defineProperty(exports, "SurveyQuestionMatrixDropdown", {
        enumerable: true,
        get: function get() {
          return _reactquestionmatrixdropdown.SurveyQuestionMatrixDropdown;
        }
      });
      Object.defineProperty(exports, "SurveyQuestionMatrixDropdownRow", {
        enumerable: true,
        get: function get() {
          return _reactquestionmatrixdropdown.SurveyQuestionMatrixDropdownRow;
        }
      });

      var _reactquestionmatrix = __webpack_require__(52);

      Object.defineProperty(exports, "SurveyQuestionMatrix", {
        enumerable: true,
        get: function get() {
          return _reactquestionmatrix.SurveyQuestionMatrix;
        }
      });
      Object.defineProperty(exports, "SurveyQuestionMatrixRow", {
        enumerable: true,
        get: function get() {
          return _reactquestionmatrix.SurveyQuestionMatrixRow;
        }
      });

      var _reactquestionhtml = __webpack_require__(53);

      Object.defineProperty(exports, "SurveyQuestionHtml", {
        enumerable: true,
        get: function get() {
          return _reactquestionhtml.SurveyQuestionHtml;
        }
      });

      var _reactquestionfile = __webpack_require__(54);

      Object.defineProperty(exports, "SurveyQuestionFile", {
        enumerable: true,
        get: function get() {
          return _reactquestionfile.SurveyQuestionFile;
        }
      });

      var _reactquestionmultipletext = __webpack_require__(55);

      Object.defineProperty(exports, "SurveyQuestionMultipleText", {
        enumerable: true,
        get: function get() {
          return _reactquestionmultipletext.SurveyQuestionMultipleText;
        }
      });
      Object.defineProperty(exports, "SurveyQuestionMultipleTextItem", {
        enumerable: true,
        get: function get() {
          return _reactquestionmultipletext.SurveyQuestionMultipleTextItem;
        }
      });

      var _reactquestionradiogroup = __webpack_require__(56);

      Object.defineProperty(exports, "SurveyQuestionRadiogroup", {
        enumerable: true,
        get: function get() {
          return _reactquestionradiogroup.SurveyQuestionRadiogroup;
        }
      });

      var _reactquestiontext = __webpack_require__(57);

      Object.defineProperty(exports, "SurveyQuestionText", {
        enumerable: true,
        get: function get() {
          return _reactquestiontext.SurveyQuestionText;
        }
      });

      var _reactquestionmatrixdynamic = __webpack_require__(58);

      Object.defineProperty(exports, "SurveyQuestionMatrixDynamic", {
        enumerable: true,
        get: function get() {
          return _reactquestionmatrixdynamic.SurveyQuestionMatrixDynamic;
        }
      });
      Object.defineProperty(exports, "SurveyQuestionMatrixDynamicRow", {
        enumerable: true,
        get: function get() {
          return _reactquestionmatrixdynamic.SurveyQuestionMatrixDynamicRow;
        }
      });

      var _reactSurveyProgress = __webpack_require__(48);

      Object.defineProperty(exports, "SurveyProgress", {
        enumerable: true,
        get: function get() {
          return _reactSurveyProgress.SurveyProgress;
        }
      });

      var _reactquestionrating = __webpack_require__(59);

      Object.defineProperty(exports, "SurveyQuestionRating", {
        enumerable: true,
        get: function get() {
          return _reactquestionrating.SurveyQuestionRating;
        }
      });

      var _reactSurveyWindow = __webpack_require__(60);

      Object.defineProperty(exports, "SurveyWindow", {
        enumerable: true,
        get: function get() {
          return _reactSurveyWindow.SurveyWindow;
        }
      });

      var _reactquestionfactory = __webpack_require__(45);

      Object.defineProperty(exports, "ReactQuestionFactory", {
        enumerable: true,
        get: function get() {
          return _reactquestionfactory.ReactQuestionFactory;
        }
      });
      Object.defineProperty(exports, "QuestionFactory", {
        enumerable: true,
        get: function get() {
          return _reactquestionfactory.ReactQuestionFactory;
        }
      });

      var _extends = __webpack_require__(4);

      Object.defineProperty(exports, "__extends", {
        enumerable: true,
        get: function get() {
          return _extends.__extends;
        }
      });

      __webpack_require__(61);

      __webpack_require__(71);

      /***/ },
    /* 2 */
    /***/ function(module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _validator = __webpack_require__(3);

      Object.defineProperty(exports, "AnswerCountValidator", {
        enumerable: true,
        get: function get() {
          return _validator.AnswerCountValidator;
        }
      });
      Object.defineProperty(exports, "EmailValidator", {
        enumerable: true,
        get: function get() {
          return _validator.EmailValidator;
        }
      });
      Object.defineProperty(exports, "NumericValidator", {
        enumerable: true,
        get: function get() {
          return _validator.NumericValidator;
        }
      });
      Object.defineProperty(exports, "RegexValidator", {
        enumerable: true,
        get: function get() {
          return _validator.RegexValidator;
        }
      });
      Object.defineProperty(exports, "SurveyValidator", {
        enumerable: true,
        get: function get() {
          return _validator.SurveyValidator;
        }
      });
      Object.defineProperty(exports, "TextValidator", {
        enumerable: true,
        get: function get() {
          return _validator.TextValidator;
        }
      });
      Object.defineProperty(exports, "ValidatorResult", {
        enumerable: true,
        get: function get() {
          return _validator.ValidatorResult;
        }
      });
      Object.defineProperty(exports, "ValidatorRunner", {
        enumerable: true,
        get: function get() {
          return _validator.ValidatorRunner;
        }
      });

      var _base = __webpack_require__(5);

      Object.defineProperty(exports, "Base", {
        enumerable: true,
        get: function get() {
          return _base.Base;
        }
      });
      Object.defineProperty(exports, "Event", {
        enumerable: true,
        get: function get() {
          return _base.Event;
        }
      });
      Object.defineProperty(exports, "ItemValue", {
        enumerable: true,
        get: function get() {
          return _base.ItemValue;
        }
      });
      Object.defineProperty(exports, "SurveyError", {
        enumerable: true,
        get: function get() {
          return _base.SurveyError;
        }
      });

      var _choicesRestfull = __webpack_require__(9);

      Object.defineProperty(exports, "ChoicesRestfull", {
        enumerable: true,
        get: function get() {
          return _choicesRestfull.ChoicesRestfull;
        }
      });

      var _conditions = __webpack_require__(10);

      Object.defineProperty(exports, "Condition", {
        enumerable: true,
        get: function get() {
          return _conditions.Condition;
        }
      });
      Object.defineProperty(exports, "ConditionNode", {
        enumerable: true,
        get: function get() {
          return _conditions.ConditionNode;
        }
      });
      Object.defineProperty(exports, "ConditionRunner", {
        enumerable: true,
        get: function get() {
          return _conditions.ConditionRunner;
        }
      });

      var _conditionsParser = __webpack_require__(11);

      Object.defineProperty(exports, "ConditionsParser", {
        enumerable: true,
        get: function get() {
          return _conditionsParser.ConditionsParser;
        }
      });

      var _error = __webpack_require__(6);

      Object.defineProperty(exports, "CustomError", {
        enumerable: true,
        get: function get() {
          return _error.CustomError;
        }
      });
      Object.defineProperty(exports, "ExceedSizeError", {
        enumerable: true,
        get: function get() {
          return _error.ExceedSizeError;
        }
      });
      Object.defineProperty(exports, "RequreNumericError", {
        enumerable: true,
        get: function get() {
          return _error.RequreNumericError;
        }
      });

      var _jsonobject = __webpack_require__(8);

      Object.defineProperty(exports, "JsonError", {
        enumerable: true,
        get: function get() {
          return _jsonobject.JsonError;
        }
      });
      Object.defineProperty(exports, "JsonIncorrectTypeError", {
        enumerable: true,
        get: function get() {
          return _jsonobject.JsonIncorrectTypeError;
        }
      });
      Object.defineProperty(exports, "JsonMetadata", {
        enumerable: true,
        get: function get() {
          return _jsonobject.JsonMetadata;
        }
      });
      Object.defineProperty(exports, "JsonMetadataClass", {
        enumerable: true,
        get: function get() {
          return _jsonobject.JsonMetadataClass;
        }
      });
      Object.defineProperty(exports, "JsonMissingTypeError", {
        enumerable: true,
        get: function get() {
          return _jsonobject.JsonMissingTypeError;
        }
      });
      Object.defineProperty(exports, "JsonMissingTypeErrorBase", {
        enumerable: true,
        get: function get() {
          return _jsonobject.JsonMissingTypeErrorBase;
        }
      });
      Object.defineProperty(exports, "JsonObject", {
        enumerable: true,
        get: function get() {
          return _jsonobject.JsonObject;
        }
      });
      Object.defineProperty(exports, "JsonObjectProperty", {
        enumerable: true,
        get: function get() {
          return _jsonobject.JsonObjectProperty;
        }
      });
      Object.defineProperty(exports, "JsonRequiredPropertyError", {
        enumerable: true,
        get: function get() {
          return _jsonobject.JsonRequiredPropertyError;
        }
      });
      Object.defineProperty(exports, "JsonUnknownPropertyError", {
        enumerable: true,
        get: function get() {
          return _jsonobject.JsonUnknownPropertyError;
        }
      });

      var _question_matrixdropdownbase = __webpack_require__(12);

      Object.defineProperty(exports, "MatrixDropdownCell", {
        enumerable: true,
        get: function get() {
          return _question_matrixdropdownbase.MatrixDropdownCell;
        }
      });
      Object.defineProperty(exports, "MatrixDropdownColumn", {
        enumerable: true,
        get: function get() {
          return _question_matrixdropdownbase.MatrixDropdownColumn;
        }
      });
      Object.defineProperty(exports, "MatrixDropdownRowModelBase", {
        enumerable: true,
        get: function get() {
          return _question_matrixdropdownbase.MatrixDropdownRowModelBase;
        }
      });
      Object.defineProperty(exports, "QuestionMatrixDropdownModelBase", {
        enumerable: true,
        get: function get() {
          return _question_matrixdropdownbase.QuestionMatrixDropdownModelBase;
        }
      });

      var _question_matrixdropdown = __webpack_require__(18);

      Object.defineProperty(exports, "MatrixDropdownRowModel", {
        enumerable: true,
        get: function get() {
          return _question_matrixdropdown.MatrixDropdownRowModel;
        }
      });
      Object.defineProperty(exports, "QuestionMatrixDropdownModel", {
        enumerable: true,
        get: function get() {
          return _question_matrixdropdown.QuestionMatrixDropdownModel;
        }
      });

      var _question_matrixdynamic = __webpack_require__(19);

      Object.defineProperty(exports, "MatrixDynamicRowModel", {
        enumerable: true,
        get: function get() {
          return _question_matrixdynamic.MatrixDynamicRowModel;
        }
      });
      Object.defineProperty(exports, "QuestionMatrixDynamicModel", {
        enumerable: true,
        get: function get() {
          return _question_matrixdynamic.QuestionMatrixDynamicModel;
        }
      });

      var _question_matrix = __webpack_require__(20);

      Object.defineProperty(exports, "MatrixRowModel", {
        enumerable: true,
        get: function get() {
          return _question_matrix.MatrixRowModel;
        }
      });
      Object.defineProperty(exports, "QuestionMatrixModel", {
        enumerable: true,
        get: function get() {
          return _question_matrix.QuestionMatrixModel;
        }
      });

      var _question_multipletext = __webpack_require__(21);

      Object.defineProperty(exports, "MultipleTextItemModel", {
        enumerable: true,
        get: function get() {
          return _question_multipletext.MultipleTextItemModel;
        }
      });
      Object.defineProperty(exports, "QuestionMultipleTextModel", {
        enumerable: true,
        get: function get() {
          return _question_multipletext.QuestionMultipleTextModel;
        }
      });

      var _page = __webpack_require__(22);

      Object.defineProperty(exports, "PageModel", {
        enumerable: true,
        get: function get() {
          return _page.PageModel;
        }
      });
      Object.defineProperty(exports, "QuestionRowModel", {
        enumerable: true,
        get: function get() {
          return _page.QuestionRowModel;
        }
      });

      var _question = __webpack_require__(13);

      Object.defineProperty(exports, "Question", {
        enumerable: true,
        get: function get() {
          return _question.Question;
        }
      });

      var _questionbase = __webpack_require__(14);

      Object.defineProperty(exports, "QuestionBase", {
        enumerable: true,
        get: function get() {
          return _questionbase.QuestionBase;
        }
      });

      var _question_baseselect = __webpack_require__(16);

      Object.defineProperty(exports, "QuestionCheckboxBase", {
        enumerable: true,
        get: function get() {
          return _question_baseselect.QuestionCheckboxBase;
        }
      });
      Object.defineProperty(exports, "QuestionSelectBase", {
        enumerable: true,
        get: function get() {
          return _question_baseselect.QuestionSelectBase;
        }
      });

      var _question_checkbox = __webpack_require__(23);

      Object.defineProperty(exports, "QuestionCheckboxModel", {
        enumerable: true,
        get: function get() {
          return _question_checkbox.QuestionCheckboxModel;
        }
      });

      var _question_comment = __webpack_require__(24);

      Object.defineProperty(exports, "QuestionCommentModel", {
        enumerable: true,
        get: function get() {
          return _question_comment.QuestionCommentModel;
        }
      });

      var _question_dropdown = __webpack_require__(25);

      Object.defineProperty(exports, "QuestionDropdownModel", {
        enumerable: true,
        get: function get() {
          return _question_dropdown.QuestionDropdownModel;
        }
      });

      var _questionfactory = __webpack_require__(17);

      Object.defineProperty(exports, "QuestionFactory", {
        enumerable: true,
        get: function get() {
          return _questionfactory.QuestionFactory;
        }
      });

      var _question_file = __webpack_require__(26);

      Object.defineProperty(exports, "QuestionFileModel", {
        enumerable: true,
        get: function get() {
          return _question_file.QuestionFileModel;
        }
      });

      var _question_html = __webpack_require__(27);

      Object.defineProperty(exports, "QuestionHtmlModel", {
        enumerable: true,
        get: function get() {
          return _question_html.QuestionHtmlModel;
        }
      });

      var _question_radiogroup = __webpack_require__(28);

      Object.defineProperty(exports, "QuestionRadiogroupModel", {
        enumerable: true,
        get: function get() {
          return _question_radiogroup.QuestionRadiogroupModel;
        }
      });

      var _question_rating = __webpack_require__(29);

      Object.defineProperty(exports, "QuestionRatingModel", {
        enumerable: true,
        get: function get() {
          return _question_rating.QuestionRatingModel;
        }
      });

      var _question_text = __webpack_require__(30);

      Object.defineProperty(exports, "QuestionTextModel", {
        enumerable: true,
        get: function get() {
          return _question_text.QuestionTextModel;
        }
      });

      var _survey = __webpack_require__(31);

      Object.defineProperty(exports, "SurveyModel", {
        enumerable: true,
        get: function get() {
          return _survey.SurveyModel;
        }
      });

      var _trigger = __webpack_require__(33);

      Object.defineProperty(exports, "SurveyTrigger", {
        enumerable: true,
        get: function get() {
          return _trigger.SurveyTrigger;
        }
      });
      Object.defineProperty(exports, "SurveyTriggerComplete", {
        enumerable: true,
        get: function get() {
          return _trigger.SurveyTriggerComplete;
        }
      });
      Object.defineProperty(exports, "SurveyTriggerSetValue", {
        enumerable: true,
        get: function get() {
          return _trigger.SurveyTriggerSetValue;
        }
      });
      Object.defineProperty(exports, "SurveyTriggerVisible", {
        enumerable: true,
        get: function get() {
          return _trigger.SurveyTriggerVisible;
        }
      });
      Object.defineProperty(exports, "Trigger", {
        enumerable: true,
        get: function get() {
          return _trigger.Trigger;
        }
      });

      var _surveyWindow = __webpack_require__(34);

      Object.defineProperty(exports, "SurveyWindowModel", {
        enumerable: true,
        get: function get() {
          return _surveyWindow.SurveyWindowModel;
        }
      });

      var _textPreProcessor = __webpack_require__(15);

      Object.defineProperty(exports, "TextPreProcessor", {
        enumerable: true,
        get: function get() {
          return _textPreProcessor.TextPreProcessor;
        }
      });

      var _dxSurveyService = __webpack_require__(32);

      Object.defineProperty(exports, "dxSurveyService", {
        enumerable: true,
        get: function get() {
          return _dxSurveyService.dxSurveyService;
        }
      });

      var _surveyStrings = __webpack_require__(7);

      Object.defineProperty(exports, "surveyLocalization", {
        enumerable: true,
        get: function get() {
          return _surveyStrings.surveyLocalization;
        }
      });
      Object.defineProperty(exports, "surveyStrings", {
        enumerable: true,
        get: function get() {
          return _surveyStrings.surveyStrings;
        }
      });

      /***/ },
    /* 3 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.EmailValidator = exports.RegexValidator = exports.AnswerCountValidator = exports.TextValidator = exports.NumericValidator = exports.ValidatorRunner = exports.SurveyValidator = exports.ValidatorResult = undefined;

        var _base = __webpack_require__(5);

        var _error = __webpack_require__(6);

        var _surveyStrings = __webpack_require__(7);

        var _jsonobject = __webpack_require__(8);

        var ValidatorResult = exports.ValidatorResult = function () {
          function ValidatorResult(value, error) {
            if (error === void 0) {
              error = null;
            }
            this.value = value;
            this.error = error;
          }
          return ValidatorResult;
        }();
        var SurveyValidator = exports.SurveyValidator = function (_super) {
          __extends(SurveyValidator, _super);
          function SurveyValidator() {
            _super.call(this);
            this.text = "";
          }
          SurveyValidator.prototype.getErrorText = function (name) {
            if (this.text) return this.text;
            return this.getDefaultErrorText(name);
          };
          SurveyValidator.prototype.getDefaultErrorText = function (name) {
            return "";
          };
          SurveyValidator.prototype.validate = function (value, name) {
            if (name === void 0) {
              name = null;
            }
            return null;
          };
          return SurveyValidator;
        }(_base.Base);
        var ValidatorRunner = exports.ValidatorRunner = function () {
          function ValidatorRunner() {}
          ValidatorRunner.prototype.run = function (owner) {
            for (var i = 0; i < owner.validators.length; i++) {
              var validatorResult = owner.validators[i].validate(owner.value, owner.getValidatorTitle());
              if (validatorResult != null) {
                if (validatorResult.error) return validatorResult.error;
                if (validatorResult.value) {
                  owner.value = validatorResult.value;
                }
              }
            }
            return null;
          };
          return ValidatorRunner;
        }();
        var NumericValidator = exports.NumericValidator = function (_super) {
          __extends(NumericValidator, _super);
          function NumericValidator(minValue, maxValue) {
            if (minValue === void 0) {
              minValue = null;
            }
            if (maxValue === void 0) {
              maxValue = null;
            }
            _super.call(this);
            this.minValue = minValue;
            this.maxValue = maxValue;
          }
          NumericValidator.prototype.getType = function () {
            return "numericvalidator";
          };
          NumericValidator.prototype.validate = function (value, name) {
            if (name === void 0) {
              name = null;
            }
            if (!value || !this.isNumber(value)) {
              return new ValidatorResult(null, new _error.RequreNumericError());
            }
            var result = new ValidatorResult(parseFloat(value));
            if (this.minValue && this.minValue > result.value) {
              result.error = new _error.CustomError(this.getErrorText(name));
              return result;
            }
            if (this.maxValue && this.maxValue < result.value) {
              result.error = new _error.CustomError(this.getErrorText(name));
              return result;
            }
            return typeof value === 'number' ? null : result;
          };
          NumericValidator.prototype.getDefaultErrorText = function (name) {
            var vName = name ? name : "value";
            if (this.minValue && this.maxValue) {
              return _surveyStrings.surveyLocalization.getString("numericMinMax")["format"](vName, this.minValue, this.maxValue);
            } else {
              if (this.minValue) {
                return _surveyStrings.surveyLocalization.getString("numericMin")["format"](vName, this.minValue);
              }
              return _surveyStrings.surveyLocalization.getString("numericMax")["format"](vName, this.maxValue);
            }
          };
          NumericValidator.prototype.isNumber = function (value) {
            return !isNaN(parseFloat(value)) && isFinite(value);
          };
          return NumericValidator;
        }(SurveyValidator);
        var TextValidator = exports.TextValidator = function (_super) {
          __extends(TextValidator, _super);
          function TextValidator(minLength) {
            if (minLength === void 0) {
              minLength = 0;
            }
            _super.call(this);
            this.minLength = minLength;
          }
          TextValidator.prototype.getType = function () {
            return "textvalidator";
          };
          TextValidator.prototype.validate = function (value, name) {
            if (name === void 0) {
              name = null;
            }
            if (this.minLength <= 0) return;
            if (value.length < this.minLength) {
              return new ValidatorResult(null, new _error.CustomError(this.getErrorText(name)));
            }
            return null;
          };
          TextValidator.prototype.getDefaultErrorText = function (name) {
            return _surveyStrings.surveyLocalization.getString("textMinLength")["format"](this.minLength);
          };
          return TextValidator;
        }(SurveyValidator);
        var AnswerCountValidator = exports.AnswerCountValidator = function (_super) {
          __extends(AnswerCountValidator, _super);
          function AnswerCountValidator(minCount, maxCount) {
            if (minCount === void 0) {
              minCount = null;
            }
            if (maxCount === void 0) {
              maxCount = null;
            }
            _super.call(this);
            this.minCount = minCount;
            this.maxCount = maxCount;
          }
          AnswerCountValidator.prototype.getType = function () {
            return "answercountvalidator";
          };
          AnswerCountValidator.prototype.validate = function (value, name) {
            if (name === void 0) {
              name = null;
            }
            if (value == null || value.constructor != Array) return null;
            var count = value.length;
            if (this.minCount && count < this.minCount) {
              return new ValidatorResult(null, new _error.CustomError(this.getErrorText(_surveyStrings.surveyLocalization.getString("minSelectError")["format"](this.minCount))));
            }
            if (this.maxCount && count > this.maxCount) {
              return new ValidatorResult(null, new _error.CustomError(this.getErrorText(_surveyStrings.surveyLocalization.getString("maxSelectError")["format"](this.maxCount))));
            }
            return null;
          };
          AnswerCountValidator.prototype.getDefaultErrorText = function (name) {
            return name;
          };
          return AnswerCountValidator;
        }(SurveyValidator);
        var RegexValidator = exports.RegexValidator = function (_super) {
          __extends(RegexValidator, _super);
          function RegexValidator(regex) {
            if (regex === void 0) {
              regex = null;
            }
            _super.call(this);
            this.regex = regex;
          }
          RegexValidator.prototype.getType = function () {
            return "regexvalidator";
          };
          RegexValidator.prototype.validate = function (value, name) {
            if (name === void 0) {
              name = null;
            }
            if (!this.regex || !value) return null;
            var re = new RegExp(this.regex);
            if (re.test(value)) return null;
            return new ValidatorResult(value, new _error.CustomError(this.getErrorText(name)));
          };
          return RegexValidator;
        }(SurveyValidator);
        var EmailValidator = exports.EmailValidator = function (_super) {
          __extends(EmailValidator, _super);
          function EmailValidator() {
            _super.call(this);
            this.re = /^(([^<>()\[\]\.,;:\s@\"]+(\.[^<>()\[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i;
          }
          EmailValidator.prototype.getType = function () {
            return "emailvalidator";
          };
          EmailValidator.prototype.validate = function (value, name) {
            if (name === void 0) {
              name = null;
            }
            if (!value) return null;
            if (this.re.test(value)) return null;
            return new ValidatorResult(value, new _error.CustomError(this.getErrorText(name)));
          };
          EmailValidator.prototype.getDefaultErrorText = function (name) {
            return _surveyStrings.surveyLocalization.getString("invalidEmail");
          };
          return EmailValidator;
        }(SurveyValidator);
        _jsonobject.JsonObject.metaData.addClass("surveyvalidator", ["text"]);
        _jsonobject.JsonObject.metaData.addClass("numericvalidator", ["minValue:number", "maxValue:number"], function () {
          return new NumericValidator();
        }, "surveyvalidator");
        _jsonobject.JsonObject.metaData.addClass("textvalidator", ["minLength:number"], function () {
          return new TextValidator();
        }, "surveyvalidator");
        _jsonobject.JsonObject.metaData.addClass("answercountvalidator", ["minCount:number", "maxCount:number"], function () {
          return new AnswerCountValidator();
        }, "surveyvalidator");
        _jsonobject.JsonObject.metaData.addClass("regexvalidator", ["regex"], function () {
          return new RegexValidator();
        }, "surveyvalidator");
        _jsonobject.JsonObject.metaData.addClass("emailvalidator", [], function () {
          return new EmailValidator();
        }, "surveyvalidator");
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 4 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.__extends = __extends;
        function __extends(d, b) {
          for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
          }function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        }
        if (typeof module !== 'undefined' && module.exports) {
          exports = module.exports = __extends;
        }
        exports.__extends = __extends;
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 5 */
    /***/ function(module, exports) {

      'use strict';

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var ItemValue = exports.ItemValue = function () {
        function ItemValue(value, text) {
          if (text === void 0) {
            text = null;
          }
          this.text = text;
          this.value = value;
        }
        ItemValue.setData = function (items, values) {
          items.length = 0;
          for (var i = 0; i < values.length; i++) {
            var value = values[i];
            var item = new ItemValue(null);
            if (typeof value.value !== 'undefined') {
              var exception = null;
              if (typeof value.getType !== 'undefined' && value.getType() == 'itemvalue') {
                value.itemValue = value.itemValue;
                item.itemText = value.itemText;
                exception = ItemValue.itemValueProp;
              }
              ItemValue.copyAttributes(value, item, exception);
            } else {
              item.value = value;
            }
            items.push(item);
          }
        };
        ItemValue.getData = function (items) {
          var result = new Array();
          for (var i = 0; i < items.length; i++) {
            var item = items[i];
            if (item.hasText) {
              result.push({ value: item.value, text: item.text });
            } else {
              result.push(item.value);
            }
          }
          return result;
        };
        ItemValue.getItemByValue = function (items, val) {
          for (var i = 0; i < items.length; i++) {
            if (items[i].value == val) return items[i];
          }
          return null;
        };
        ItemValue.copyAttributes = function (src, dest, exceptons) {
          for (var key in src) {
            if (typeof src[key] == 'function') continue;
            if (exceptons && exceptons.indexOf(key) > -1) continue;
            dest[key] = src[key];
          }
        };
        ItemValue.prototype.getType = function () {
          return "itemvalue";
        };
        Object.defineProperty(ItemValue.prototype, "value", {
          get: function get() {
            return this.itemValue;
          },
          set: function set(newValue) {
            this.itemValue = newValue;
            if (!this.itemValue) return;
            var str = this.itemValue.toString();
            var index = str.indexOf(ItemValue.Separator);
            if (index > -1) {
              this.itemValue = str.slice(0, index);
              this.text = str.slice(index + 1);
            }
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ItemValue.prototype, "hasText", {
          get: function get() {
            return this.itemText ? true : false;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ItemValue.prototype, "text", {
          get: function get() {
            if (this.hasText) return this.itemText;
            if (this.value) return this.value.toString();
            return null;
          },
          set: function set(newText) {
            this.itemText = newText;
          },
          enumerable: true,
          configurable: true
        });
        ItemValue.Separator = '|';
        ItemValue.itemValueProp = ["text", "value", "hasText"];
        return ItemValue;
      }();
      var Base = exports.Base = function () {
        function Base() {}
        Base.prototype.getType = function () {
          throw new Error('This method is abstract');
        };
        return Base;
      }();
      var SurveyError = exports.SurveyError = function () {
        function SurveyError() {}
        SurveyError.prototype.getText = function () {
          throw new Error('This method is abstract');
        };
        return SurveyError;
      }();
      var SurveyPageId = exports.SurveyPageId = "sq_page";
      var SurveyElement = exports.SurveyElement = function () {
        function SurveyElement() {}
        SurveyElement.ScrollElementToTop = function (elementId) {
          if (!elementId) return false;
          var el = document.getElementById(elementId);
          if (!el || !el.scrollIntoView) return false;
          var elemTop = el.getBoundingClientRect().top;
          if (elemTop < 0) el.scrollIntoView();
          return elemTop < 0;
        };
        SurveyElement.FocusElement = function (elementId) {
          if (!elementId) return false;
          var el = document.getElementById(elementId);
          if (el) {
            el.focus();
            return true;
          }
          return false;
        };
        return SurveyElement;
      }();
      var Event = exports.Event = function () {
        function Event() {}
        Object.defineProperty(Event.prototype, "isEmpty", {
          get: function get() {
            return this.callbacks == null || this.callbacks.length == 0;
          },
          enumerable: true,
          configurable: true
        });
        Event.prototype.fire = function (sender, options) {
          if (this.callbacks == null) return;
          for (var i = 0; i < this.callbacks.length; i++) {
            var callResult = this.callbacks[i](sender, options);
          }
        };
        Event.prototype.add = function (func) {
          if (this.callbacks == null) {
            this.callbacks = new Array();
          }
          this.callbacks.push(func);
        };
        Event.prototype.remove = function (func) {
          if (this.callbacks == null) return;
          var index = this.callbacks.indexOf(func, 0);
          if (index != undefined) {
            this.callbacks.splice(index, 1);
          }
        };
        return Event;
      }();

      /***/ },
    /* 6 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CustomError = exports.ExceedSizeError = exports.RequreNumericError = exports.AnswerRequiredError = undefined;

        var _surveyStrings = __webpack_require__(7);

        var _base = __webpack_require__(5);

        var AnswerRequiredError = exports.AnswerRequiredError = function (_super) {
          __extends(AnswerRequiredError, _super);
          function AnswerRequiredError() {
            _super.call(this);
          }
          AnswerRequiredError.prototype.getText = function () {
            return _surveyStrings.surveyLocalization.getString("requiredError");
          };
          return AnswerRequiredError;
        }(_base.SurveyError);
        var RequreNumericError = exports.RequreNumericError = function (_super) {
          __extends(RequreNumericError, _super);
          function RequreNumericError() {
            _super.call(this);
          }
          RequreNumericError.prototype.getText = function () {
            return _surveyStrings.surveyLocalization.getString("numericError");
          };
          return RequreNumericError;
        }(_base.SurveyError);
        var ExceedSizeError = exports.ExceedSizeError = function (_super) {
          __extends(ExceedSizeError, _super);
          function ExceedSizeError(maxSize) {
            _super.call(this);
            this.maxSize = maxSize;
          }
          ExceedSizeError.prototype.getText = function () {
            return _surveyStrings.surveyLocalization.getString("exceedMaxSize")["format"](this.getTextSize());
          };
          ExceedSizeError.prototype.getTextSize = function () {
            var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
            var fixed = [0, 0, 2, 3, 3];
            if (this.maxSize == 0) return '0 Byte';
            var i = Math.floor(Math.log(this.maxSize) / Math.log(1024));
            var value = this.maxSize / Math.pow(1024, i);
            return value.toFixed(fixed[i]) + ' ' + sizes[i];
          };
          return ExceedSizeError;
        }(_base.SurveyError);
        var CustomError = exports.CustomError = function (_super) {
          __extends(CustomError, _super);
          function CustomError(text) {
            _super.call(this);
            this.text = text;
          }
          CustomError.prototype.getText = function () {
            return this.text;
          };
          return CustomError;
        }(_base.SurveyError);
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 7 */
    /***/ function(module, exports) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var surveyLocalization = exports.surveyLocalization = {
        currentLocale: "",
        locales: {},
        getString: function getString(strName) {
          var loc = this.currentLocale ? this.locales[this.currentLocale] : surveyStrings;
          if (!loc || !loc[strName]) loc = surveyStrings;
          return loc[strName];
        },
        getLocales: function getLocales() {
          var res = [];
          res.push("");
          for (var key in this.locales) {
            res.push(key);
          }
          res.sort();
          return res;
        }
      };
      var surveyStrings = exports.surveyStrings = {
        pagePrevText: "Previous",
        pageNextText: "Next",
        completeText: "Complete",
        otherItemText: "Other (describe)",
        progressText: "Page {0} of {1}",
        emptySurvey: "There is no any visible page or visible question in the survey.",
        completingSurvey: "Thank You for Completing the Survey!",
        loadingSurvey: "Survey is loading from the server...",
        optionsCaption: "Choose...",
        requiredError: "Please answer the question.",
        requiredInAllRowsError: "Please answer questions in all rows.",
        numericError: "The value should be a numeric.",
        textMinLength: "Please enter at least {0} symbols.",
        minRowCountError: "Please fill at least {0} rows.",
        minSelectError: "Please select at least {0} variants.",
        maxSelectError: "Please select not more than {0} variants.",
        numericMinMax: "The '{0}' should be equal or more than {1} and equal or less than {2}",
        numericMin: "The '{0}' should be equal or more than {1}",
        numericMax: "The '{0}' should be equal or less than {1}",
        invalidEmail: "Please enter a valid e-mail.",
        urlRequestError: "The request return error '{0}'. {1}",
        urlGetChoicesError: "The request returns empty data or the 'path' property is incorrect",
        exceedMaxSize: "The file size should not exceed {0}.",
        otherRequiredError: "Please enter the others value.",
        uploadingFile: "Your file is uploading. Please wait several seconds and try again.",
        addRow: "Add Row",
        removeRow: "Remove"
      };
      surveyLocalization.locales["en"] = surveyStrings;
      if (!String.prototype["format"]) {
        String.prototype["format"] = function () {
          var args = arguments;
          return this.replace(/{(\d+)}/g, function (match, number) {
            return typeof args[number] != 'undefined' ? args[number] : match;
          });
        };
      }

      /***/ },
    /* 8 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

        var JsonObjectProperty = exports.JsonObjectProperty = function () {
          function JsonObjectProperty(name) {
            this.name = name;
            this.typeValue = null;
            this.choicesValue = null;
            this.choicesfunc = null;
            this.className = null;
            this.classNamePart = null;
            this.baseClassName = null;
            this.defaultValue = null;
            this.onGetValue = null;
          }
          Object.defineProperty(JsonObjectProperty.prototype, "type", {
            get: function get() {
              return this.typeValue ? this.typeValue : "string";
            },
            set: function set(value) {
              this.typeValue = value;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(JsonObjectProperty.prototype, "hasToUseGetValue", {
            get: function get() {
              return this.onGetValue;
            },
            enumerable: true,
            configurable: true
          });
          JsonObjectProperty.prototype.isDefaultValue = function (value) {
            return this.defaultValue ? this.defaultValue == value : !value;
          };
          JsonObjectProperty.prototype.getValue = function (obj) {
            if (this.onGetValue) return this.onGetValue(obj);
            return null;
          };
          Object.defineProperty(JsonObjectProperty.prototype, "hasToUseSetValue", {
            get: function get() {
              return this.onSetValue;
            },
            enumerable: true,
            configurable: true
          });
          JsonObjectProperty.prototype.setValue = function (obj, value, jsonConv) {
            if (this.onSetValue) {
              this.onSetValue(obj, value, jsonConv);
            }
          };
          JsonObjectProperty.prototype.getObjType = function (objType) {
            if (!this.classNamePart) return objType;
            return objType.replace(this.classNamePart, "");
          };
          JsonObjectProperty.prototype.getClassName = function (className) {
            return this.classNamePart && className.indexOf(this.classNamePart) < 0 ? className + this.classNamePart : className;
          };
          Object.defineProperty(JsonObjectProperty.prototype, "choices", {
            get: function get() {
              if (this.choicesValue != null) return this.choicesValue;
              if (this.choicesfunc != null) return this.choicesfunc();
              return null;
            },
            enumerable: true,
            configurable: true
          });
          JsonObjectProperty.prototype.setChoices = function (value, valueFunc) {
            this.choicesValue = value;
            this.choicesfunc = valueFunc;
          };
          return JsonObjectProperty;
        }();
        var JsonMetadataClass = exports.JsonMetadataClass = function () {
          function JsonMetadataClass(name, properties, creator, parentName) {
            if (creator === void 0) {
              creator = null;
            }
            if (parentName === void 0) {
              parentName = null;
            }
            this.name = name;
            this.creator = creator;
            this.parentName = parentName;
            this.properties = null;
            this.requiredProperties = null;
            this.properties = new Array();
            for (var i = 0; i < properties.length; i++) {
              var prop = this.createProperty(properties[i]);
              if (prop) {
                this.properties.push(prop);
              }
            }
          }
          JsonMetadataClass.prototype.find = function (name) {
            for (var i = 0; i < this.properties.length; i++) {
              if (this.properties[i].name == name) return this.properties[i];
            }
            return null;
          };
          JsonMetadataClass.prototype.createProperty = function (propInfo) {
            var propertyName = typeof propInfo === "string" ? propInfo : propInfo.name;
            if (!propertyName) return;
            var propertyType = null;
            var typeIndex = propertyName.indexOf(JsonMetadataClass.typeSymbol);
            if (typeIndex > -1) {
              propertyType = propertyName.substring(typeIndex + 1);
              propertyName = propertyName.substring(0, typeIndex);
            }
            propertyName = this.getPropertyName(propertyName);
            var prop = new JsonObjectProperty(propertyName);
            if (propertyType) {
              prop.type = propertyType;
            }
            if ((typeof propInfo === "undefined" ? "undefined" : _typeof(propInfo)) === "object") {
              if (propInfo.type) {
                prop.type = propInfo.type;
              }
              if (propInfo.default) {
                prop.defaultValue = propInfo.default;
              }
              if (propInfo.isRequired) {
                this.makePropertyRequired(prop.name);
              }
              if (propInfo.choices) {
                var choicesFunc = typeof propInfo.choices === "function" ? propInfo.choices : null;
                var choicesValue = typeof propInfo.choices !== "function" ? propInfo.choices : null;
                prop.setChoices(choicesValue, choicesFunc);
              }
              if (propInfo.onGetValue) {
                prop.onGetValue = propInfo.onGetValue;
              }
              if (propInfo.onSetValue) {
                prop.onSetValue = propInfo.onSetValue;
              }
              if (propInfo.className) {
                prop.className = propInfo.className;
              }
              if (propInfo.baseClassName) {
                prop.baseClassName = propInfo.baseClassName;
              }
              if (propInfo.classNamePart) {
                prop.classNamePart = propInfo.classNamePart;
              }
            }
            return prop;
          };
          JsonMetadataClass.prototype.getPropertyName = function (propertyName) {
            if (propertyName.length == 0 || propertyName[0] != JsonMetadataClass.requiredSymbol) return propertyName;
            propertyName = propertyName.slice(1);
            this.makePropertyRequired(propertyName);
            return propertyName;
          };
          JsonMetadataClass.prototype.makePropertyRequired = function (propertyName) {
            if (!this.requiredProperties) {
              this.requiredProperties = new Array();
            }
            this.requiredProperties.push(propertyName);
          };
          JsonMetadataClass.requiredSymbol = '!';
          JsonMetadataClass.typeSymbol = ':';
          return JsonMetadataClass;
        }();
        var JsonMetadata = exports.JsonMetadata = function () {
          function JsonMetadata() {
            this.classes = {};
            this.childrenClasses = {};
            this.classProperties = {};
            this.classRequiredProperties = {};
          }
          JsonMetadata.prototype.addClass = function (name, properties, creator, parentName) {
            if (creator === void 0) {
              creator = null;
            }
            if (parentName === void 0) {
              parentName = null;
            }
            var metaDataClass = new JsonMetadataClass(name, properties, creator, parentName);
            this.classes[name] = metaDataClass;
            if (parentName) {
              var children = this.childrenClasses[parentName];
              if (!children) {
                this.childrenClasses[parentName] = [];
              }
              this.childrenClasses[parentName].push(metaDataClass);
            }
            return metaDataClass;
          };
          JsonMetadata.prototype.overrideClassCreatore = function (name, creator) {
            var metaDataClass = this.findClass(name);
            if (metaDataClass) {
              metaDataClass.creator = creator;
            }
          };
          JsonMetadata.prototype.getProperties = function (name) {
            var properties = this.classProperties[name];
            if (!properties) {
              properties = new Array();
              this.fillProperties(name, properties);
              this.classProperties[name] = properties;
            }
            return properties;
          };
          JsonMetadata.prototype.createClass = function (name) {
            var metaDataClass = this.findClass(name);
            if (!metaDataClass) return null;
            return metaDataClass.creator();
          };
          JsonMetadata.prototype.getChildrenClasses = function (name, canBeCreated) {
            if (canBeCreated === void 0) {
              canBeCreated = false;
            }
            var result = [];
            this.fillChildrenClasses(name, canBeCreated, result);
            return result;
          };
          JsonMetadata.prototype.getRequiredProperties = function (name) {
            var properties = this.classRequiredProperties[name];
            if (!properties) {
              properties = new Array();
              this.fillRequiredProperties(name, properties);
              this.classRequiredProperties[name] = properties;
            }
            return properties;
          };
          JsonMetadata.prototype.addProperty = function (className, propertyInfo) {
            var metaDataClass = this.findClass(className);
            if (!metaDataClass) return;
            var property = metaDataClass.createProperty(propertyInfo);
            if (property) {
              this.addPropertyToClass(metaDataClass, property);
              this.emptyClassPropertiesHash(metaDataClass);
            }
          };
          JsonMetadata.prototype.removeProperty = function (className, propertyName) {
            var metaDataClass = this.findClass(className);
            if (!metaDataClass) return false;
            var property = metaDataClass.find(propertyName);
            if (property) {
              this.removePropertyFromClass(metaDataClass, property);
              this.emptyClassPropertiesHash(metaDataClass);
            }
          };
          JsonMetadata.prototype.addPropertyToClass = function (metaDataClass, property) {
            if (metaDataClass.find(property.name) != null) return;
            metaDataClass.properties.push(property);
          };
          JsonMetadata.prototype.removePropertyFromClass = function (metaDataClass, property) {
            var index = metaDataClass.properties.indexOf(property);
            if (index < 0) return;
            metaDataClass.properties.splice(index, 1);
            if (metaDataClass.requiredProperties) {
              index = metaDataClass.requiredProperties.indexOf(property.name);
              if (index >= 0) {
                metaDataClass.requiredProperties.splice(index, 1);
              }
            }
          };
          JsonMetadata.prototype.emptyClassPropertiesHash = function (metaDataClass) {
            this.classProperties[metaDataClass.name] = null;
            var childClasses = this.getChildrenClasses(metaDataClass.name);
            for (var i = 0; i < childClasses.length; i++) {
              this.classProperties[childClasses[i].name] = null;
            }
          };
          JsonMetadata.prototype.fillChildrenClasses = function (name, canBeCreated, result) {
            var children = this.childrenClasses[name];
            if (!children) return;
            for (var i = 0; i < children.length; i++) {
              if (!canBeCreated || children[i].creator) {
                result.push(children[i]);
              }
              this.fillChildrenClasses(children[i].name, canBeCreated, result);
            }
          };
          JsonMetadata.prototype.findClass = function (name) {
            return this.classes[name];
          };
          JsonMetadata.prototype.fillProperties = function (name, list) {
            var metaDataClass = this.findClass(name);
            if (!metaDataClass) return;
            if (metaDataClass.parentName) {
              this.fillProperties(metaDataClass.parentName, list);
            }
            for (var i = 0; i < metaDataClass.properties.length; i++) {
              this.addPropertyCore(metaDataClass.properties[i], list, list.length);
            }
          };
          JsonMetadata.prototype.addPropertyCore = function (property, list, endIndex) {
            var index = -1;
            for (var i = 0; i < endIndex; i++) {
              if (list[i].name == property.name) {
                index = i;
                break;
              }
            }
            if (index < 0) {
              list.push(property);
            } else {
              list[index] = property;
            }
          };
          JsonMetadata.prototype.fillRequiredProperties = function (name, list) {
            var metaDataClass = this.findClass(name);
            if (!metaDataClass) return;
            if (metaDataClass.requiredProperties) {
              Array.prototype.push.apply(list, metaDataClass.requiredProperties);
            }
            if (metaDataClass.parentName) {
              this.fillRequiredProperties(metaDataClass.parentName, list);
            }
          };
          return JsonMetadata;
        }();
        var JsonError = exports.JsonError = function () {
          function JsonError(type, message) {
            this.type = type;
            this.message = message;
            this.description = "";
            this.at = -1;
          }
          JsonError.prototype.getFullDescription = function () {
            return this.message + (this.description ? "\n" + this.description : "");
          };
          return JsonError;
        }();
        var JsonUnknownPropertyError = exports.JsonUnknownPropertyError = function (_super) {
          __extends(JsonUnknownPropertyError, _super);
          function JsonUnknownPropertyError(propertyName, className) {
            _super.call(this, "unknownproperty", "The property '" + propertyName + "' in class '" + className + "' is unknown.");
            this.propertyName = propertyName;
            this.className = className;
            var properties = JsonObject.metaData.getProperties(className);
            if (properties) {
              this.description = "The list of available properties are: ";
              for (var i = 0; i < properties.length; i++) {
                if (i > 0) this.description += ", ";
                this.description += properties[i].name;
              }
              this.description += '.';
            }
          }
          return JsonUnknownPropertyError;
        }(JsonError);
        var JsonMissingTypeErrorBase = exports.JsonMissingTypeErrorBase = function (_super) {
          __extends(JsonMissingTypeErrorBase, _super);
          function JsonMissingTypeErrorBase(baseClassName, type, message) {
            _super.call(this, type, message);
            this.baseClassName = baseClassName;
            this.type = type;
            this.message = message;
            this.description = "The following types are available: ";
            var types = JsonObject.metaData.getChildrenClasses(baseClassName, true);
            for (var i = 0; i < types.length; i++) {
              if (i > 0) this.description += ", ";
              this.description += "'" + types[i].name + "'";
            }
            this.description += ".";
          }
          return JsonMissingTypeErrorBase;
        }(JsonError);
        var JsonMissingTypeError = exports.JsonMissingTypeError = function (_super) {
          __extends(JsonMissingTypeError, _super);
          function JsonMissingTypeError(propertyName, baseClassName) {
            _super.call(this, baseClassName, "missingtypeproperty", "The property type is missing in the object. Please take a look at property: '" + propertyName + "'.");
            this.propertyName = propertyName;
            this.baseClassName = baseClassName;
          }
          return JsonMissingTypeError;
        }(JsonMissingTypeErrorBase);
        var JsonIncorrectTypeError = exports.JsonIncorrectTypeError = function (_super) {
          __extends(JsonIncorrectTypeError, _super);
          function JsonIncorrectTypeError(propertyName, baseClassName) {
            _super.call(this, baseClassName, "incorrecttypeproperty", "The property type is incorrect in the object. Please take a look at property: '" + propertyName + "'.");
            this.propertyName = propertyName;
            this.baseClassName = baseClassName;
          }
          return JsonIncorrectTypeError;
        }(JsonMissingTypeErrorBase);
        var JsonRequiredPropertyError = exports.JsonRequiredPropertyError = function (_super) {
          __extends(JsonRequiredPropertyError, _super);
          function JsonRequiredPropertyError(propertyName, className) {
            _super.call(this, "requiredproperty", "The property '" + propertyName + "' is required in class '" + className + "'.");
            this.propertyName = propertyName;
            this.className = className;
          }
          return JsonRequiredPropertyError;
        }(JsonError);
        var JsonObject = exports.JsonObject = function () {
          function JsonObject() {
            this.errors = new Array();
          }
          Object.defineProperty(JsonObject, "metaData", {
            get: function get() {
              return JsonObject.metaDataValue;
            },
            enumerable: true,
            configurable: true
          });
          JsonObject.prototype.toJsonObject = function (obj) {
            return this.toJsonObjectCore(obj, null);
          };
          JsonObject.prototype.toObject = function (jsonObj, obj) {
            if (!jsonObj) return;
            var properties = null;
            if (obj.getType) {
              properties = JsonObject.metaData.getProperties(obj.getType());
            }
            if (!properties) return;
            for (var key in jsonObj) {
              if (key == JsonObject.typePropertyName) continue;
              if (key == JsonObject.positionPropertyName) {
                obj[key] = jsonObj[key];
                continue;
              }
              var property = this.findProperty(properties, key);
              if (!property) {
                this.addNewError(new JsonUnknownPropertyError(key.toString(), obj.getType()), jsonObj);
                continue;
              }
              this.valueToObj(jsonObj[key], obj, key, property);
            }
          };
          JsonObject.prototype.toJsonObjectCore = function (obj, property) {
            if (!obj.getType) return obj;
            var result = {};
            if (property != null && !property.className) {
              result[JsonObject.typePropertyName] = property.getObjType(obj.getType());
            }
            var properties = JsonObject.metaData.getProperties(obj.getType());
            for (var i = 0; i < properties.length; i++) {
              this.valueToJson(obj, result, properties[i]);
            }
            return result;
          };
          JsonObject.prototype.valueToJson = function (obj, result, property) {
            var value = null;
            if (property.hasToUseGetValue) {
              value = property.getValue(obj);
            } else {
              value = obj[property.name];
            }
            if (value === undefined || value === null) return;
            if (property.isDefaultValue(value)) return;
            if (this.isValueArray(value)) {
              var arrValue = [];
              for (var i = 0; i < value.length; i++) {
                arrValue.push(this.toJsonObjectCore(value[i], property));
              }
              value = arrValue.length > 0 ? arrValue : null;
            } else {
              value = this.toJsonObjectCore(value, property);
            }
            if (!property.isDefaultValue(value)) {
              result[property.name] = value;
            }
          };
          JsonObject.prototype.valueToObj = function (value, obj, key, property) {
            if (value == null) return;
            if (property != null && property.hasToUseSetValue) {
              property.setValue(obj, value, this);
              return;
            }
            if (this.isValueArray(value)) {
              this.valueToArray(value, obj, key, property);
              return;
            }
            var newObj = this.createNewObj(value, property);
            if (newObj.newObj) {
              this.toObject(value, newObj.newObj);
              value = newObj.newObj;
            }
            if (!newObj.error) {
              obj[key] = value;
            }
          };
          JsonObject.prototype.isValueArray = function (value) {
            return value && value.constructor.toString().indexOf("Array") > -1;
          };
          JsonObject.prototype.createNewObj = function (value, property) {
            var result = { newObj: null, error: null };
            var className = value[JsonObject.typePropertyName];
            if (!className && property != null && property.className) {
              className = property.className;
            }
            className = property.getClassName(className);
            result.newObj = className ? JsonObject.metaData.createClass(className) : null;
            result.error = this.checkNewObjectOnErrors(result.newObj, value, property, className);
            return result;
          };
          JsonObject.prototype.checkNewObjectOnErrors = function (newObj, value, property, className) {
            var error = null;
            if (newObj) {
              var requiredProperties = JsonObject.metaData.getRequiredProperties(className);
              if (requiredProperties) {
                for (var i = 0; i < requiredProperties.length; i++) {
                  if (!value[requiredProperties[i]]) {
                    error = new JsonRequiredPropertyError(requiredProperties[i], className);
                    break;
                  }
                }
              }
            } else {
              if (property.baseClassName) {
                if (!className) {
                  error = new JsonMissingTypeError(property.name, property.baseClassName);
                } else {
                  error = new JsonIncorrectTypeError(property.name, property.baseClassName);
                }
              }
            }
            if (error) {
              this.addNewError(error, value);
            }
            return error;
          };
          JsonObject.prototype.addNewError = function (error, jsonObj) {
            if (jsonObj && jsonObj[JsonObject.positionPropertyName]) {
              error.at = jsonObj[JsonObject.positionPropertyName].start;
            }
            this.errors.push(error);
          };
          JsonObject.prototype.valueToArray = function (value, obj, key, property) {
            if (!this.isValueArray(obj[key])) {
              obj[key] = [];
            }
            for (var i = 0; i < value.length; i++) {
              var newValue = this.createNewObj(value[i], property);
              if (newValue.newObj) {
                obj[key].push(newValue.newObj);
                this.toObject(value[i], newValue.newObj);
              } else {
                if (!newValue.error) {
                  obj[key].push(value[i]);
                }
              }
            }
          };
          JsonObject.prototype.findProperty = function (properties, key) {
            if (!properties) return null;
            for (var i = 0; i < properties.length; i++) {
              if (properties[i].name == key) return properties[i];
            }
            return null;
          };
          JsonObject.typePropertyName = "type";
          JsonObject.positionPropertyName = "pos";
          JsonObject.metaDataValue = new JsonMetadata();
          return JsonObject;
        }();
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 9 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ChoicesRestfull = undefined;

        var _base = __webpack_require__(5);

        var _jsonobject = __webpack_require__(8);

        var _surveyStrings = __webpack_require__(7);

        var _error = __webpack_require__(6);

        var ChoicesRestfull = exports.ChoicesRestfull = function (_super) {
          __extends(ChoicesRestfull, _super);
          function ChoicesRestfull() {
            _super.call(this);
            this.url = "";
            this.path = "";
            this.valueName = "";
            this.titleName = "";
            this.error = null;
          }
          ChoicesRestfull.prototype.run = function () {
            if (!this.url || !this.getResultCallback) return;
            this.error = null;
            var xhr = new XMLHttpRequest();
            xhr.open('GET', this.url);
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            var self = this;
            xhr.onload = function () {
              if (xhr.status == 200) {
                self.onLoad(JSON.parse(xhr.response));
              } else {
                self.onError(xhr.statusText, xhr.responseText);
              }
            };
            xhr.send();
          };
          ChoicesRestfull.prototype.getType = function () {
            return "choicesByUrl";
          };
          Object.defineProperty(ChoicesRestfull.prototype, "isEmpty", {
            get: function get() {
              return !this.url && !this.path && !this.valueName && !this.titleName;
            },
            enumerable: true,
            configurable: true
          });
          ChoicesRestfull.prototype.setData = function (json) {
            this.clear();
            if (json.url) this.url = json.url;
            if (json.path) this.path = json.path;
            if (json.valueName) this.valueName = json.valueName;
            if (json.titleName) this.titleName = json.titleName;
          };
          ChoicesRestfull.prototype.clear = function () {
            this.url = "";
            this.path = "";
            this.valueName = "";
            this.titleName = "";
          };
          ChoicesRestfull.prototype.onLoad = function (result) {
            var items = [];
            result = this.getResultAfterPath(result);
            if (result && result["length"]) {
              for (var i = 0; i < result.length; i++) {
                var itemValue = result[i];
                if (!itemValue) continue;
                var value = this.getValue(itemValue);
                var title = this.getTitle(itemValue);
                items.push(new _base.ItemValue(value, title));
              }
            } else {
              this.error = new _error.CustomError(_surveyStrings.surveyLocalization.getString("urlGetChoicesError"));
            }
            this.getResultCallback(items);
          };
          ChoicesRestfull.prototype.onError = function (status, response) {
            this.error = new _error.CustomError(_surveyStrings.surveyLocalization.getString("urlRequestError")["format"](status, response));
            this.getResultCallback([]);
          };
          ChoicesRestfull.prototype.getResultAfterPath = function (result) {
            if (!result) return result;
            if (!this.path) return result;
            var pathes = this.getPathes();
            for (var i = 0; i < pathes.length; i++) {
              result = result[pathes[i]];
              if (!result) return null;
            }
            return result;
          };
          ChoicesRestfull.prototype.getPathes = function () {
            var pathes = [];
            if (this.path.indexOf(';') > -1) {
              pathes = this.path.split(';');
            } else {
              pathes = this.path.split(',');
            }
            if (pathes.length == 0) pathes.push(this.path);
            return pathes;
          };
          ChoicesRestfull.prototype.getValue = function (item) {
            if (this.valueName) return item[this.valueName];
            var len = Object.keys(item).length;
            if (len < 1) return null;
            return item[Object.keys(item)[0]];
          };
          ChoicesRestfull.prototype.getTitle = function (item) {
            if (!this.titleName) return null;
            return item[this.titleName];
          };
          return ChoicesRestfull;
        }(_base.Base);
        _jsonobject.JsonObject.metaData.addClass("choicesByUrl", ["url", "path", "valueName", "titleName"], function () {
          return new ChoicesRestfull();
        });
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 10 */
    /***/ function(module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ConditionRunner = exports.ConditionNode = exports.Condition = undefined;

      var _conditionsParser = __webpack_require__(11);

      var Condition = exports.Condition = function () {
        function Condition() {
          this.opValue = "equal";
        }
        Object.defineProperty(Condition, "operators", {
          get: function get() {
            if (Condition.operatorsValue != null) return Condition.operatorsValue;
            Condition.operatorsValue = {
              empty: function empty(left, right) {
                return !left;
              },
              notempty: function notempty(left, right) {
                return !!left;
              },
              equal: function equal(left, right) {
                return left == right;
              },
              notequal: function notequal(left, right) {
                return left != right;
              },
              contains: function contains(left, right) {
                return left && left["indexOf"] && left.indexOf(right) > -1;
              },
              notcontains: function notcontains(left, right) {
                return !left || !left["indexOf"] || left.indexOf(right) == -1;
              },
              greater: function greater(left, right) {
                return left > right;
              },
              less: function less(left, right) {
                return left < right;
              },
              greaterorequal: function greaterorequal(left, right) {
                return left >= right;
              },
              lessorequal: function lessorequal(left, right) {
                return left <= right;
              }
            };
            return Condition.operatorsValue;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Condition.prototype, "operator", {
          get: function get() {
            return this.opValue;
          },
          set: function set(value) {
            if (!value) return;
            value = value.toLowerCase();
            if (!Condition.operators[value]) return;
            this.opValue = value;
          },
          enumerable: true,
          configurable: true
        });
        Condition.prototype.perform = function (left, right) {
          if (left === void 0) {
            left = null;
          }
          if (right === void 0) {
            right = null;
          }
          if (!left) left = this.left;
          if (!right) right = this.right;
          return Condition.operators[this.operator](this.getPureValue(left), this.getPureValue(right));
        };
        Condition.prototype.getPureValue = function (val) {
          if (!val || typeof val != "string") return val;
          var str = "";
          if (val.length > 0 && (val[0] == "'" || val[0] == '"')) val = val.substr(1);
          var len = val.length;
          if (len > 0 && (val[len - 1] == "'" || val[len - 1] == '"')) val = val.substr(0, len - 1);
          return val;
        };
        Condition.operatorsValue = null;
        return Condition;
      }();
      var ConditionNode = exports.ConditionNode = function () {
        function ConditionNode() {
          this.connectiveValue = "and";
          this.children = [];
        }
        Object.defineProperty(ConditionNode.prototype, "connective", {
          get: function get() {
            return this.connectiveValue;
          },
          set: function set(value) {
            if (!value) return;
            value = value.toLowerCase();
            if (value == "&" || value == "&&") value = "and";
            if (value == "|" || value == "||") value = "or";
            if (value != "and" && value != "or") return;
            this.connectiveValue = value;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ConditionNode.prototype, "isEmpty", {
          get: function get() {
            return this.children.length == 0;
          },
          enumerable: true,
          configurable: true
        });
        ConditionNode.prototype.clear = function () {
          this.children = [];
          this.connective = "and";
        };
        return ConditionNode;
      }();
      var ConditionRunner = exports.ConditionRunner = function () {
        function ConditionRunner(expression) {
          this.root = new ConditionNode();
          this.expression = expression;
        }
        Object.defineProperty(ConditionRunner.prototype, "expression", {
          get: function get() {
            return this.expressionValue;
          },
          set: function set(value) {
            if (this.expression == value) return;
            this.expressionValue = value;
            new _conditionsParser.ConditionsParser().parse(this.expressionValue, this.root);
          },
          enumerable: true,
          configurable: true
        });
        ConditionRunner.prototype.run = function (values) {
          this.values = values;
          return this.runNode(this.root);
        };
        ConditionRunner.prototype.runNode = function (node) {
          var onFirstFail = node.connective == "and";
          for (var i = 0; i < node.children.length; i++) {
            var res = this.runNodeCondition(node.children[i]);
            if (!res && onFirstFail) return false;
            if (res && !onFirstFail) return true;
          }
          return onFirstFail;
        };
        ConditionRunner.prototype.runNodeCondition = function (value) {
          if (!value) return false;
          if (value["children"]) return this.runNode(value);
          if (value["left"]) return this.runCondition(value);
          return false;
        };
        ConditionRunner.prototype.runCondition = function (condition) {
          var left = condition.left;
          var name = this.getValueName(left);
          if (name) {
            if (!(name in this.values)) return false;
            left = this.values[name];
          }
          var right = condition.right;
          name = this.getValueName(right);
          if (name) {
            if (!(name in this.values)) return false;
            right = this.values[name];
          }
          return condition.perform(left, right);
        };
        ConditionRunner.prototype.getValueName = function (nodeValue) {
          if (!nodeValue) return null;
          if (typeof nodeValue !== 'string') return null;
          if (nodeValue.length < 3 || nodeValue[0] != '{' || nodeValue[nodeValue.length - 1] != '}') return null;
          return nodeValue.substr(1, nodeValue.length - 2);
        };
        return ConditionRunner;
      }();

      /***/ },
    /* 11 */
    /***/ function(module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ConditionsParser = undefined;

      var _conditions = __webpack_require__(10);

      var ConditionsParser = exports.ConditionsParser = function () {
        function ConditionsParser() {}
        ConditionsParser.prototype.parse = function (text, root) {
          this.text = text;
          this.root = root;
          this.root.clear();
          this.at = 0;
          this.length = this.text.length;
          var res = this.parseText();
          return res;
        };
        ConditionsParser.prototype.toString = function (root) {
          this.root = root;
          return this.nodeToString(root);
        };
        ConditionsParser.prototype.toStringCore = function (value) {
          if (!value) return "";
          if (value["children"]) return this.nodeToString(value);
          if (value["left"]) return this.conditionToString(value);
          return "";
        };
        ConditionsParser.prototype.nodeToString = function (node) {
          if (node.isEmpty) return "";
          var res = "";
          for (var i = 0; i < node.children.length; i++) {
            var nodeText = this.toStringCore(node.children[i]);
            if (nodeText) {
              if (res) res += ' ' + node.connective + ' ';
              res += nodeText;
            }
          }
          if (node != this.root && node.children.length > 1) {
            res = '(' + res + ')';
          }
          return res;
        };
        ConditionsParser.prototype.conditionToString = function (condition) {
          if (!condition.right || !condition.operator) return "";
          var left = condition.left;
          if (left && !this.isNumeric(left)) left = "'" + left + "'";
          var res = left + ' ' + this.operationToString(condition.operator);
          if (this.isNoRightOperation(condition.operator)) return res;
          var right = condition.right;
          if (right && !this.isNumeric(right)) right = "'" + right + "'";
          return res + ' ' + right;
        };
        ConditionsParser.prototype.operationToString = function (op) {
          if (op == "equal") return "=";
          if (op == "notequal") return "!=";
          if (op == "greater") return ">";
          if (op == "less") return "<";
          if (op == "greaterorequal") return ">=";
          if (op == "lessorequal") return "<=";
          return op;
        };
        ConditionsParser.prototype.isNumeric = function (value) {
          var val = parseFloat(value);
          if (isNaN(val)) return false;
          return isFinite(val);
        };
        ConditionsParser.prototype.parseText = function () {
          this.node = this.root;
          this.expressionNodes = [];
          this.expressionNodes.push(this.node);
          var res = this.readConditions();
          return res && this.at >= this.length;
        };
        ConditionsParser.prototype.readConditions = function () {
          var res = this.readCondition();
          if (!res) return res;
          var connective = this.readConnective();
          if (connective) {
            this.addConnective(connective);
            return this.readConditions();
          }
          return true;
        };
        ConditionsParser.prototype.readCondition = function () {
          if (!this.readExpression()) return false;
          var left = this.readString();
          if (!left) return false;
          var op = this.readOperator();
          if (!op) return false;
          var c = new _conditions.Condition();
          c.left = left;
          c.operator = op;
          if (!this.isNoRightOperation(op)) {
            var right = this.readString();
            if (!right) return false;
            c.right = right;
          }
          this.addCondition(c);
          return true;
        };
        ConditionsParser.prototype.readExpression = function () {
          this.skip();
          if (this.at >= this.length || this.ch != '(') return true;
          this.at++;
          this.pushExpression();
          var res = this.readConditions();
          if (res) {
            this.skip();
            res = this.ch == ')';
            this.at++;
            this.popExpression();
          }
          return res;
        };
        Object.defineProperty(ConditionsParser.prototype, "ch", {
          get: function get() {
            return this.text.charAt(this.at);
          },
          enumerable: true,
          configurable: true
        });
        ConditionsParser.prototype.skip = function () {
          while (this.at < this.length && this.isSpace(this.ch)) {
            this.at++;
          }
        };
        ConditionsParser.prototype.isSpace = function (c) {
          return c == ' ' || c == '\n' || c == '\t' || c == '\r';
        };
        ConditionsParser.prototype.isQuotes = function (c) {
          return c == "'" || c == '"';
        };
        ConditionsParser.prototype.isOperatorChar = function (c) {
          return c == '>' || c == '<' || c == '=' || c == '!';
        };
        ConditionsParser.prototype.isBrackets = function (c) {
          return c == '(' || c == ')';
        };
        ConditionsParser.prototype.readString = function () {
          this.skip();
          if (this.at >= this.length) return null;
          var start = this.at;
          var hasQuotes = this.isQuotes(this.ch);
          if (hasQuotes) this.at++;
          var isFirstOpCh = this.isOperatorChar(this.ch);
          while (this.at < this.length) {
            if (!hasQuotes && this.isSpace(this.ch)) break;
            if (this.isQuotes(this.ch)) {
              if (hasQuotes) this.at++;
              break;
            }
            if (!hasQuotes) {
              if (isFirstOpCh != this.isOperatorChar(this.ch)) break;
              if (this.isBrackets(this.ch)) break;
            }
            this.at++;
          }
          if (this.at <= start) return null;
          var res = this.text.substr(start, this.at - start);
          if (res) {
            if (res.length > 1 && this.isQuotes(res[0])) {
              var len = res.length - 1;
              if (this.isQuotes(res[res.length - 1])) len--;
              res = res.substr(1, len);
            }
          }
          return res;
        };
        ConditionsParser.prototype.isNoRightOperation = function (op) {
          return op == "empty" || op == "notempty";
        };
        ConditionsParser.prototype.readOperator = function () {
          var op = this.readString();
          if (!op) return null;
          op = op.toLowerCase();
          if (op == '>') op = "greater";
          if (op == '<') op = "less";
          if (op == '>=' || op == '=>') op = "greaterorequal";
          if (op == '<=' || op == '=<') op = "lessorequal";
          if (op == '=' || op == '==') op = "equal";
          if (op == '<>' || op == '!=') op = "notequal";
          if (op == 'contain') op = "contains";
          if (op == 'notcontain') op = "notcontains";
          return op;
        };
        ConditionsParser.prototype.readConnective = function () {
          var con = this.readString();
          if (!con) return null;
          con = con.toLowerCase();
          if (con == "&" || con == "&&") con = "and";
          if (con == "|" || con == "||") con = "or";
          if (con != "and" && con != "or") con = null;
          return con;
        };
        ConditionsParser.prototype.pushExpression = function () {
          var node = new _conditions.ConditionNode();
          this.expressionNodes.push(node);
          this.node = node;
        };
        ConditionsParser.prototype.popExpression = function () {
          var node = this.expressionNodes.pop();
          this.node = this.expressionNodes[this.expressionNodes.length - 1];
          this.node.children.push(node);
        };
        ConditionsParser.prototype.addCondition = function (c) {
          this.node.children.push(c);
        };
        ConditionsParser.prototype.addConnective = function (con) {
          if (this.node.children.length < 2) {
            this.node.connective = con;
          } else {
            if (this.node.connective != con) {
              var oldCon = this.node.connective;
              var oldChildren = this.node.children;
              this.node.clear();
              this.node.connective = con;
              var oldNode = new _conditions.ConditionNode();
              oldNode.connective = oldCon;
              oldNode.children = oldChildren;
              this.node.children.push(oldNode);
              var newNode = new _conditions.ConditionNode();
              this.node.children.push(newNode);
              this.node = newNode;
            }
          }
        };
        return ConditionsParser;
      }();

      /***/ },
    /* 12 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.QuestionMatrixDropdownModelBase = exports.MatrixDropdownRowModelBase = exports.MatrixDropdownCell = exports.MatrixDropdownColumn = undefined;

        var _jsonobject = __webpack_require__(8);

        var _question = __webpack_require__(13);

        var _base = __webpack_require__(5);

        var _surveyStrings = __webpack_require__(7);

        var _question_baseselect = __webpack_require__(16);

        var _questionfactory = __webpack_require__(17);

        var MatrixDropdownColumn = exports.MatrixDropdownColumn = function (_super) {
          __extends(MatrixDropdownColumn, _super);
          function MatrixDropdownColumn(name, title) {
            if (title === void 0) {
              title = null;
            }
            _super.call(this);
            this.name = name;
            this.choicesValue = [];
            this.isRequired = false;
            this.hasOther = false;
            this.minWidth = "";
            this.cellType = "default";
            this.colCountValue = -1;
          }
          MatrixDropdownColumn.prototype.getType = function () {
            return "matrixdropdowncolumn";
          };
          Object.defineProperty(MatrixDropdownColumn.prototype, "title", {
            get: function get() {
              return this.titleValue ? this.titleValue : this.name;
            },
            set: function set(value) {
              this.titleValue = value;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(MatrixDropdownColumn.prototype, "choices", {
            get: function get() {
              return this.choicesValue;
            },
            set: function set(newValue) {
              _base.ItemValue.setData(this.choicesValue, newValue);
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(MatrixDropdownColumn.prototype, "colCount", {
            get: function get() {
              return this.colCountValue;
            },
            set: function set(value) {
              if (value < -1 || value > 4) return;
              this.colCountValue = value;
            },
            enumerable: true,
            configurable: true
          });
          return MatrixDropdownColumn;
        }(_base.Base);
        var MatrixDropdownCell = exports.MatrixDropdownCell = function () {
          function MatrixDropdownCell(column, row, data) {
            this.column = column;
            this.row = row;
            this.questionValue = data.createQuestion(this.row, this.column);
            this.questionValue.setData(row);
          }
          Object.defineProperty(MatrixDropdownCell.prototype, "question", {
            get: function get() {
              return this.questionValue;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(MatrixDropdownCell.prototype, "value", {
            get: function get() {
              return this.question.value;
            },
            set: function set(value) {
              this.question.value = value;
            },
            enumerable: true,
            configurable: true
          });
          return MatrixDropdownCell;
        }();
        var MatrixDropdownRowModelBase = exports.MatrixDropdownRowModelBase = function () {
          function MatrixDropdownRowModelBase(data, value) {
            this.rowValues = {};
            this.rowComments = {};
            this.isSettingValue = false;
            this.cells = [];
            this.data = data;
            this.value = value;
            this.buildCells();
          }
          Object.defineProperty(MatrixDropdownRowModelBase.prototype, "rowName", {
            get: function get() {
              return null;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(MatrixDropdownRowModelBase.prototype, "value", {
            get: function get() {
              return this.rowValues;
            },
            set: function set(value) {
              this.isSettingValue = true;
              this.rowValues = {};
              if (value != null) {
                for (var key in value) {
                  this.rowValues[key] = value[key];
                }
              }
              for (var i = 0; i < this.cells.length; i++) {
                this.cells[i].question.onSurveyValueChanged(this.getValue(this.cells[i].column.name));
              }
              this.isSettingValue = false;
            },
            enumerable: true,
            configurable: true
          });
          MatrixDropdownRowModelBase.prototype.getValue = function (name) {
            return this.rowValues[name];
          };
          MatrixDropdownRowModelBase.prototype.setValue = function (name, newValue) {
            if (this.isSettingValue) return;
            if (newValue === "") newValue = null;
            if (newValue != null) {
              this.rowValues[name] = newValue;
            } else {
              delete this.rowValues[name];
            }
            this.data.onRowChanged(this, this.value);
          };
          MatrixDropdownRowModelBase.prototype.getComment = function (name) {
            return this.rowComments[name];
          };
          MatrixDropdownRowModelBase.prototype.setComment = function (name, newValue) {
            this.rowComments[name] = newValue;
          };
          Object.defineProperty(MatrixDropdownRowModelBase.prototype, "isEmpty", {
            get: function get() {
              var val = this.value;
              if (!val) return true;
              for (var key in val) {
                return false;
              }return true;
            },
            enumerable: true,
            configurable: true
          });
          MatrixDropdownRowModelBase.prototype.buildCells = function () {
            var columns = this.data.columns;
            for (var i = 0; i < columns.length; i++) {
              var column = columns[i];
              this.cells.push(this.createCell(column));
            }
          };
          MatrixDropdownRowModelBase.prototype.createCell = function (column) {
            return new MatrixDropdownCell(column, this, this.data);
          };
          return MatrixDropdownRowModelBase;
        }();
        var QuestionMatrixDropdownModelBase = exports.QuestionMatrixDropdownModelBase = function (_super) {
          __extends(QuestionMatrixDropdownModelBase, _super);
          function QuestionMatrixDropdownModelBase(name) {
            _super.call(this, name);
            this.name = name;
            this.columnsValue = [];
            this.choicesValue = [];
            this.isRowChanging = false;
            this.cellTypeValue = "dropdown";
            this.columnColCountValue = 0;
            this.columnMinWidth = "";
            this.horizontalScroll = false;
          }
          QuestionMatrixDropdownModelBase.prototype.getType = function () {
            return "matrixdropdownbase";
          };
          Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "columns", {
            get: function get() {
              return this.columnsValue;
            },
            set: function set(value) {
              this.columnsValue = value;
              this.fireCallback(this.columnsChangedCallback);
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "cellType", {
            get: function get() {
              return this.cellTypeValue;
            },
            set: function set(newValue) {
              if (this.cellType == newValue) return;
              this.cellTypeValue = newValue;
              this.fireCallback(this.updateCellsCallbak);
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "columnColCount", {
            get: function get() {
              return this.columnColCountValue;
            },
            set: function set(value) {
              if (value < 0 || value > 4) return;
              this.columnColCountValue = value;
              this.fireCallback(this.updateCellsCallbak);
            },
            enumerable: true,
            configurable: true
          });
          QuestionMatrixDropdownModelBase.prototype.getColumnTitle = function (column) {
            var result = column.title;
            if (column.isRequired && this.survey) {
              var requireText = this.survey.requiredText;
              if (requireText) requireText += " ";
              result = requireText + result;
            }
            return result;
          };
          QuestionMatrixDropdownModelBase.prototype.getColumnWidth = function (column) {
            return column.minWidth ? column.minWidth : this.columnMinWidth;
          };
          Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "choices", {
            get: function get() {
              return this.choicesValue;
            },
            set: function set(newValue) {
              _base.ItemValue.setData(this.choicesValue, newValue);
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "optionsCaption", {
            get: function get() {
              return this.optionsCaptionValue ? this.optionsCaptionValue : _surveyStrings.surveyLocalization.getString("optionsCaption");
            },
            set: function set(newValue) {
              this.optionsCaptionValue = newValue;
            },
            enumerable: true,
            configurable: true
          });
          QuestionMatrixDropdownModelBase.prototype.addColumn = function (name, title) {
            if (title === void 0) {
              title = null;
            }
            var column = new MatrixDropdownColumn(name, title);
            this.columnsValue.push(column);
            return column;
          };
          Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "visibleRows", {
            get: function get() {
              this.generatedVisibleRows = this.generateRows();
              return this.generatedVisibleRows;
            },
            enumerable: true,
            configurable: true
          });
          QuestionMatrixDropdownModelBase.prototype.generateRows = function () {
            return null;
          };
          QuestionMatrixDropdownModelBase.prototype.createMatrixRow = function (name, text, value) {
            return null;
          };
          QuestionMatrixDropdownModelBase.prototype.createNewValue = function (curValue) {
            return !curValue ? {} : curValue;
          };
          QuestionMatrixDropdownModelBase.prototype.getRowValue = function (row, questionValue, create) {
            if (create === void 0) {
              create = false;
            }
            var result = questionValue[row.rowName] ? questionValue[row.rowName] : null;
            if (!result && create) {
              result = {};
              questionValue[row.rowName] = result;
            }
            return result;
          };
          QuestionMatrixDropdownModelBase.prototype.onValueChanged = function () {
            if (this.isRowChanging || !this.generatedVisibleRows || this.generatedVisibleRows.length == 0) return;
            this.isRowChanging = true;
            var val = this.createNewValue(this.value);
            for (var i = 0; i < this.generatedVisibleRows.length; i++) {
              var row = this.generatedVisibleRows[i];
              this.generatedVisibleRows[i].value = this.getRowValue(row, val);
            }
            this.isRowChanging = false;
          };
          QuestionMatrixDropdownModelBase.prototype.hasErrors = function (fireCallback) {
            if (fireCallback === void 0) {
              fireCallback = true;
            }
            var errosInColumns = this.hasErrorInColumns(fireCallback);
            return _super.prototype.hasErrors.call(this, fireCallback) || errosInColumns;
          };
          QuestionMatrixDropdownModelBase.prototype.hasErrorInColumns = function (fireCallback) {
            if (!this.generatedVisibleRows) return false;
            var res = false;
            for (var colIndex = 0; colIndex < this.columns.length; colIndex++) {
              for (var i = 0; i < this.generatedVisibleRows.length; i++) {
                var cells = this.generatedVisibleRows[i].cells;
                res = cells && cells[colIndex] && cells[colIndex].question && cells[colIndex].question.hasErrors(fireCallback) || res;
              }
            }
            return res;
          };
          QuestionMatrixDropdownModelBase.prototype.getFirstInputElementId = function () {
            var question = this.getFirstCellQuestion(false);
            return question ? question.inputId : _super.prototype.getFirstInputElementId.call(this);
          };
          QuestionMatrixDropdownModelBase.prototype.getFirstErrorInputElementId = function () {
            var question = this.getFirstCellQuestion(true);
            return question ? question.inputId : _super.prototype.getFirstErrorInputElementId.call(this);
          };
          QuestionMatrixDropdownModelBase.prototype.getFirstCellQuestion = function (onError) {
            if (!this.generatedVisibleRows) return null;
            for (var i = 0; i < this.generatedVisibleRows.length; i++) {
              var cells = this.generatedVisibleRows[i].cells;
              for (var colIndex = 0; colIndex < this.columns.length; colIndex++) {
                if (!onError) return cells[colIndex].question;
                if (cells[colIndex].question.currentErrorCount > 0) return cells[colIndex].question;
              }
            }
            return null;
          };
          //IMatrixDropdownData
          QuestionMatrixDropdownModelBase.prototype.createQuestion = function (row, column) {
            var question = this.createQuestionCore(row, column);
            question.name = column.name;
            question.isRequired = column.isRequired;
            question.hasOther = column.hasOther;
            if (column.hasOther) {
              if (question instanceof _question_baseselect.QuestionSelectBase) {
                question.storeOthersAsComment = false;
              }
            }
            return question;
          };
          QuestionMatrixDropdownModelBase.prototype.createQuestionCore = function (row, column) {
            var cellType = column.cellType == "default" ? this.cellType : column.cellType;
            var name = this.getQuestionName(row, column);
            if (cellType == "checkbox") return this.createCheckbox(name, column);
            if (cellType == "radiogroup") return this.createRadiogroup(name, column);
            if (cellType == "text") return this.createText(name, column);
            if (cellType == "comment") return this.createComment(name, column);
            return this.createDropdown(name, column);
          };
          QuestionMatrixDropdownModelBase.prototype.getQuestionName = function (row, column) {
            return row.rowName + "_" + column.name;
          };
          QuestionMatrixDropdownModelBase.prototype.getColumnChoices = function (column) {
            return column.choices && column.choices.length > 0 ? column.choices : this.choices;
          };
          QuestionMatrixDropdownModelBase.prototype.getColumnOptionsCaption = function (column) {
            return column.optionsCaption ? column.optionsCaption : this.optionsCaption;
          };
          QuestionMatrixDropdownModelBase.prototype.createDropdown = function (name, column) {
            var q = this.createCellQuestion("dropdown", name);
            q.choices = this.getColumnChoices(column);
            q.optionsCaption = this.getColumnOptionsCaption(column);
            return q;
          };
          QuestionMatrixDropdownModelBase.prototype.createCheckbox = function (name, column) {
            var q = this.createCellQuestion("checkbox", name);
            q.choices = this.getColumnChoices(column);
            q.colCount = column.colCount > -1 ? column.colCount : this.columnColCount;
            return q;
          };
          QuestionMatrixDropdownModelBase.prototype.createRadiogroup = function (name, column) {
            var q = this.createCellQuestion("radiogroup", name);
            q.choices = this.getColumnChoices(column);
            q.colCount = column.colCount > -1 ? column.colCount : this.columnColCount;
            return q;
          };
          QuestionMatrixDropdownModelBase.prototype.createText = function (name, column) {
            return this.createCellQuestion("text", name);
          };
          QuestionMatrixDropdownModelBase.prototype.createComment = function (name, column) {
            return this.createCellQuestion("comment", name);
          };
          QuestionMatrixDropdownModelBase.prototype.createCellQuestion = function (questionType, name) {
            return _questionfactory.QuestionFactory.Instance.createQuestion(questionType, name);
          };
          QuestionMatrixDropdownModelBase.prototype.deleteRowValue = function (newValue, row) {
            delete newValue[row.rowName];
            return Object.keys(newValue).length == 0 ? null : newValue;
          };
          QuestionMatrixDropdownModelBase.prototype.onRowChanged = function (row, newRowValue) {
            var newValue = this.createNewValue(this.value);
            var rowValue = this.getRowValue(row, newValue, true);
            for (var key in rowValue) {
              delete rowValue[key];
            }if (newRowValue) {
              newRowValue = JSON.parse(JSON.stringify(newRowValue));
              for (var key in newRowValue) {
                rowValue[key] = newRowValue[key];
              }
            }
            if (Object.keys(rowValue).length == 0) {
              newValue = this.deleteRowValue(newValue, row);
            }
            this.isRowChanging = true;
            this.setNewValue(newValue);
            this.isRowChanging = false;
          };
          return QuestionMatrixDropdownModelBase;
        }(_question.Question);
        _jsonobject.JsonObject.metaData.addClass("matrixdropdowncolumn", ["name", { name: "title", onGetValue: function onGetValue(obj) {
          return obj.titleValue;
        } }, { name: "choices:itemvalues", onGetValue: function onGetValue(obj) {
          return _base.ItemValue.getData(obj.choices);
        }, onSetValue: function onSetValue(obj, value) {
          obj.choices = value;
        } }, "optionsCaption", { name: "cellType", default: "default", choices: ["default", "dropdown", "checkbox", "radiogroup", "text", "comment"] }, { name: "colCount", default: -1, choices: [-1, 0, 1, 2, 3, 4] }, "isRequired:boolean", "hasOther:boolean", "minWidth"], function () {
          return new MatrixDropdownColumn("");
        });
        _jsonobject.JsonObject.metaData.addClass("matrixdropdownbase", [{ name: "columns:matrixdropdowncolumns", className: "matrixdropdowncolumn" }, "horizontalScroll:boolean", { name: "choices:itemvalues", onGetValue: function onGetValue(obj) {
          return _base.ItemValue.getData(obj.choices);
        }, onSetValue: function onSetValue(obj, value) {
          obj.choices = value;
        } }, { name: "optionsCaption", onGetValue: function onGetValue(obj) {
          return obj.optionsCaptionValue;
        } }, { name: "cellType", default: "dropdown", choices: ["dropdown", "checkbox", "radiogroup", "text", "comment"] }, { name: "columnColCount", default: 0, choices: [0, 1, 2, 3, 4] }, "columnMinWidth"], function () {
          return new QuestionMatrixDropdownModelBase("");
        }, "question");
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 13 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Question = undefined;

        var _jsonobject = __webpack_require__(8);

        var _questionbase = __webpack_require__(14);

        var _base = __webpack_require__(5);

        var _surveyStrings = __webpack_require__(7);

        var _error = __webpack_require__(6);

        var _validator = __webpack_require__(3);

        var _textPreProcessor = __webpack_require__(15);

        var Question = exports.Question = function (_super) {
          __extends(Question, _super);
          function Question(name) {
            _super.call(this, name);
            this.name = name;
            this.titleValue = null;
            this.isRequiredValue = false;
            this.hasCommentValue = false;
            this.hasOtherValue = false;
            this.commentTextValue = "";
            this.errors = [];
            this.validators = new Array();
            this.isValueChangedInSurvey = false;
          }
          Object.defineProperty(Question.prototype, "hasTitle", {
            get: function get() {
              return true;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(Question.prototype, "hasInput", {
            get: function get() {
              return true;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(Question.prototype, "inputId", {
            get: function get() {
              return this.id + "i";
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(Question.prototype, "title", {
            get: function get() {
              return this.titleValue ? this.titleValue : this.name;
            },
            set: function set(newValue) {
              this.titleValue = newValue;
              this.fireCallback(this.titleChangedCallback);
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(Question.prototype, "processedTitle", {
            get: function get() {
              return this.survey != null ? this.survey.processText(this.title) : this.title;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(Question.prototype, "fullTitle", {
            get: function get() {
              if (this.survey && this.survey.questionTitleTemplate) {
                if (!this.textPreProcessor) {
                  var self = this;
                  this.textPreProcessor = new _textPreProcessor.TextPreProcessor();
                  this.textPreProcessor.onHasValue = function (name) {
                    return self.canProcessedTextValues(name.toLowerCase());
                  };
                  this.textPreProcessor.onProcess = function (name) {
                    return self.getProcessedTextValue(name);
                  };
                }
                return this.textPreProcessor.process(this.survey.questionTitleTemplate);
              }
              var requireText = this.requiredText;
              if (requireText) requireText += " ";
              var no = this.no;
              if (no) no += ". ";
              return no + requireText + this.processedTitle;
            },
            enumerable: true,
            configurable: true
          });
          Question.prototype.focus = function (onError) {
            if (onError === void 0) {
              onError = false;
            }
            _base.SurveyElement.ScrollElementToTop(this.id);
            var id = !onError ? this.getFirstInputElementId() : this.getFirstErrorInputElementId();
            if (_base.SurveyElement.FocusElement(id)) {
              this.fireCallback(this.focusCallback);
            }
          };
          Question.prototype.getFirstInputElementId = function () {
            return this.inputId;
          };
          Question.prototype.getFirstErrorInputElementId = function () {
            return this.getFirstInputElementId();
          };
          Question.prototype.canProcessedTextValues = function (name) {
            return name == "no" || name == "title" || name == "require";
          };
          Question.prototype.getProcessedTextValue = function (name) {
            if (name == "no") return this.no;
            if (name == "title") return this.processedTitle;
            if (name == "require") return this.requiredText;
            return null;
          };
          Question.prototype.supportComment = function () {
            return false;
          };
          Question.prototype.supportOther = function () {
            return false;
          };
          Object.defineProperty(Question.prototype, "isRequired", {
            get: function get() {
              return this.isRequiredValue;
            },
            set: function set(val) {
              if (this.isRequired == val) return;
              this.isRequiredValue = val;
              this.fireCallback(this.titleChangedCallback);
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(Question.prototype, "hasComment", {
            get: function get() {
              return this.hasCommentValue;
            },
            set: function set(val) {
              if (!this.supportComment()) return;
              this.hasCommentValue = val;
              if (this.hasComment) this.hasOther = false;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(Question.prototype, "commentText", {
            get: function get() {
              return this.commentTextValue ? this.commentTextValue : _surveyStrings.surveyLocalization.getString("otherItemText");
            },
            set: function set(value) {
              this.commentTextValue = value;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(Question.prototype, "hasOther", {
            get: function get() {
              return this.hasOtherValue;
            },
            set: function set(val) {
              if (!this.supportOther() || this.hasOther == val) return;
              this.hasOtherValue = val;
              if (this.hasOther) this.hasComment = false;
              this.hasOtherChanged();
            },
            enumerable: true,
            configurable: true
          });
          Question.prototype.hasOtherChanged = function () {};
          Object.defineProperty(Question.prototype, "no", {
            get: function get() {
              if (this.visibleIndex < 0) return "";
              var startIndex = 1;
              var isNumeric = true;
              var str = "";
              if (this.survey && this.survey.questionStartIndex) {
                str = this.survey.questionStartIndex;
                if (parseInt(str)) startIndex = parseInt(str);else if (str.length == 1) isNumeric = false;
              }
              if (isNumeric) return (this.visibleIndex + startIndex).toString();
              return String.fromCharCode(str.charCodeAt(0) + this.visibleIndex);
            },
            enumerable: true,
            configurable: true
          });
          Question.prototype.onSetData = function () {
            _super.prototype.onSetData.call(this);
            this.onSurveyValueChanged(this.value);
          };
          Object.defineProperty(Question.prototype, "value", {
            get: function get() {
              return this.valueFromData(this.getValueCore());
            },
            set: function set(newValue) {
              this.setNewValue(newValue);
              this.fireCallback(this.valueChangedCallback);
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(Question.prototype, "comment", {
            get: function get() {
              return this.getComment();
            },
            set: function set(newValue) {
              if (this.comment == newValue) return;
              this.setComment(newValue);
              this.fireCallback(this.commentChangedCallback);
            },
            enumerable: true,
            configurable: true
          });
          Question.prototype.getComment = function () {
            return this.data != null ? this.data.getComment(this.name) : this.questionComment;
          };
          Question.prototype.setComment = function (newValue) {
            this.setNewComment(newValue);
          };
          Question.prototype.isEmpty = function () {
            return this.value == null;
          };
          Question.prototype.hasErrors = function (fireCallback) {
            if (fireCallback === void 0) {
              fireCallback = true;
            }
            this.checkForErrors(fireCallback);
            return this.errors.length > 0;
          };
          Object.defineProperty(Question.prototype, "currentErrorCount", {
            get: function get() {
              return this.errors.length;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(Question.prototype, "requiredText", {
            get: function get() {
              return this.survey != null && this.isRequired ? this.survey.requiredText : "";
            },
            enumerable: true,
            configurable: true
          });
          Question.prototype.addError = function (error) {
            this.errors.push(error);
            this.fireCallback(this.errorsChangedCallback);
          };
          Question.prototype.checkForErrors = function (fireCallback) {
            var errorLength = this.errors ? this.errors.length : 0;
            this.errors = [];
            this.onCheckForErrors(this.errors);
            if (this.errors.length == 0 && this.value) {
              var error = this.runValidators();
              if (error) {
                this.errors.push(error);
              }
            }
            if (this.survey && this.errors.length == 0) {
              var error = this.survey.validateQuestion(this.name);
              if (error) {
                this.errors.push(error);
              }
            }
            if (fireCallback && (errorLength != this.errors.length || errorLength > 0)) {
              this.fireCallback(this.errorsChangedCallback);
            }
          };
          Question.prototype.onCheckForErrors = function (errors) {
            if (this.hasRequiredError()) {
              this.errors.push(new _error.AnswerRequiredError());
            }
          };
          Question.prototype.hasRequiredError = function () {
            return this.isRequired && this.isEmpty();
          };
          Question.prototype.runValidators = function () {
            return new _validator.ValidatorRunner().run(this);
          };
          Question.prototype.setNewValue = function (newValue) {
            this.setNewValueInData(newValue);
            this.onValueChanged();
          };
          Question.prototype.setNewValueInData = function (newValue) {
            if (!this.isValueChangedInSurvey) {
              newValue = this.valueToData(newValue);
              this.setValueCore(newValue);
            }
          };
          Question.prototype.getValueCore = function () {
            return this.data != null ? this.data.getValue(this.name) : this.questionValue;
          };
          Question.prototype.setValueCore = function (newValue) {
            if (this.data != null) {
              this.data.setValue(this.name, newValue);
            } else {
              this.questionValue = newValue;
            }
          };
          Question.prototype.valueFromData = function (val) {
            return val;
          };
          Question.prototype.valueToData = function (val) {
            return val;
          };
          Question.prototype.onValueChanged = function () {};
          Question.prototype.setNewComment = function (newValue) {
            if (this.data != null) {
              this.data.setComment(this.name, newValue);
            } else this.questionComment = newValue;
          };
          //IQuestion
          Question.prototype.onSurveyValueChanged = function (newValue) {
            this.isValueChangedInSurvey = true;
            this.value = this.valueFromData(newValue);
            this.fireCallback(this.commentChangedCallback);
            this.isValueChangedInSurvey = false;
          };
          //IValidatorOwner
          Question.prototype.getValidatorTitle = function () {
            return null;
          };
          return Question;
        }(_questionbase.QuestionBase);
        _jsonobject.JsonObject.metaData.addClass("question", [{ name: "title:text", onGetValue: function onGetValue(obj) {
          return obj.titleValue;
        } }, { name: "commentText", onGetValue: function onGetValue(obj) {
          return obj.commentTextValue;
        } }, "isRequired:boolean", { name: "validators:validators", baseClassName: "surveyvalidator", classNamePart: "validator" }], null, "questionbase");
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 14 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.QuestionBase = undefined;

        var _base = __webpack_require__(5);

        var _jsonobject = __webpack_require__(8);

        var _conditions = __webpack_require__(10);

        var QuestionBase = exports.QuestionBase = function (_super) {
          __extends(QuestionBase, _super);
          function QuestionBase(name) {
            _super.call(this);
            this.name = name;
            this.conditionRunner = null;
            this.visibleIf = "";
            this.visibleValue = true;
            this.startWithNewLine = true;
            this.visibleIndexValue = -1;
            this.width = "";
            this.renderWidthValue = "";
            this.rightIndentValue = 0;
            this.indent = 0;
            this.idValue = QuestionBase.getQuestionId();
            this.onCreating();
          }
          QuestionBase.getQuestionId = function () {
            return "sq_" + QuestionBase.questionCounter++;
          };
          Object.defineProperty(QuestionBase.prototype, "visible", {
            get: function get() {
              return this.visibleValue;
            },
            set: function set(val) {
              if (val == this.visible) return;
              this.visibleValue = val;
              this.fireCallback(this.visibilityChangedCallback);
              this.fireCallback(this.rowVisibilityChangedCallback);
              if (this.survey) {
                this.survey.questionVisibilityChanged(this, this.visible);
              }
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(QuestionBase.prototype, "visibleIndex", {
            get: function get() {
              return this.visibleIndexValue;
            },
            enumerable: true,
            configurable: true
          });
          QuestionBase.prototype.hasErrors = function (fireCallback) {
            if (fireCallback === void 0) {
              fireCallback = true;
            }
            return false;
          };
          Object.defineProperty(QuestionBase.prototype, "currentErrorCount", {
            get: function get() {
              return 0;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(QuestionBase.prototype, "hasTitle", {
            get: function get() {
              return false;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(QuestionBase.prototype, "hasInput", {
            get: function get() {
              return false;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(QuestionBase.prototype, "hasComment", {
            get: function get() {
              return false;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(QuestionBase.prototype, "id", {
            get: function get() {
              return this.idValue;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(QuestionBase.prototype, "renderWidth", {
            get: function get() {
              return this.renderWidthValue;
            },
            set: function set(val) {
              if (val == this.renderWidth) return;
              this.renderWidthValue = val;
              this.fireCallback(this.renderWidthChangedCallback);
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(QuestionBase.prototype, "rightIndent", {
            get: function get() {
              return this.rightIndentValue;
            },
            set: function set(val) {
              if (val == this.rightIndent) return;
              this.rightIndentValue = val;
              this.fireCallback(this.renderWidthChangedCallback);
            },
            enumerable: true,
            configurable: true
          });
          QuestionBase.prototype.focus = function (onError) {
            if (onError === void 0) {
              onError = false;
            }
          };
          QuestionBase.prototype.setData = function (newValue) {
            this.data = newValue;
            this.survey = newValue && newValue["questionAdded"] ? newValue : null;
            this.onSetData();
          };
          QuestionBase.prototype.fireCallback = function (callback) {
            if (callback) callback();
          };
          QuestionBase.prototype.onSetData = function () {};
          QuestionBase.prototype.onCreating = function () {};
          QuestionBase.prototype.runCondition = function (values) {
            if (!this.visibleIf) return;
            if (!this.conditionRunner) this.conditionRunner = new _conditions.ConditionRunner(this.visibleIf);
            this.conditionRunner.expression = this.visibleIf;
            this.visible = this.conditionRunner.run(values);
          };
          //IQuestion
          QuestionBase.prototype.onSurveyValueChanged = function (newValue) {};
          QuestionBase.prototype.onSurveyLoad = function () {};
          QuestionBase.prototype.setVisibleIndex = function (value) {
            if (this.visibleIndexValue == value) return;
            this.visibleIndexValue = value;
            this.fireCallback(this.visibleIndexChangedCallback);
          };
          QuestionBase.prototype.supportGoNextPageAutomatic = function () {
            return false;
          };
          QuestionBase.questionCounter = 100;
          return QuestionBase;
        }(_base.Base);
        _jsonobject.JsonObject.metaData.addClass("questionbase", ["!name", { name: "visible:boolean", default: true }, "visibleIf:text", { name: "width" }, { name: "startWithNewLine:boolean", default: true }, { name: "indent:number", default: 0, choices: [0, 1, 2, 3] }]);
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 15 */
    /***/ function(module, exports) {

      'use strict';

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var TextPreProcessorItem = exports.TextPreProcessorItem = function () {
        function TextPreProcessorItem() {}
        return TextPreProcessorItem;
      }();
      var TextPreProcessor = exports.TextPreProcessor = function () {
        function TextPreProcessor() {}
        TextPreProcessor.prototype.process = function (text) {
          if (!text) return text;
          if (!this.onProcess) return text;
          var items = this.getItems(text);
          for (var i = items.length - 1; i >= 0; i--) {
            var item = items[i];
            var name = this.getName(text.substring(item.start + 1, item.end));
            if (!this.canProcessName(name)) continue;
            if (this.onHasValue && !this.onHasValue(name)) continue;
            var value = this.onProcess(name);
            if (value == null) value = "";
            text = text.substr(0, item.start) + value + text.substr(item.end + 1);
          }
          return text;
        };
        TextPreProcessor.prototype.getItems = function (text) {
          var items = [];
          var length = text.length;
          var start = -1;
          var ch = '';
          for (var i = 0; i < length; i++) {
            ch = text[i];
            if (ch == '{') start = i;
            if (ch == '}') {
              if (start > -1) {
                var item = new TextPreProcessorItem();
                item.start = start;
                item.end = i;
                items.push(item);
              }
              start = -1;
            }
          }
          return items;
        };
        TextPreProcessor.prototype.getName = function (name) {
          if (!name) return;
          return name.trim();
        };
        TextPreProcessor.prototype.canProcessName = function (name) {
          if (!name) return false;
          for (var i = 0; i < name.length; i++) {
            var ch = name[i];
            //TODO
            if (ch == ' ' || ch == '-' || ch == '&') return false;
          }
          return true;
        };
        return TextPreProcessor;
      }();

      /***/ },
    /* 16 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.QuestionCheckboxBase = exports.QuestionSelectBase = undefined;

        var _jsonobject = __webpack_require__(8);

        var _question = __webpack_require__(13);

        var _base = __webpack_require__(5);

        var _surveyStrings = __webpack_require__(7);

        var _error = __webpack_require__(6);

        var _choicesRestfull = __webpack_require__(9);

        var QuestionSelectBase = exports.QuestionSelectBase = function (_super) {
          __extends(QuestionSelectBase, _super);
          function QuestionSelectBase(name) {
            _super.call(this, name);
            this.visibleChoicesCache = null;
            this.otherItem = new _base.ItemValue("other", _surveyStrings.surveyLocalization.getString("otherItemText"));
            this.choicesFromUrl = null;
            this.cachedValueForUrlRequestion = null;
            this.choicesValues = new Array();
            this.otherErrorText = null;
            this.storeOthersAsComment = true;
            this.choicesOrderValue = "none";
            this.isSettingComment = false;
            this.choicesByUrl = this.createRestfull();
            var self = this;
            this.choicesByUrl.getResultCallback = function (items) {
              self.onLoadChoicesFromUrl(items);
            };
          }
          Object.defineProperty(QuestionSelectBase.prototype, "isOtherSelected", {
            get: function get() {
              return this.getStoreOthersAsComment() ? this.getHasOther(this.value) : this.getHasOther(this.cachedValue);
            },
            enumerable: true,
            configurable: true
          });
          QuestionSelectBase.prototype.getHasOther = function (val) {
            return val == this.otherItem.value;
          };
          QuestionSelectBase.prototype.createRestfull = function () {
            return new _choicesRestfull.ChoicesRestfull();
          };
          QuestionSelectBase.prototype.getComment = function () {
            if (this.getStoreOthersAsComment()) return _super.prototype.getComment.call(this);
            return this.commentValue;
          };
          QuestionSelectBase.prototype.setComment = function (newValue) {
            if (this.getStoreOthersAsComment()) _super.prototype.setComment.call(this, newValue);else {
              if (!this.isSettingComment && newValue != this.commentValue) {
                this.isSettingComment = true;
                this.commentValue = newValue;
                if (this.isOtherSelected) {
                  this.setNewValueInData(this.cachedValue);
                }
                this.isSettingComment = false;
              }
            }
          };
          QuestionSelectBase.prototype.setNewValue = function (newValue) {
            if (newValue) this.cachedValueForUrlRequestion = newValue;
            _super.prototype.setNewValue.call(this, newValue);
          };
          QuestionSelectBase.prototype.valueFromData = function (val) {
            if (this.getStoreOthersAsComment()) return _super.prototype.valueFromData.call(this, val);
            this.cachedValue = this.valueFromDataCore(val);
            return this.cachedValue;
          };
          QuestionSelectBase.prototype.valueToData = function (val) {
            if (this.getStoreOthersAsComment()) return _super.prototype.valueToData.call(this, val);
            this.cachedValue = val;
            return this.valueToDataCore(val);
          };
          QuestionSelectBase.prototype.valueFromDataCore = function (val) {
            if (!this.hasUnknownValue(val)) return val;
            if (val == this.otherItem.value) return val;
            this.comment = val;
            return this.otherItem.value;
          };
          QuestionSelectBase.prototype.valueToDataCore = function (val) {
            if (val == this.otherItem.value && this.getComment()) {
              val = this.getComment();
            }
            return val;
          };
          QuestionSelectBase.prototype.hasUnknownValue = function (val) {
            if (!val) return false;
            var items = this.activeChoices;
            for (var i = 0; i < items.length; i++) {
              if (items[i].value == val) return false;
            }
            return true;
          };
          Object.defineProperty(QuestionSelectBase.prototype, "choices", {
            get: function get() {
              return this.choicesValues;
            },
            set: function set(newValue) {
              _base.ItemValue.setData(this.choicesValues, newValue);
              this.onVisibleChoicesChanged();
            },
            enumerable: true,
            configurable: true
          });
          QuestionSelectBase.prototype.hasOtherChanged = function () {
            this.onVisibleChoicesChanged();
          };
          Object.defineProperty(QuestionSelectBase.prototype, "choicesOrder", {
            get: function get() {
              return this.choicesOrderValue;
            },
            set: function set(newValue) {
              if (newValue == this.choicesOrderValue) return;
              this.choicesOrderValue = newValue;
              this.onVisibleChoicesChanged();
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(QuestionSelectBase.prototype, "otherText", {
            get: function get() {
              return this.otherItem.text;
            },
            set: function set(value) {
              this.otherItem.text = value;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(QuestionSelectBase.prototype, "visibleChoices", {
            get: function get() {
              if (!this.hasOther && this.choicesOrder == "none") return this.activeChoices;
              if (!this.visibleChoicesCache) {
                this.visibleChoicesCache = this.sortVisibleChoices(this.activeChoices.slice());
                if (this.hasOther) {
                  this.visibleChoicesCache.push(this.otherItem);
                }
              }
              return this.visibleChoicesCache;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(QuestionSelectBase.prototype, "activeChoices", {
            get: function get() {
              return this.choicesFromUrl ? this.choicesFromUrl : this.choices;
            },
            enumerable: true,
            configurable: true
          });
          QuestionSelectBase.prototype.supportComment = function () {
            return true;
          };
          QuestionSelectBase.prototype.supportOther = function () {
            return true;
          };
          QuestionSelectBase.prototype.onCheckForErrors = function (errors) {
            _super.prototype.onCheckForErrors.call(this, errors);
            if (!this.isOtherSelected || this.comment) return;
            var text = this.otherErrorText;
            if (!text) {
              text = _surveyStrings.surveyLocalization.getString("otherRequiredError");
            }
            errors.push(new _error.CustomError(text));
          };
          QuestionSelectBase.prototype.getStoreOthersAsComment = function () {
            return this.storeOthersAsComment && (this.survey != null ? this.survey.storeOthersAsComment : true);
          };
          QuestionSelectBase.prototype.onSurveyLoad = function () {
            if (this.choicesByUrl) this.choicesByUrl.run();
          };
          QuestionSelectBase.prototype.onLoadChoicesFromUrl = function (array) {
            var errorCount = this.errors.length;
            this.errors = [];
            if (this.choicesByUrl && this.choicesByUrl.error) {
              this.errors.push(this.choicesByUrl.error);
            }
            if (errorCount > 0 || this.errors.length > 0) {
              this.fireCallback(this.errorsChangedCallback);
            }
            var newChoices = null;
            if (array && array.length > 0) {
              newChoices = new Array();
              _base.ItemValue.setData(newChoices, array);
            }
            this.choicesFromUrl = newChoices;
            this.onVisibleChoicesChanged();
            if (this.cachedValueForUrlRequestion) {
              this.value = this.cachedValueForUrlRequestion;
            }
          };
          QuestionSelectBase.prototype.onVisibleChoicesChanged = function () {
            this.visibleChoicesCache = null;
            this.fireCallback(this.choicesChangedCallback);
          };
          QuestionSelectBase.prototype.sortVisibleChoices = function (array) {
            var order = this.choicesOrder.toLowerCase();
            if (order == "asc") return this.sortArray(array, 1);
            if (order == "desc") return this.sortArray(array, -1);
            if (order == "random") return this.randomizeArray(array);
            return array;
          };
          QuestionSelectBase.prototype.sortArray = function (array, mult) {
            return array.sort(function (a, b) {
              if (a.text < b.text) return -1 * mult;
              if (a.text > b.text) return 1 * mult;
              return 0;
            });
          };
          QuestionSelectBase.prototype.randomizeArray = function (array) {
            for (var i = array.length - 1; i > 0; i--) {
              var j = Math.floor(Math.random() * (i + 1));
              var temp = array[i];
              array[i] = array[j];
              array[j] = temp;
            }
            return array;
          };
          return QuestionSelectBase;
        }(_question.Question);
        var QuestionCheckboxBase = exports.QuestionCheckboxBase = function (_super) {
          __extends(QuestionCheckboxBase, _super);
          function QuestionCheckboxBase(name) {
            _super.call(this, name);
            this.name = name;
            this.colCountValue = 1;
          }
          Object.defineProperty(QuestionCheckboxBase.prototype, "colCount", {
            get: function get() {
              return this.colCountValue;
            },
            set: function set(value) {
              if (value < 0 || value > 4) return;
              this.colCountValue = value;
              this.fireCallback(this.colCountChangedCallback);
            },
            enumerable: true,
            configurable: true
          });
          return QuestionCheckboxBase;
        }(QuestionSelectBase);
        _jsonobject.JsonObject.metaData.addClass("selectbase", ["hasComment:boolean", "hasOther:boolean", { name: "choices:itemvalues", onGetValue: function onGetValue(obj) {
          return _base.ItemValue.getData(obj.choices);
        }, onSetValue: function onSetValue(obj, value) {
          obj.choices = value;
        } }, { name: "choicesOrder", default: "none", choices: ["none", "asc", "desc", "random"] }, { name: "choicesByUrl:restfull", className: "ChoicesRestfull", onGetValue: function onGetValue(obj) {
          return obj.choicesByUrl.isEmpty ? null : obj.choicesByUrl;
        }, onSetValue: function onSetValue(obj, value) {
          obj.choicesByUrl.setData(value);
        } }, { name: "otherText", default: _surveyStrings.surveyLocalization.getString("otherItemText") }, "otherErrorText", { name: "storeOthersAsComment:boolean", default: true }], null, "question");
        _jsonobject.JsonObject.metaData.addClass("checkboxbase", [{ name: "colCount:number", default: 1, choices: [0, 1, 2, 3, 4] }], null, "selectbase");
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 17 */
    /***/ function(module, exports) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var QuestionFactory = exports.QuestionFactory = function () {
        function QuestionFactory() {
          this.creatorHash = {};
        }
        QuestionFactory.prototype.registerQuestion = function (questionType, questionCreator) {
          this.creatorHash[questionType] = questionCreator;
        };
        QuestionFactory.prototype.getAllTypes = function () {
          var result = new Array();
          for (var key in this.creatorHash) {
            result.push(key);
          }
          return result.sort();
        };
        QuestionFactory.prototype.createQuestion = function (questionType, name) {
          var creator = this.creatorHash[questionType];
          if (creator == null) return null;
          return creator(name);
        };
        QuestionFactory.Instance = new QuestionFactory();
        QuestionFactory.DefaultChoices = ["one", "two|second value", "three|third value"];
        return QuestionFactory;
      }();

      /***/ },
    /* 18 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.QuestionMatrixDropdownModel = exports.MatrixDropdownRowModel = undefined;

        var _question_matrixdropdownbase = __webpack_require__(12);

        var _jsonobject = __webpack_require__(8);

        var _base = __webpack_require__(5);

        var _questionfactory = __webpack_require__(17);

        var MatrixDropdownRowModel = exports.MatrixDropdownRowModel = function (_super) {
          __extends(MatrixDropdownRowModel, _super);
          function MatrixDropdownRowModel(name, text, data, value) {
            _super.call(this, data, value);
            this.name = name;
            this.text = text;
          }
          Object.defineProperty(MatrixDropdownRowModel.prototype, "rowName", {
            get: function get() {
              return this.name;
            },
            enumerable: true,
            configurable: true
          });
          return MatrixDropdownRowModel;
        }(_question_matrixdropdownbase.MatrixDropdownRowModelBase);
        var QuestionMatrixDropdownModel = exports.QuestionMatrixDropdownModel = function (_super) {
          __extends(QuestionMatrixDropdownModel, _super);
          function QuestionMatrixDropdownModel(name) {
            _super.call(this, name);
            this.name = name;
            this.rowsValue = [];
          }
          QuestionMatrixDropdownModel.prototype.getType = function () {
            return "matrixdropdown";
          };
          Object.defineProperty(QuestionMatrixDropdownModel.prototype, "rows", {
            get: function get() {
              return this.rowsValue;
            },
            set: function set(newValue) {
              _base.ItemValue.setData(this.rowsValue, newValue);
            },
            enumerable: true,
            configurable: true
          });
          QuestionMatrixDropdownModel.prototype.generateRows = function () {
            var result = new Array();
            if (!this.rows || this.rows.length === 0) return result;
            var val = this.value;
            if (!val) val = {};
            for (var i = 0; i < this.rows.length; i++) {
              if (!this.rows[i].value) continue;
              result.push(this.createMatrixRow(this.rows[i].value, this.rows[i].text, val[this.rows[i].value]));
            }
            return result;
          };
          QuestionMatrixDropdownModel.prototype.createMatrixRow = function (name, text, value) {
            return new MatrixDropdownRowModel(name, text, this, value);
          };
          return QuestionMatrixDropdownModel;
        }(_question_matrixdropdownbase.QuestionMatrixDropdownModelBase);
        _jsonobject.JsonObject.metaData.addClass("matrixdropdown", [{ name: "rows:itemvalues", onGetValue: function onGetValue(obj) {
          return _base.ItemValue.getData(obj.rows);
        }, onSetValue: function onSetValue(obj, value) {
          obj.rows = value;
        } }], function () {
          return new QuestionMatrixDropdownModel("");
        }, "matrixdropdownbase");
        _questionfactory.QuestionFactory.Instance.registerQuestion("matrixdropdown", function (name) {
          var q = new QuestionMatrixDropdownModel(name);q.choices = [1, 2, 3, 4, 5];q.rows = ["Row 1", "Row 2"];q.addColumn("Column 1");q.addColumn("Column 2");q.addColumn("Column 3");return q;
        });
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 19 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.QuestionMatrixDynamicModel = exports.MatrixDynamicRowModel = undefined;

        var _question_matrixdropdownbase = __webpack_require__(12);

        var _jsonobject = __webpack_require__(8);

        var _questionfactory = __webpack_require__(17);

        var _surveyStrings = __webpack_require__(7);

        var _error = __webpack_require__(6);

        var MatrixDynamicRowModel = exports.MatrixDynamicRowModel = function (_super) {
          __extends(MatrixDynamicRowModel, _super);
          function MatrixDynamicRowModel(index, data, value) {
            _super.call(this, data, value);
            this.index = index;
          }
          Object.defineProperty(MatrixDynamicRowModel.prototype, "rowName", {
            get: function get() {
              return "row" + this.index;
            },
            enumerable: true,
            configurable: true
          });
          return MatrixDynamicRowModel;
        }(_question_matrixdropdownbase.MatrixDropdownRowModelBase);
        var QuestionMatrixDynamicModel = exports.QuestionMatrixDynamicModel = function (_super) {
          __extends(QuestionMatrixDynamicModel, _super);
          function QuestionMatrixDynamicModel(name) {
            _super.call(this, name);
            this.name = name;
            this.rowCounter = 0;
            this.rowCountValue = 2;
            this.addRowTextValue = null;
            this.removeRowTextValue = null;
            this.minRowCount = 0;
          }
          QuestionMatrixDynamicModel.prototype.getType = function () {
            return "matrixdynamic";
          };
          Object.defineProperty(QuestionMatrixDynamicModel.prototype, "rowCount", {
            get: function get() {
              return this.rowCountValue;
            },
            set: function set(val) {
              if (val < 0 || val > QuestionMatrixDynamicModel.MaxRowCount) return;
              this.rowCountValue = val;
              if (this.value && this.value.length > val) {
                var qVal = this.value;
                qVal.splice(val);
                this.value = qVal;
              }
              this.fireCallback(this.rowCountChangedCallback);
            },
            enumerable: true,
            configurable: true
          });
          QuestionMatrixDynamicModel.prototype.addRow = function () {
            if (this.generatedVisibleRows) {
              this.generatedVisibleRows.push(this.createMatrixRow(null));
            }
            this.rowCount++;
          };
          QuestionMatrixDynamicModel.prototype.removeRow = function (index) {
            if (index < 0 || index >= this.rowCount) return;
            if (this.generatedVisibleRows && index < this.generatedVisibleRows.length) {
              this.generatedVisibleRows.splice(index, 1);
            }
            if (this.value) {
              var val = this.createNewValue(this.value);
              val.splice(index, 1);
              val = this.deleteRowValue(val, null);
              this.value = val;
            }
            this.rowCount--;
          };
          Object.defineProperty(QuestionMatrixDynamicModel.prototype, "addRowText", {
            get: function get() {
              return this.addRowTextValue ? this.addRowTextValue : _surveyStrings.surveyLocalization.getString("addRow");
            },
            set: function set(value) {
              this.addRowTextValue = value;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(QuestionMatrixDynamicModel.prototype, "removeRowText", {
            get: function get() {
              return this.removeRowTextValue ? this.removeRowTextValue : _surveyStrings.surveyLocalization.getString("removeRow");
            },
            set: function set(value) {
              this.removeRowTextValue = value;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(QuestionMatrixDynamicModel.prototype, "cachedVisibleRows", {
            get: function get() {
              if (this.generatedVisibleRows && this.generatedVisibleRows.length == this.rowCount) return this.generatedVisibleRows;
              return this.visibleRows;
            },
            enumerable: true,
            configurable: true
          });
          QuestionMatrixDynamicModel.prototype.onCheckForErrors = function (errors) {
            _super.prototype.onCheckForErrors.call(this, errors);
            if (this.hasErrorInRows()) {
              errors.push(new _error.CustomError(_surveyStrings.surveyLocalization.getString("minRowCountError")["format"](this.minRowCount)));
            }
          };
          QuestionMatrixDynamicModel.prototype.hasErrorInRows = function () {
            if (this.minRowCount <= 0 || !this.generatedVisibleRows) return false;
            var res = false;
            var setRowCount = 0;
            for (var rowIndex = 0; rowIndex < this.generatedVisibleRows.length; rowIndex++) {
              var row = this.generatedVisibleRows[rowIndex];
              if (!row.isEmpty) setRowCount++;
            }
            return setRowCount < this.minRowCount;
          };
          QuestionMatrixDynamicModel.prototype.generateRows = function () {
            var result = new Array();
            if (this.rowCount === 0) return result;
            var val = this.createNewValue(this.value);
            for (var i = 0; i < this.rowCount; i++) {
              result.push(this.createMatrixRow(this.getRowValueByIndex(val, i)));
            }
            return result;
          };
          QuestionMatrixDynamicModel.prototype.createMatrixRow = function (value) {
            return new MatrixDynamicRowModel(this.rowCounter++, this, value);
          };
          QuestionMatrixDynamicModel.prototype.createNewValue = function (curValue) {
            var result = curValue;
            if (!result) result = [];
            var r = [];
            if (result.length > this.rowCount) result.splice(this.rowCount - 1);
            for (var i = result.length; i < this.rowCount; i++) {
              result.push({});
            }
            return result;
          };
          QuestionMatrixDynamicModel.prototype.deleteRowValue = function (newValue, row) {
            var isEmpty = true;
            for (var i = 0; i < newValue.length; i++) {
              if (Object.keys(newValue[i]).length > 0) {
                isEmpty = false;
                break;
              }
            }
            return isEmpty ? null : newValue;
          };
          QuestionMatrixDynamicModel.prototype.getRowValueByIndex = function (questionValue, index) {
            return index >= 0 && index < questionValue.length ? questionValue[index] : null;
          };
          QuestionMatrixDynamicModel.prototype.getRowValue = function (row, questionValue, create) {
            if (create === void 0) {
              create = false;
            }
            return this.getRowValueByIndex(questionValue, this.generatedVisibleRows.indexOf(row));
          };
          QuestionMatrixDynamicModel.MaxRowCount = 100;
          return QuestionMatrixDynamicModel;
        }(_question_matrixdropdownbase.QuestionMatrixDropdownModelBase);
        _jsonobject.JsonObject.metaData.addClass("matrixdynamic", [{ name: "rowCount:number", default: 2 }, { name: "minRowCount:number", default: 0 }, { name: "addRowText", onGetValue: function onGetValue(obj) {
          return obj.addRowTextValue;
        } }, { name: "removeRowText", onGetValue: function onGetValue(obj) {
          return obj.removeRowTextValue;
        } }], function () {
          return new QuestionMatrixDynamicModel("");
        }, "matrixdropdownbase");
        _questionfactory.QuestionFactory.Instance.registerQuestion("matrixdynamic", function (name) {
          var q = new QuestionMatrixDynamicModel(name);q.choices = [1, 2, 3, 4, 5];q.addColumn("Column 1");q.addColumn("Column 2");q.addColumn("Column 3");return q;
        });
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 20 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.QuestionMatrixModel = exports.MatrixRowModel = undefined;

        var _base = __webpack_require__(5);

        var _question = __webpack_require__(13);

        var _jsonobject = __webpack_require__(8);

        var _surveyStrings = __webpack_require__(7);

        var _error = __webpack_require__(6);

        var _questionfactory = __webpack_require__(17);

        var MatrixRowModel = exports.MatrixRowModel = function (_super) {
          __extends(MatrixRowModel, _super);
          function MatrixRowModel(name, text, fullName, data, value) {
            _super.call(this);
            this.name = name;
            this.text = text;
            this.fullName = fullName;
            this.data = data;
            this.rowValue = value;
          }
          Object.defineProperty(MatrixRowModel.prototype, "value", {
            get: function get() {
              return this.rowValue;
            },
            set: function set(newValue) {
              this.rowValue = newValue;
              if (this.data) this.data.onMatrixRowChanged(this);
              this.onValueChanged();
            },
            enumerable: true,
            configurable: true
          });
          MatrixRowModel.prototype.onValueChanged = function () {};
          return MatrixRowModel;
        }(_base.Base);
        var QuestionMatrixModel = exports.QuestionMatrixModel = function (_super) {
          __extends(QuestionMatrixModel, _super);
          function QuestionMatrixModel(name) {
            _super.call(this, name);
            this.name = name;
            this.columnsValue = [];
            this.rowsValue = [];
            this.isRowChanging = false;
            this.isAllRowRequired = false;
          }
          QuestionMatrixModel.prototype.getType = function () {
            return "matrix";
          };
          Object.defineProperty(QuestionMatrixModel.prototype, "hasRows", {
            get: function get() {
              return this.rowsValue.length > 0;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(QuestionMatrixModel.prototype, "columns", {
            get: function get() {
              return this.columnsValue;
            },
            set: function set(newValue) {
              _base.ItemValue.setData(this.columnsValue, newValue);
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(QuestionMatrixModel.prototype, "rows", {
            get: function get() {
              return this.rowsValue;
            },
            set: function set(newValue) {
              _base.ItemValue.setData(this.rowsValue, newValue);
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(QuestionMatrixModel.prototype, "visibleRows", {
            get: function get() {
              var result = new Array();
              var val = this.value;
              if (!val) val = {};
              for (var i = 0; i < this.rows.length; i++) {
                if (!this.rows[i].value) continue;
                result.push(this.createMatrixRow(this.rows[i].value, this.rows[i].text, this.name + '_' + this.rows[i].value.toString(), val[this.rows[i].value]));
              }
              if (result.length == 0) {
                result.push(this.createMatrixRow(null, "", this.name, val));
              }
              this.generatedVisibleRows = result;
              return result;
            },
            enumerable: true,
            configurable: true
          });
          QuestionMatrixModel.prototype.onCheckForErrors = function (errors) {
            _super.prototype.onCheckForErrors.call(this, errors);
            if (this.hasErrorInRows()) {
              this.errors.push(new _error.CustomError(_surveyStrings.surveyLocalization.getString("requiredInAllRowsError")));
            }
          };
          QuestionMatrixModel.prototype.hasErrorInRows = function () {
            if (!this.isAllRowRequired) return false;
            var rows = this.generatedVisibleRows;
            if (!rows) rows = this.visibleRows;
            if (!rows) return false;
            for (var i = 0; i < rows.length; i++) {
              var val = rows[i].value;
              if (!val) return true;
            }
            return false;
          };
          QuestionMatrixModel.prototype.createMatrixRow = function (name, text, fullName, value) {
            return new MatrixRowModel(name, text, fullName, this, value);
          };
          QuestionMatrixModel.prototype.onValueChanged = function () {
            if (this.isRowChanging || !this.generatedVisibleRows || this.generatedVisibleRows.length == 0) return;
            this.isRowChanging = true;
            var val = this.value;
            if (!val) val = {};
            if (this.rows.length == 0) {
              this.generatedVisibleRows[0].value = val;
            } else {
              for (var i = 0; i < this.generatedVisibleRows.length; i++) {
                var row = this.generatedVisibleRows[i];
                var rowVal = val[row.name] ? val[row.name] : null;
                this.generatedVisibleRows[i].value = rowVal;
              }
            }
            this.isRowChanging = false;
          };
          //IMatrixData
          QuestionMatrixModel.prototype.onMatrixRowChanged = function (row) {
            if (this.isRowChanging) return;
            this.isRowChanging = true;
            if (!this.hasRows) {
              this.setNewValue(row.value);
            } else {
              var newValue = this.value;
              if (!newValue) {
                newValue = {};
              }
              newValue[row.name] = row.value;
              this.setNewValue(newValue);
            }
            this.isRowChanging = false;
          };
          return QuestionMatrixModel;
        }(_question.Question);
        _jsonobject.JsonObject.metaData.addClass("matrix", [{ name: "columns:itemvalues", onGetValue: function onGetValue(obj) {
          return _base.ItemValue.getData(obj.columns);
        }, onSetValue: function onSetValue(obj, value) {
          obj.columns = value;
        } }, { name: "rows:itemvalues", onGetValue: function onGetValue(obj) {
          return _base.ItemValue.getData(obj.rows);
        }, onSetValue: function onSetValue(obj, value) {
          obj.rows = value;
        } }, "isAllRowRequired:boolean"], function () {
          return new QuestionMatrixModel("");
        }, "question");
        _questionfactory.QuestionFactory.Instance.registerQuestion("matrix", function (name) {
          var q = new QuestionMatrixModel(name);q.rows = ["Row 1", "Row 2"];q.columns = ["Column 1", "Column 2", "Column 3"];return q;
        });
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 21 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.QuestionMultipleTextModel = exports.MultipleTextItemModel = undefined;

        var _base = __webpack_require__(5);

        var _validator = __webpack_require__(3);

        var _question = __webpack_require__(13);

        var _jsonobject = __webpack_require__(8);

        var _questionfactory = __webpack_require__(17);

        var MultipleTextItemModel = exports.MultipleTextItemModel = function (_super) {
          __extends(MultipleTextItemModel, _super);
          function MultipleTextItemModel(name, title) {
            if (name === void 0) {
              name = null;
            }
            if (title === void 0) {
              title = null;
            }
            _super.call(this);
            this.name = name;
            this.validators = new Array();
            this.title = title;
          }
          MultipleTextItemModel.prototype.getType = function () {
            return "multipletextitem";
          };
          MultipleTextItemModel.prototype.setData = function (data) {
            this.data = data;
          };
          Object.defineProperty(MultipleTextItemModel.prototype, "title", {
            get: function get() {
              return this.titleValue ? this.titleValue : this.name;
            },
            set: function set(newText) {
              this.titleValue = newText;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(MultipleTextItemModel.prototype, "value", {
            get: function get() {
              return this.data ? this.data.getMultipleTextValue(this.name) : null;
            },
            set: function set(value) {
              if (this.data != null) {
                this.data.setMultipleTextValue(this.name, value);
              }
            },
            enumerable: true,
            configurable: true
          });
          MultipleTextItemModel.prototype.onValueChanged = function (newValue) {};
          //IValidatorOwner
          MultipleTextItemModel.prototype.getValidatorTitle = function () {
            return this.title;
          };
          return MultipleTextItemModel;
        }(_base.Base);
        var QuestionMultipleTextModel = exports.QuestionMultipleTextModel = function (_super) {
          __extends(QuestionMultipleTextModel, _super);
          function QuestionMultipleTextModel(name) {
            _super.call(this, name);
            this.name = name;
            this.colCountValue = 1;
            this.itemSize = 25;
            this.itemsValues = new Array();
            this.isMultipleItemValueChanging = false;
            var self = this;
            this.items.push = function (value) {
              value.setData(self);
              var result = Array.prototype.push.call(this, value);
              self.fireCallback(self.colCountChangedCallback);
              return result;
            };
          }
          QuestionMultipleTextModel.prototype.getType = function () {
            return "multipletext";
          };
          Object.defineProperty(QuestionMultipleTextModel.prototype, "items", {
            get: function get() {
              return this.itemsValues;
            },
            set: function set(value) {
              this.itemsValues = value;
              this.fireCallback(this.colCountChangedCallback);
            },
            enumerable: true,
            configurable: true
          });
          QuestionMultipleTextModel.prototype.AddItem = function (name, title) {
            if (title === void 0) {
              title = null;
            }
            var item = this.createTextItem(name, title);
            this.items.push(item);
            return item;
          };
          Object.defineProperty(QuestionMultipleTextModel.prototype, "colCount", {
            get: function get() {
              return this.colCountValue;
            },
            set: function set(value) {
              if (value < 1 || value > 4) return;
              this.colCountValue = value;
              this.fireCallback(this.colCountChangedCallback);
            },
            enumerable: true,
            configurable: true
          });
          QuestionMultipleTextModel.prototype.getRows = function () {
            var colCount = this.colCount;
            var items = this.items;
            var rows = [];
            var index = 0;
            for (var i = 0; i < items.length; i++) {
              if (index == 0) {
                rows.push([]);
              }
              rows[rows.length - 1].push(items[i]);
              index++;
              if (index >= colCount) {
                index = 0;
              }
            }
            return rows;
          };
          QuestionMultipleTextModel.prototype.onValueChanged = function () {
            _super.prototype.onValueChanged.call(this);
            this.onItemValueChanged();
          };
          QuestionMultipleTextModel.prototype.createTextItem = function (name, title) {
            return new MultipleTextItemModel(name, title);
          };
          QuestionMultipleTextModel.prototype.onItemValueChanged = function () {
            if (this.isMultipleItemValueChanging) return;
            for (var i = 0; i < this.items.length; i++) {
              var itemValue = null;
              if (this.value && this.items[i].name in this.value) {
                itemValue = this.value[this.items[i].name];
              }
              this.items[i].onValueChanged(itemValue);
            }
          };
          QuestionMultipleTextModel.prototype.runValidators = function () {
            var error = _super.prototype.runValidators.call(this);
            if (error != null) return error;
            for (var i = 0; i < this.items.length; i++) {
              error = new _validator.ValidatorRunner().run(this.items[i]);
              if (error != null) return error;
            }
            return null;
          };
          //IMultipleTextData
          QuestionMultipleTextModel.prototype.getMultipleTextValue = function (name) {
            if (!this.value) return null;
            return this.value[name];
          };
          QuestionMultipleTextModel.prototype.setMultipleTextValue = function (name, value) {
            this.isMultipleItemValueChanging = true;
            var newValue = this.value;
            if (!newValue) {
              newValue = {};
            }
            newValue[name] = value;
            this.setNewValue(newValue);
            this.isMultipleItemValueChanging = false;
          };
          return QuestionMultipleTextModel;
        }(_question.Question);
        _jsonobject.JsonObject.metaData.addClass("multipletextitem", ["name", { name: "title", onGetValue: function onGetValue(obj) {
          return obj.titleValue;
        } }, { name: "validators:validators", baseClassName: "surveyvalidator", classNamePart: "validator" }], function () {
          return new MultipleTextItemModel("");
        });
        _jsonobject.JsonObject.metaData.addClass("multipletext", [{ name: "!items:textitems", className: "multipletextitem" }, { name: "itemSize:number", default: 25 }, { name: "colCount:number", default: 1, choices: [1, 2, 3, 4] }], function () {
          return new QuestionMultipleTextModel("");
        }, "question");
        _questionfactory.QuestionFactory.Instance.registerQuestion("multipletext", function (name) {
          var q = new QuestionMultipleTextModel(name);q.AddItem("text1");q.AddItem("text2");return q;
        });
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 22 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PageModel = exports.QuestionRowModel = undefined;

        var _jsonobject = __webpack_require__(8);

        var _base = __webpack_require__(5);

        var _conditions = __webpack_require__(10);

        var _questionfactory = __webpack_require__(17);

        var QuestionRowModel = exports.QuestionRowModel = function () {
          function QuestionRowModel(page, question) {
            this.page = page;
            this.question = question;
            this.visibleValue = false;
            this.questions = [];
            var self = this;
            this.question.rowVisibilityChangedCallback = function () {
              self.onRowVisibilityChanged();
            };
          }
          Object.defineProperty(QuestionRowModel.prototype, "visible", {
            get: function get() {
              return this.visibleValue;
            },
            set: function set(val) {
              if (val == this.visible) return;
              this.visibleValue = val;
              this.onVisibleChanged();
            },
            enumerable: true,
            configurable: true
          });
          QuestionRowModel.prototype.updateVisible = function () {
            this.visible = this.calcVisible();
            this.setWidth();
          };
          QuestionRowModel.prototype.addQuestion = function (q) {
            this.questions.push(q);
            this.updateVisible();
          };
          QuestionRowModel.prototype.onVisibleChanged = function () {
            if (this.visibilityChangedCallback) this.visibilityChangedCallback();
          };
          QuestionRowModel.prototype.setWidth = function () {
            var visCount = this.getVisibleCount();
            if (visCount == 0) return;
            var counter = 0;
            for (var i = 0; i < this.questions.length; i++) {
              if (this.isQuestionVisible(this.questions[i])) {
                this.questions[i].renderWidth = this.question.width ? this.question.width : Math.floor(100 / visCount) + '%';
                this.questions[i].rightIndent = counter < visCount - 1 ? 1 : 0;
                counter++;
              }
            }
          };
          QuestionRowModel.prototype.onRowVisibilityChanged = function () {
            this.page.onRowVisibilityChanged(this);
          };
          QuestionRowModel.prototype.getVisibleCount = function () {
            var res = 0;
            for (var i = 0; i < this.questions.length; i++) {
              if (this.isQuestionVisible(this.questions[i])) res++;
            }
            return res;
          };
          QuestionRowModel.prototype.isQuestionVisible = function (q) {
            return this.page.isQuestionVisible(q);
          };
          QuestionRowModel.prototype.calcVisible = function () {
            return this.getVisibleCount() > 0;
          };
          return QuestionRowModel;
        }();
        var PageModel = exports.PageModel = function (_super) {
          __extends(PageModel, _super);
          function PageModel(name) {
            if (name === void 0) {
              name = "";
            }
            _super.call(this);
            this.name = name;
            this.rowValues = null;
            this.conditionRunner = null;
            this.questions = new Array();
            this.data = null;
            this.visibleIf = "";
            this.title = "";
            this.visibleIndex = -1;
            this.numValue = -1;
            this.visibleValue = true;
            this.idValue = PageModel.getPageId();
            var self = this;
            this.questions.push = function (value) {
              if (self.data != null) {
                value.setData(self.data);
              }
              return Array.prototype.push.call(this, value);
            };
          }
          PageModel.getPageId = function () {
            return "sp_" + PageModel.pageCounter++;
          };
          Object.defineProperty(PageModel.prototype, "id", {
            get: function get() {
              return this.idValue;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(PageModel.prototype, "rows", {
            get: function get() {
              this.rowValues = this.buildRows();
              return this.rowValues;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(PageModel.prototype, "isActive", {
            get: function get() {
              return !this.data || this.data.currentPage == this;
            },
            enumerable: true,
            configurable: true
          });
          PageModel.prototype.isQuestionVisible = function (question) {
            return question.visible || this.isDesignMode;
          };
          PageModel.prototype.createRow = function (question) {
            return new QuestionRowModel(this, question);
          };
          Object.defineProperty(PageModel.prototype, "isDesignMode", {
            get: function get() {
              return this.data && this.data.isDesignMode;
            },
            enumerable: true,
            configurable: true
          });
          PageModel.prototype.buildRows = function () {
            var result = new Array();
            var lastRowVisibleIndex = -1;
            var self = this;
            for (var i = 0; i < this.questions.length; i++) {
              var q = this.questions[i];
              result.push(this.createRow(q));
              if (q.startWithNewLine) {
                lastRowVisibleIndex = i;
                result[i].addQuestion(q);
              } else {
                if (lastRowVisibleIndex < 0) lastRowVisibleIndex = i;
                result[lastRowVisibleIndex].addQuestion(q);
              }
            }
            for (var i = 0; i < result.length; i++) {
              result[i].setWidth();
            }
            return result;
          };
          PageModel.prototype.onRowVisibilityChanged = function (row) {
            if (!this.isActive || !this.rowValues) return;
            var index = this.rowValues.indexOf(row);
            for (var i = index; i >= 0; i--) {
              if (this.rowValues[i].questions.indexOf(row.question) > -1) {
                this.rowValues[i].updateVisible();
                break;
              }
            }
          };
          Object.defineProperty(PageModel.prototype, "processedTitle", {
            get: function get() {
              return this.data != null ? this.data.processText(this.title) : this.title;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(PageModel.prototype, "num", {
            get: function get() {
              return this.numValue;
            },
            set: function set(value) {
              if (this.numValue == value) return;
              this.numValue = value;
              this.onNumChanged(value);
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(PageModel.prototype, "visible", {
            get: function get() {
              return this.visibleValue;
            },
            set: function set(value) {
              if (value === this.visible) return;
              this.visibleValue = value;
              if (this.data != null) {
                this.data.pageVisibilityChanged(this, this.visible);
              }
            },
            enumerable: true,
            configurable: true
          });
          PageModel.prototype.getType = function () {
            return "page";
          };
          Object.defineProperty(PageModel.prototype, "isVisible", {
            get: function get() {
              return this.getIsPageVisible(null);
            },
            enumerable: true,
            configurable: true
          });
          PageModel.prototype.getIsPageVisible = function (exceptionQuestion) {
            if (!this.visible) return false;
            for (var i = 0; i < this.questions.length; i++) {
              if (this.questions[i] == exceptionQuestion) continue;
              if (this.questions[i].visible) return true;
            }
            return false;
          };
          PageModel.prototype.addQuestion = function (question, index) {
            if (index === void 0) {
              index = -1;
            }
            if (question == null) return;
            if (index < 0 || index >= this.questions.length) {
              this.questions.push(question);
            } else {
              this.questions.splice(index, 0, question);
            }
            if (this.data != null) {
              question.setData(this.data);
              this.data.questionAdded(question, index);
            }
          };
          PageModel.prototype.addNewQuestion = function (questionType, name) {
            var question = _questionfactory.QuestionFactory.Instance.createQuestion(questionType, name);
            this.addQuestion(question);
            return question;
          };
          PageModel.prototype.removeQuestion = function (question) {
            var index = this.questions.indexOf(question);
            if (index < 0) return;
            this.questions.splice(index, 1);
            if (this.data != null) this.data.questionRemoved(question);
          };
          PageModel.prototype.focusFirstQuestion = function () {
            for (var i = 0; i < this.questions.length; i++) {
              var question = this.questions[i];
              if (!question.visible || !question.hasInput) continue;
              this.questions[i].focus();
              break;
            }
          };
          PageModel.prototype.focusFirstErrorQuestion = function () {
            for (var i = 0; i < this.questions.length; i++) {
              if (!this.questions[i].visible || this.questions[i].currentErrorCount == 0) continue;
              this.questions[i].focus(true);
              break;
            }
          };
          PageModel.prototype.scrollToTop = function () {
            _base.SurveyElement.ScrollElementToTop(_base.SurveyPageId);
          };
          PageModel.prototype.hasErrors = function (fireCallback, focuseOnFirstError) {
            if (fireCallback === void 0) {
              fireCallback = true;
            }
            if (focuseOnFirstError === void 0) {
              focuseOnFirstError = false;
            }
            var result = false;
            var firstErrorQuestion = null;
            for (var i = 0; i < this.questions.length; i++) {
              if (this.questions[i].visible && this.questions[i].hasErrors(fireCallback)) {
                if (focuseOnFirstError && firstErrorQuestion == null) {
                  firstErrorQuestion = this.questions[i];
                }
                result = true;
              }
            }
            if (firstErrorQuestion) firstErrorQuestion.focus(true);
            return result;
          };
          PageModel.prototype.addQuestionsToList = function (list, visibleOnly) {
            if (visibleOnly === void 0) {
              visibleOnly = false;
            }
            if (visibleOnly && !this.visible) return;
            for (var i = 0; i < this.questions.length; i++) {
              if (visibleOnly && !this.questions[i].visible) continue;
              list.push(this.questions[i]);
            }
          };
          PageModel.prototype.runCondition = function (values) {
            if (!this.visibleIf) return;
            if (!this.conditionRunner) this.conditionRunner = new _conditions.ConditionRunner(this.visibleIf);
            this.conditionRunner.expression = this.visibleIf;
            this.visible = this.conditionRunner.run(values);
          };
          PageModel.prototype.onNumChanged = function (value) {};
          PageModel.pageCounter = 100;
          return PageModel;
        }(_base.Base);
        _jsonobject.JsonObject.metaData.addClass("page", ["name", { name: "questions", baseClassName: "question" }, { name: "visible:boolean", default: true }, "visibleIf", "title"], function () {
          return new PageModel();
        });
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 23 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.QuestionCheckboxModel = undefined;

        var _jsonobject = __webpack_require__(8);

        var _questionfactory = __webpack_require__(17);

        var _question_baseselect = __webpack_require__(16);

        var QuestionCheckboxModel = exports.QuestionCheckboxModel = function (_super) {
          __extends(QuestionCheckboxModel, _super);
          function QuestionCheckboxModel(name) {
            _super.call(this, name);
            this.name = name;
          }
          QuestionCheckboxModel.prototype.getHasOther = function (val) {
            if (!val) return false;
            return val.indexOf(this.otherItem.value) >= 0;
          };
          QuestionCheckboxModel.prototype.valueFromDataCore = function (val) {
            if (!val || !val.length) return val;
            for (var i = 0; i < val.length; i++) {
              if (val[i] == this.otherItem.value) return val;
              if (this.hasUnknownValue(val[i])) {
                this.comment = val[i];
                var newVal = val.slice();
                newVal[i] = this.otherItem.value;
                return newVal;
              }
            }
            return val;
          };
          QuestionCheckboxModel.prototype.valueToDataCore = function (val) {
            if (!val || !val.length) return val;
            for (var i = 0; i < val.length; i++) {
              if (val[i] == this.otherItem.value) {
                if (this.getComment()) {
                  var newVal = val.slice();
                  newVal[i] = this.getComment();
                  return newVal;
                }
              }
            }
            return val;
          };
          QuestionCheckboxModel.prototype.getType = function () {
            return "checkbox";
          };
          return QuestionCheckboxModel;
        }(_question_baseselect.QuestionCheckboxBase);
        _jsonobject.JsonObject.metaData.addClass("checkbox", [], function () {
          return new QuestionCheckboxModel("");
        }, "checkboxbase");
        _questionfactory.QuestionFactory.Instance.registerQuestion("checkbox", function (name) {
          var q = new QuestionCheckboxModel(name);q.choices = _questionfactory.QuestionFactory.DefaultChoices;return q;
        });
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 24 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.QuestionCommentModel = undefined;

        var _question = __webpack_require__(13);

        var _jsonobject = __webpack_require__(8);

        var _questionfactory = __webpack_require__(17);

        var QuestionCommentModel = exports.QuestionCommentModel = function (_super) {
          __extends(QuestionCommentModel, _super);
          function QuestionCommentModel(name) {
            _super.call(this, name);
            this.name = name;
            this.rows = 4;
            this.cols = 50;
          }
          QuestionCommentModel.prototype.getType = function () {
            return "comment";
          };
          QuestionCommentModel.prototype.isEmpty = function () {
            return _super.prototype.isEmpty.call(this) || this.value == "";
          };
          return QuestionCommentModel;
        }(_question.Question);
        _jsonobject.JsonObject.metaData.addClass("comment", [{ name: "cols:number", default: 50 }, { name: "rows:number", default: 4 }], function () {
          return new QuestionCommentModel("");
        }, "question");
        _questionfactory.QuestionFactory.Instance.registerQuestion("comment", function (name) {
          return new QuestionCommentModel(name);
        });
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 25 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.QuestionDropdownModel = undefined;

        var _jsonobject = __webpack_require__(8);

        var _questionfactory = __webpack_require__(17);

        var _question_baseselect = __webpack_require__(16);

        var _surveyStrings = __webpack_require__(7);

        var QuestionDropdownModel = exports.QuestionDropdownModel = function (_super) {
          __extends(QuestionDropdownModel, _super);
          function QuestionDropdownModel(name) {
            _super.call(this, name);
            this.name = name;
          }
          Object.defineProperty(QuestionDropdownModel.prototype, "optionsCaption", {
            get: function get() {
              return this.optionsCaptionValue ? this.optionsCaptionValue : _surveyStrings.surveyLocalization.getString("optionsCaption");
            },
            set: function set(newValue) {
              this.optionsCaptionValue = newValue;
            },
            enumerable: true,
            configurable: true
          });
          QuestionDropdownModel.prototype.getType = function () {
            return "dropdown";
          };
          QuestionDropdownModel.prototype.supportGoNextPageAutomatic = function () {
            return true;
          };
          return QuestionDropdownModel;
        }(_question_baseselect.QuestionSelectBase);
        _jsonobject.JsonObject.metaData.addClass("dropdown", [{ name: "optionsCaption", onGetValue: function onGetValue(obj) {
          return obj.optionsCaptionValue;
        } }], function () {
          return new QuestionDropdownModel("");
        }, "selectbase");
        _questionfactory.QuestionFactory.Instance.registerQuestion("dropdown", function (name) {
          var q = new QuestionDropdownModel(name);q.choices = _questionfactory.QuestionFactory.DefaultChoices;return q;
        });
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 26 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.QuestionFileModel = undefined;

        var _question = __webpack_require__(13);

        var _jsonobject = __webpack_require__(8);

        var _questionfactory = __webpack_require__(17);

        var _error = __webpack_require__(6);

        var _surveyStrings = __webpack_require__(7);

        var QuestionFileModel = exports.QuestionFileModel = function (_super) {
          __extends(QuestionFileModel, _super);
          function QuestionFileModel(name) {
            _super.call(this, name);
            this.name = name;
            this.showPreviewValue = false;
            this.isUploading = false;
          }
          QuestionFileModel.prototype.getType = function () {
            return "file";
          };
          Object.defineProperty(QuestionFileModel.prototype, "showPreview", {
            get: function get() {
              return this.showPreviewValue;
            },
            set: function set(value) {
              this.showPreviewValue = value;
            },
            enumerable: true,
            configurable: true
          });
          QuestionFileModel.prototype.loadFile = function (file) {
            var self = this;
            if (this.survey && !this.survey.uploadFile(this.name, file, this.storeDataAsText, function (status) {
                self.isUploading = status == "uploading";
              })) return;
            this.setFileValue(file);
          };
          QuestionFileModel.prototype.setFileValue = function (file) {
            if (!FileReader) return;
            if (!this.showPreview && !this.storeDataAsText) return;
            if (this.checkFileForErrors(file)) return;
            var fileReader = new FileReader();
            var self = this;
            fileReader.onload = function (e) {
              if (self.showPreview) {
                self.previewValue = self.isFileImage(file) ? fileReader.result : null;
                self.fireCallback(self.previewValueLoadedCallback);
              }
              if (self.storeDataAsText) {
                self.value = fileReader.result;
              }
            };
            fileReader.readAsDataURL(file);
          };
          QuestionFileModel.prototype.onCheckForErrors = function (errors) {
            _super.prototype.onCheckForErrors.call(this, errors);
            if (this.isUploading) {
              this.errors.push(new _error.CustomError(_surveyStrings.surveyLocalization.getString("uploadingFile")));
            }
          };
          QuestionFileModel.prototype.checkFileForErrors = function (file) {
            var errorLength = this.errors ? this.errors.length : 0;
            this.errors = [];
            if (this.maxSize > 0 && file.size > this.maxSize) {
              this.errors.push(new _error.ExceedSizeError(this.maxSize));
            }
            if (errorLength != this.errors.length || this.errors.length > 0) {
              this.fireCallback(this.errorsChangedCallback);
            }
            return this.errors.length > 0;
          };
          QuestionFileModel.prototype.isFileImage = function (file) {
            if (!file || !file.type) return;
            var str = file.type.toLowerCase();
            return str.indexOf("image") == 0;
          };
          return QuestionFileModel;
        }(_question.Question);
        _jsonobject.JsonObject.metaData.addClass("file", ["showPreview:boolean", "imageHeight", "imageWidth", "storeDataAsText:boolean", "maxSize:number"], function () {
          return new QuestionFileModel("");
        }, "question");
        _questionfactory.QuestionFactory.Instance.registerQuestion("file", function (name) {
          return new QuestionFileModel(name);
        });
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 27 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.QuestionHtmlModel = undefined;

        var _questionbase = __webpack_require__(14);

        var _jsonobject = __webpack_require__(8);

        var _questionfactory = __webpack_require__(17);

        var QuestionHtmlModel = exports.QuestionHtmlModel = function (_super) {
          __extends(QuestionHtmlModel, _super);
          function QuestionHtmlModel(name) {
            _super.call(this, name);
            this.name = name;
          }
          QuestionHtmlModel.prototype.getType = function () {
            return "html";
          };
          Object.defineProperty(QuestionHtmlModel.prototype, "html", {
            get: function get() {
              return this.htmlValue;
            },
            set: function set(value) {
              this.htmlValue = value;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(QuestionHtmlModel.prototype, "processedHtml", {
            get: function get() {
              return this.survey ? this.survey.processHtml(this.html) : this.html;
            },
            enumerable: true,
            configurable: true
          });
          return QuestionHtmlModel;
        }(_questionbase.QuestionBase);
        _jsonobject.JsonObject.metaData.addClass("html", ["html:html"], function () {
          return new QuestionHtmlModel("");
        }, "questionbase");
        _questionfactory.QuestionFactory.Instance.registerQuestion("html", function (name) {
          return new QuestionHtmlModel(name);
        });
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 28 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.QuestionRadiogroupModel = undefined;

        var _jsonobject = __webpack_require__(8);

        var _questionfactory = __webpack_require__(17);

        var _question_baseselect = __webpack_require__(16);

        var QuestionRadiogroupModel = exports.QuestionRadiogroupModel = function (_super) {
          __extends(QuestionRadiogroupModel, _super);
          function QuestionRadiogroupModel(name) {
            _super.call(this, name);
            this.name = name;
          }
          QuestionRadiogroupModel.prototype.getType = function () {
            return "radiogroup";
          };
          QuestionRadiogroupModel.prototype.supportGoNextPageAutomatic = function () {
            return true;
          };
          return QuestionRadiogroupModel;
        }(_question_baseselect.QuestionCheckboxBase);
        _jsonobject.JsonObject.metaData.addClass("radiogroup", [], function () {
          return new QuestionRadiogroupModel("");
        }, "checkboxbase");
        _questionfactory.QuestionFactory.Instance.registerQuestion("radiogroup", function (name) {
          var q = new QuestionRadiogroupModel(name);q.choices = _questionfactory.QuestionFactory.DefaultChoices;return q;
        });
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 29 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.QuestionRatingModel = undefined;

        var _base = __webpack_require__(5);

        var _question = __webpack_require__(13);

        var _jsonobject = __webpack_require__(8);

        var _questionfactory = __webpack_require__(17);

        var QuestionRatingModel = exports.QuestionRatingModel = function (_super) {
          __extends(QuestionRatingModel, _super);
          function QuestionRatingModel(name) {
            _super.call(this, name);
            this.name = name;
            this.rates = [];
            this.mininumRateDescription = null;
            this.maximumRateDescription = null;
          }
          Object.defineProperty(QuestionRatingModel.prototype, "rateValues", {
            get: function get() {
              return this.rates;
            },
            set: function set(newValue) {
              _base.ItemValue.setData(this.rates, newValue);
              this.fireCallback(this.rateValuesChangedCallback);
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(QuestionRatingModel.prototype, "visibleRateValues", {
            get: function get() {
              if (this.rateValues.length > 0) return this.rateValues;
              return QuestionRatingModel.defaultRateValues;
            },
            enumerable: true,
            configurable: true
          });
          QuestionRatingModel.prototype.getType = function () {
            return "rating";
          };
          QuestionRatingModel.prototype.supportComment = function () {
            return true;
          };
          QuestionRatingModel.prototype.supportOther = function () {
            return true;
          };
          QuestionRatingModel.prototype.supportGoNextPageAutomatic = function () {
            return true;
          };
          QuestionRatingModel.defaultRateValues = [];
          return QuestionRatingModel;
        }(_question.Question);
        _base.ItemValue.setData(QuestionRatingModel.defaultRateValues, [1, 2, 3, 4, 5]);
        _jsonobject.JsonObject.metaData.addClass("rating", ["hasComment:boolean", { name: "rateValues:itemvalues", onGetValue: function onGetValue(obj) {
          return _base.ItemValue.getData(obj.rateValues);
        }, onSetValue: function onSetValue(obj, value) {
          obj.rateValues = value;
        } }, "mininumRateDescription", "maximumRateDescription"], function () {
          return new QuestionRatingModel("");
        }, "question");
        _questionfactory.QuestionFactory.Instance.registerQuestion("rating", function (name) {
          return new QuestionRatingModel(name);
        });
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 30 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.QuestionTextModel = undefined;

        var _questionfactory = __webpack_require__(17);

        var _jsonobject = __webpack_require__(8);

        var _question = __webpack_require__(13);

        var QuestionTextModel = exports.QuestionTextModel = function (_super) {
          __extends(QuestionTextModel, _super);
          function QuestionTextModel(name) {
            _super.call(this, name);
            this.name = name;
            this.size = 25;
            this.inputType = "text";
          }
          QuestionTextModel.prototype.getType = function () {
            return "text";
          };
          QuestionTextModel.prototype.isEmpty = function () {
            return _super.prototype.isEmpty.call(this) || this.value == "";
          };
          QuestionTextModel.prototype.supportGoNextPageAutomatic = function () {
            return true;
          };
          QuestionTextModel.prototype.setNewValue = function (newValue) {
            newValue = this.correctValueType(newValue);
            _super.prototype.setNewValue.call(this, newValue);
          };
          QuestionTextModel.prototype.correctValueType = function (newValue) {
            if (!newValue) return newValue;
            if (this.inputType == "number" || this.inputType == "range") {
              return this.isNumber(newValue) ? parseFloat(newValue) : "";
            }
            return newValue;
          };
          QuestionTextModel.prototype.isNumber = function (value) {
            return !isNaN(parseFloat(value)) && isFinite(value);
          };
          return QuestionTextModel;
        }(_question.Question);
        _jsonobject.JsonObject.metaData.addClass("text", [{ name: "inputType", default: "text", choices: ["color", "date", "datetime", "datetime-local", "email", "month", "number", "password", "range", "tel", "text", "time", "url", "week"] }, { name: "size:number", default: 25 }], function () {
          return new QuestionTextModel("");
        }, "question");
        _questionfactory.QuestionFactory.Instance.registerQuestion("text", function (name) {
          return new QuestionTextModel(name);
        });
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 31 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SurveyModel = undefined;

        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

        var _jsonobject = __webpack_require__(8);

        var _base = __webpack_require__(5);

        var _page = __webpack_require__(22);

        var _textPreProcessor = __webpack_require__(15);

        var _dxSurveyService = __webpack_require__(32);

        var _surveyStrings = __webpack_require__(7);

        var _error = __webpack_require__(6);

        var SurveyModel = exports.SurveyModel = function (_super) {
          __extends(SurveyModel, _super);
          function SurveyModel(jsonObj) {
            if (jsonObj === void 0) {
              jsonObj = null;
            }
            _super.call(this);
            this.surveyId = null;
            this.surveyPostId = null;
            this.clientId = null;
            this.cookieName = null;
            this.sendResultOnPageNext = false;
            this.commentPrefix = "-Comment";
            this.title = "";
            this.showNavigationButtons = true;
            this.showTitle = true;
            this.showPageTitles = true;
            this.completedHtml = "";
            this.requiredText = "*";
            this.questionStartIndex = "";
            this.questionTitleTemplate = "";
            this.showProgressBar = "off";
            this.storeOthersAsComment = true;
            this.goNextPageAutomatic = false;
            this.pages = new Array();
            this.triggers = new Array();
            this.clearInvisibleValues = false;
            this.currentPageValue = null;
            this.valuesHash = {};
            this.variablesHash = {};
            this.showPageNumbersValue = false;
            this.showQuestionNumbersValue = "on";
            this.questionTitleLocationValue = "top";
            this.localeValue = "";
            this.isCompleted = false;
            this.isLoading = false;
            this.processedTextValues = {};
            this.isValidatingOnServerValue = false;
            this.onComplete = new _base.Event();
            this.onCurrentPageChanged = new _base.Event();
            this.onValueChanged = new _base.Event();
            this.onVisibleChanged = new _base.Event();
            this.onPageVisibleChanged = new _base.Event();
            this.onQuestionAdded = new _base.Event();
            this.onQuestionRemoved = new _base.Event();
            this.onValidateQuestion = new _base.Event();
            this.onProcessHtml = new _base.Event();
            this.onSendResult = new _base.Event();
            this.onGetResult = new _base.Event();
            this.onUploadFile = new _base.Event();
            this.jsonErrors = null;
            this.mode = "normal";
            var self = this;
            this.textPreProcessor = new _textPreProcessor.TextPreProcessor();
            this.textPreProcessor.onHasValue = function (name) {
              return self.processedTextValues[name.toLowerCase()];
            };
            this.textPreProcessor.onProcess = function (name) {
              return self.getProcessedTextValue(name);
            };
            this.pages.push = function (value) {
              value.data = self;
              return Array.prototype.push.call(this, value);
            };
            this.triggers.push = function (value) {
              value.setOwner(self);
              return Array.prototype.push.call(this, value);
            };
            this.updateProcessedTextValues();
            this.onBeforeCreating();
            if (jsonObj) {
              this.setJsonObject(jsonObj);
              if (this.surveyId) {
                this.loadSurveyFromService(this.surveyId);
              }
            }
            this.onCreating();
          }
          SurveyModel.prototype.getType = function () {
            return "survey";
          };
          Object.defineProperty(SurveyModel.prototype, "locale", {
            get: function get() {
              return this.localeValue;
            },
            set: function set(value) {
              this.localeValue = value;
              _surveyStrings.surveyLocalization.currentLocale = value;
            },
            enumerable: true,
            configurable: true
          });
          SurveyModel.prototype.getLocString = function (str) {
            return _surveyStrings.surveyLocalization.getString(str);
          };
          Object.defineProperty(SurveyModel.prototype, "emptySurveyText", {
            get: function get() {
              return this.getLocString("emptySurvey");
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(SurveyModel.prototype, "pagePrevText", {
            get: function get() {
              return this.pagePrevTextValue ? this.pagePrevTextValue : this.getLocString("pagePrevText");
            },
            set: function set(newValue) {
              this.pagePrevTextValue = newValue;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(SurveyModel.prototype, "pageNextText", {
            get: function get() {
              return this.pageNextTextValue ? this.pageNextTextValue : this.getLocString("pageNextText");
            },
            set: function set(newValue) {
              this.pageNextTextValue = newValue;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(SurveyModel.prototype, "completeText", {
            get: function get() {
              return this.completeTextValue ? this.completeTextValue : this.getLocString("completeText");
            },
            set: function set(newValue) {
              this.completeTextValue = newValue;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(SurveyModel.prototype, "showPageNumbers", {
            get: function get() {
              return this.showPageNumbersValue;
            },
            set: function set(value) {
              if (value === this.showPageNumbers) return;
              this.showPageNumbersValue = value;
              this.updateVisibleIndexes();
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(SurveyModel.prototype, "showQuestionNumbers", {
            get: function get() {
              return this.showQuestionNumbersValue;
            },
            set: function set(value) {
              if (value === this.showQuestionNumbers) return;
              this.showQuestionNumbersValue = value;
              this.updateVisibleIndexes();
            },
            enumerable: true,
            configurable: true
          });
          ;
          ;
          Object.defineProperty(SurveyModel.prototype, "questionTitleLocation", {
            get: function get() {
              return this.questionTitleLocationValue;
            },
            set: function set(value) {
              if (value === this.questionTitleLocationValue) return;
              this.questionTitleLocationValue = value;
            },
            enumerable: true,
            configurable: true
          });
          ;
          ;
          Object.defineProperty(SurveyModel.prototype, "data", {
            get: function get() {
              var result = {};
              for (var key in this.valuesHash) {
                result[key] = this.valuesHash[key];
              }
              return result;
            },
            set: function set(data) {
              this.valuesHash = {};
              if (data) {
                for (var key in data) {
                  this.valuesHash[key] = data[key];
                  this.checkTriggers(key, data[key], false);
                }
              }
              this.notifyAllQuestionsOnValueChanged();
              this.runConditions();
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(SurveyModel.prototype, "comments", {
            get: function get() {
              var result = {};
              for (var key in this.valuesHash) {
                if (key.indexOf(this.commentPrefix) > 0) {
                  result[key] = this.valuesHash[key];
                }
              }
              return result;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(SurveyModel.prototype, "visiblePages", {
            get: function get() {
              if (this.isDesignMode) return this.pages;
              var result = new Array();
              for (var i = 0; i < this.pages.length; i++) {
                if (this.pages[i].isVisible) {
                  result.push(this.pages[i]);
                }
              }
              return result;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(SurveyModel.prototype, "isEmpty", {
            get: function get() {
              return this.pages.length == 0;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(SurveyModel.prototype, "PageCount", {
            get: function get() {
              return this.pages.length;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(SurveyModel.prototype, "visiblePageCount", {
            get: function get() {
              return this.visiblePages.length;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(SurveyModel.prototype, "currentPage", {
            get: function get() {
              var vPages = this.visiblePages;
              if (this.currentPageValue != null) {
                if (vPages.indexOf(this.currentPageValue) < 0) {
                  this.currentPage = null;
                }
              }
              if (this.currentPageValue == null && vPages.length > 0) {
                this.currentPage = vPages[0];
              }
              return this.currentPageValue;
            },
            set: function set(value) {
              var vPages = this.visiblePages;
              if (value != null && vPages.indexOf(value) < 0) return;
              if (value == this.currentPageValue) return;
              var oldValue = this.currentPageValue;
              this.currentPageValue = value;
              this.currentPageChanged(value, oldValue);
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(SurveyModel.prototype, "currentPageNo", {
            get: function get() {
              return this.visiblePages.indexOf(this.currentPage);
            },
            set: function set(value) {
              var vPages = this.visiblePages;
              if (value < 0 || value >= this.visiblePages.length) return;
              this.currentPage = this.visiblePages[value];
            },
            enumerable: true,
            configurable: true
          });
          SurveyModel.prototype.focusFirstQuestion = function () {
            if (this.currentPageValue) {
              this.currentPageValue.scrollToTop();
              this.currentPageValue.focusFirstQuestion();
            }
          };
          Object.defineProperty(SurveyModel.prototype, "state", {
            get: function get() {
              if (this.isLoading) return "loading";
              if (this.isCompleted) return "completed";
              return this.currentPage ? "running" : "empty";
            },
            enumerable: true,
            configurable: true
          });
          SurveyModel.prototype.clear = function () {
            this.data = null;
            this.variablesHash = {};
            this.isCompleted = false;
            if (this.visiblePageCount > 0) {
              this.currentPage = this.visiblePages[0];
            }
          };
          SurveyModel.prototype.mergeValues = function (src, dest) {
            if (!dest || !src) return;
            for (var key in src) {
              var value = src[key];
              if (value && (typeof value === "undefined" ? "undefined" : _typeof(value)) === 'object') {
                if (!dest[key]) dest[key] = {};
                this.mergeValues(value, dest[key]);
              } else {
                dest[key] = value;
              }
            }
          };
          SurveyModel.prototype.currentPageChanged = function (newValue, oldValue) {
            this.onCurrentPageChanged.fire(this, { 'oldCurrentPage': oldValue, 'newCurrentPage': newValue });
          };
          SurveyModel.prototype.getProgress = function () {
            if (this.currentPage == null) return 0;
            var index = this.visiblePages.indexOf(this.currentPage) + 1;
            return Math.ceil(index * 100 / this.visiblePageCount);
          };
          Object.defineProperty(SurveyModel.prototype, "isDesignMode", {
            get: function get() {
              return this.mode == "designer";
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(SurveyModel.prototype, "hasCookie", {
            get: function get() {
              if (!this.cookieName) return false;
              var cookies = document.cookie;
              return cookies && cookies.indexOf(this.cookieName + "=true") > -1;
            },
            enumerable: true,
            configurable: true
          });
          SurveyModel.prototype.setCookie = function () {
            if (!this.cookieName) return;
            document.cookie = this.cookieName + "=true; expires=Fri, 31 Dec 9999 0:0:0 GMT";
          };
          SurveyModel.prototype.deleteCookie = function () {
            if (!this.cookieName) return;
            document.cookie = this.cookieName + "=;";
          };
          SurveyModel.prototype.nextPage = function () {
            if (this.isLastPage) return false;
            if (this.isCurrentPageHasErrors) return false;
            if (this.doServerValidation()) return false;
            this.doNextPage();
            return true;
          };
          Object.defineProperty(SurveyModel.prototype, "isCurrentPageHasErrors", {
            get: function get() {
              if (this.currentPage == null) return true;
              return this.currentPage.hasErrors(true, true);
            },
            enumerable: true,
            configurable: true
          });
          SurveyModel.prototype.prevPage = function () {
            if (this.isFirstPage) return false;
            var vPages = this.visiblePages;
            var index = vPages.indexOf(this.currentPage);
            this.currentPage = vPages[index - 1];
          };
          SurveyModel.prototype.completeLastPage = function () {
            if (this.isCurrentPageHasErrors) return false;
            if (this.doServerValidation()) return false;
            this.doComplete();
            return true;
          };
          Object.defineProperty(SurveyModel.prototype, "isFirstPage", {
            get: function get() {
              if (this.currentPage == null) return true;
              return this.visiblePages.indexOf(this.currentPage) == 0;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(SurveyModel.prototype, "isLastPage", {
            get: function get() {
              if (this.currentPage == null) return true;
              var vPages = this.visiblePages;
              return vPages.indexOf(this.currentPage) == vPages.length - 1;
            },
            enumerable: true,
            configurable: true
          });
          SurveyModel.prototype.doComplete = function () {
            if (this.clearInvisibleValues) {
              this.clearInvisibleQuestionValues();
            }
            this.setCookie();
            this.setCompleted();
            this.onComplete.fire(this, null);
            if (this.surveyPostId) {
              this.sendResult();
            }
          };
          Object.defineProperty(SurveyModel.prototype, "isValidatingOnServer", {
            get: function get() {
              return this.isValidatingOnServerValue;
            },
            enumerable: true,
            configurable: true
          });
          SurveyModel.prototype.setIsValidatingOnServer = function (val) {
            if (val == this.isValidatingOnServer) return;
            this.isValidatingOnServerValue = val;
            this.onIsValidatingOnServerChanged();
          };
          SurveyModel.prototype.onIsValidatingOnServerChanged = function () {};
          SurveyModel.prototype.doServerValidation = function () {
            if (!this.onServerValidateQuestions) return false;
            var self = this;
            var options = { data: {}, errors: {}, survey: this, complete: function complete() {
              self.completeServerValidation(options);
            } };
            for (var i = 0; i < this.currentPage.questions.length; i++) {
              var question = this.currentPage.questions[i];
              if (!question.visible) continue;
              var value = this.getValue(question.name);
              if (value) options.data[question.name] = value;
            }
            this.setIsValidatingOnServer(true);
            this.onServerValidateQuestions(this, options);
            return true;
          };
          SurveyModel.prototype.completeServerValidation = function (options) {
            this.setIsValidatingOnServer(false);
            if (!options && !options.survey) return;
            var self = options.survey;
            var hasErrors = false;
            if (options.errors) {
              for (var name in options.errors) {
                var question = self.getQuestionByName(name);
                if (question && question["errors"]) {
                  hasErrors = true;
                  question["addError"](new _error.CustomError(options.errors[name]));
                }
              }
            }
            if (!hasErrors) {
              if (self.isLastPage) self.doComplete();else self.doNextPage();
            }
          };
          SurveyModel.prototype.doNextPage = function () {
            this.checkOnPageTriggers();
            if (this.sendResultOnPageNext && this.clientId) {
              this.sendResult(this.surveyPostId, this.clientId, true);
            }
            var vPages = this.visiblePages;
            var index = vPages.indexOf(this.currentPage);
            this.currentPage = vPages[index + 1];
          };
          SurveyModel.prototype.setCompleted = function () {
            this.isCompleted = true;
          };
          Object.defineProperty(SurveyModel.prototype, "processedCompletedHtml", {
            get: function get() {
              if (this.completedHtml) {
                return this.processHtml(this.completedHtml);
              }
              return "<h3>" + this.getLocString("completingSurvey") + "</h3>";
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(SurveyModel.prototype, "processedLoadingHtml", {
            get: function get() {
              return "<h3>" + this.getLocString("loadingSurvey") + "</h3>";
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(SurveyModel.prototype, "progressText", {
            get: function get() {
              if (this.currentPage == null) return "";
              var vPages = this.visiblePages;
              var index = vPages.indexOf(this.currentPage) + 1;
              return this.getLocString("progressText")["format"](index, vPages.length);
            },
            enumerable: true,
            configurable: true
          });
          SurveyModel.prototype.uploadFile = function (name, file, storeDataAsText, uploadingCallback) {
            var accept = true;
            this.onUploadFile.fire(this, { name: name, file: file, accept: accept });
            if (!accept) return false;
            if (!storeDataAsText && this.surveyPostId) {
              this.uploadFileCore(name, file, uploadingCallback);
            }
            return true;
          };
          SurveyModel.prototype.uploadFileCore = function (name, file, uploadingCallback) {
            var self = this;
            if (uploadingCallback) uploadingCallback("uploading");
            new _dxSurveyService.dxSurveyService().sendFile(this.surveyPostId, file, function (success, response) {
              if (uploadingCallback) uploadingCallback(success ? "success" : "error");
              if (success) {
                self.setValue(name, response);
              }
            });
          };
          SurveyModel.prototype.getPage = function (index) {
            return this.pages[index];
          };
          SurveyModel.prototype.addPage = function (page) {
            if (page == null) return;
            this.pages.push(page);
            this.updateVisibleIndexes();
          };
          SurveyModel.prototype.addNewPage = function (name) {
            var page = this.createNewPage(name);
            this.addPage(page);
            return page;
          };
          SurveyModel.prototype.removePage = function (page) {
            var index = this.pages.indexOf(page);
            if (index < 0) return;
            this.pages.splice(index, 1);
            if (this.currentPageValue == page) {
              this.currentPage = this.pages.length > 0 ? this.pages[0] : null;
            }
            this.updateVisibleIndexes();
          };
          SurveyModel.prototype.getQuestionByName = function (name, caseInsensitive) {
            if (caseInsensitive === void 0) {
              caseInsensitive = false;
            }
            var questions = this.getAllQuestions();
            if (caseInsensitive) name = name.toLowerCase();
            for (var i = 0; i < questions.length; i++) {
              var questionName = questions[i].name;
              if (caseInsensitive) questionName = questionName.toLowerCase();
              if (questionName == name) return questions[i];
            }
            return null;
          };
          SurveyModel.prototype.getQuestionsByNames = function (names, caseInsensitive) {
            if (caseInsensitive === void 0) {
              caseInsensitive = false;
            }
            var result = [];
            if (!names) return result;
            for (var i = 0; i < names.length; i++) {
              if (!names[i]) continue;
              var question = this.getQuestionByName(names[i], caseInsensitive);
              if (question) result.push(question);
            }
            return result;
          };
          SurveyModel.prototype.getPageByQuestion = function (question) {
            for (var i = 0; i < this.pages.length; i++) {
              var page = this.pages[i];
              if (page.questions.indexOf(question) > -1) return page;
            }
            return null;
          };
          SurveyModel.prototype.getPageByName = function (name) {
            for (var i = 0; i < this.pages.length; i++) {
              if (this.pages[i].name == name) return this.pages[i];
            }
            return null;
          };
          SurveyModel.prototype.getPagesByNames = function (names) {
            var result = [];
            if (!names) return result;
            for (var i = 0; i < names.length; i++) {
              if (!names[i]) continue;
              var page = this.getPageByName(names[i]);
              if (page) result.push(page);
            }
            return result;
          };
          SurveyModel.prototype.getAllQuestions = function (visibleOnly) {
            if (visibleOnly === void 0) {
              visibleOnly = false;
            }
            var result = new Array();
            for (var i = 0; i < this.pages.length; i++) {
              this.pages[i].addQuestionsToList(result, visibleOnly);
            }
            return result;
          };
          SurveyModel.prototype.createNewPage = function (name) {
            return new _page.PageModel(name);
          };
          SurveyModel.prototype.notifyQuestionOnValueChanged = function (name, newValue) {
            var questions = this.getAllQuestions();
            var question = null;
            for (var i = 0; i < questions.length; i++) {
              if (questions[i].name != name) continue;
              question = questions[i];
              this.doSurveyValueChanged(question, newValue);
            }
            this.onValueChanged.fire(this, { 'name': name, 'question': question, 'value': newValue });
          };
          SurveyModel.prototype.notifyAllQuestionsOnValueChanged = function () {
            var questions = this.getAllQuestions();
            for (var i = 0; i < questions.length; i++) {
              this.doSurveyValueChanged(questions[i], this.getValue(questions[i].name));
            }
          };
          SurveyModel.prototype.doSurveyValueChanged = function (question, newValue) {
            question.onSurveyValueChanged(newValue);
          };
          SurveyModel.prototype.checkOnPageTriggers = function () {
            var questions = this.getCurrentPageQuestions();
            for (var i = 0; i < questions.length; i++) {
              var question = questions[i];
              var value = this.getValue(question.name);
              this.checkTriggers(question.name, value, true);
            }
          };
          SurveyModel.prototype.getCurrentPageQuestions = function () {
            var result = [];
            var page = this.currentPage;
            if (!page) return result;
            for (var i = 0; i < page.questions.length; i++) {
              var question = page.questions[i];
              if (!question.visible || !question.name) continue;
              result.push(question);
            }
            return result;
          };
          SurveyModel.prototype.checkTriggers = function (name, newValue, isOnNextPage) {
            for (var i = 0; i < this.triggers.length; i++) {
              var trigger = this.triggers[i];
              if (trigger.name == name && trigger.isOnNextPage == isOnNextPage) {
                trigger.check(newValue);
              }
            }
          };
          SurveyModel.prototype.doQuestionsOnLoad = function () {
            var questions = this.getAllQuestions(false);
            for (var i = 0; i < questions.length; i++) {
              questions[i].onSurveyLoad();
            }
          };
          SurveyModel.prototype.runConditions = function () {
            this.runConditionsForList(this.getAllQuestions(false));
            this.runConditionsForList(this.pages);
          };
          SurveyModel.prototype.runConditionsForList = function (list) {
            for (var i = 0; i < list.length; i++) {
              list[i].runCondition(this.valuesHash);
            }
          };
          SurveyModel.prototype.sendResult = function (postId, clientId, isPartialCompleted) {
            if (postId === void 0) {
              postId = null;
            }
            if (clientId === void 0) {
              clientId = null;
            }
            if (isPartialCompleted === void 0) {
              isPartialCompleted = false;
            }
            if (!postId && this.surveyPostId) {
              postId = this.surveyPostId;
            }
            if (!postId) return;
            if (clientId) {
              this.clientId = clientId;
            }
            var self = this;
            new _dxSurveyService.dxSurveyService().sendResult(postId, this.data, function (success, response) {
              self.onSendResult.fire(self, { success: success, response: response });
            }, this.clientId, isPartialCompleted);
          };
          SurveyModel.prototype.getResult = function (resultId, name) {
            var self = this;
            new _dxSurveyService.dxSurveyService().getResult(resultId, name, function (success, data, dataList, response) {
              self.onGetResult.fire(self, { success: success, data: data, dataList: dataList, response: response });
            });
          };
          SurveyModel.prototype.loadSurveyFromService = function (surveyId) {
            if (surveyId === void 0) {
              surveyId = null;
            }
            if (surveyId) {
              this.surveyId = surveyId;
            }
            var self = this;
            this.isLoading = true;
            this.onLoadingSurveyFromService();
            new _dxSurveyService.dxSurveyService().loadSurvey(this.surveyId, function (success, result, response) {
              self.isLoading = false;
              if (success && result) {
                self.setJsonObject(result);
                self.notifyAllQuestionsOnValueChanged();
                self.onLoadSurveyFromService();
              }
            });
          };
          SurveyModel.prototype.onLoadingSurveyFromService = function () {};
          SurveyModel.prototype.onLoadSurveyFromService = function () {};
          SurveyModel.prototype.checkPageVisibility = function (question, oldQuestionVisible) {
            var page = this.getPageByQuestion(question);
            if (!page) return;
            var newValue = page.isVisible;
            if (newValue != page.getIsPageVisible(question) || oldQuestionVisible) {
              this.pageVisibilityChanged(page, newValue);
            }
          };
          SurveyModel.prototype.updateVisibleIndexes = function () {
            this.updatePageVisibleIndexes(this.showPageNumbers);
            if (this.showQuestionNumbers == "onPage") {
              var visPages = this.visiblePages;
              for (var i = 0; i < visPages.length; i++) {
                this.updateQuestionVisibleIndexes(visPages[i].questions, true);
              }
            } else {
              this.updateQuestionVisibleIndexes(this.getAllQuestions(false), this.showQuestionNumbers == "on");
            }
          };
          SurveyModel.prototype.updatePageVisibleIndexes = function (showIndex) {
            var index = 0;
            for (var i = 0; i < this.pages.length; i++) {
              this.pages[i].visibleIndex = this.pages[i].visible ? index++ : -1;
              this.pages[i].num = showIndex && this.pages[i].visible ? this.pages[i].visibleIndex + 1 : -1;
            }
          };
          SurveyModel.prototype.updateQuestionVisibleIndexes = function (questions, showIndex) {
            var index = 0;
            for (var i = 0; i < questions.length; i++) {
              questions[i].setVisibleIndex(showIndex && questions[i].visible && questions[i].hasTitle ? index++ : -1);
            }
          };
          SurveyModel.prototype.setJsonObject = function (jsonObj) {
            if (!jsonObj) return;
            this.jsonErrors = null;
            var jsonConverter = new _jsonobject.JsonObject();
            jsonConverter.toObject(jsonObj, this);
            if (jsonConverter.errors.length > 0) {
              this.jsonErrors = jsonConverter.errors;
            }
            this.updateProcessedTextValues();
            if (this.hasCookie) {
              this.doComplete();
            }
            this.doQuestionsOnLoad();
            this.runConditions();
            this.updateVisibleIndexes();
          };
          SurveyModel.prototype.onBeforeCreating = function () {};
          SurveyModel.prototype.onCreating = function () {};
          SurveyModel.prototype.updateProcessedTextValues = function () {
            this.processedTextValues = {};
            var self = this;
            this.processedTextValues["pageno"] = function (name) {
              return self.currentPage != null ? self.visiblePages.indexOf(self.currentPage) + 1 : 0;
            };
            this.processedTextValues["pagecount"] = function (name) {
              return self.visiblePageCount;
            };
            var questions = this.getAllQuestions();
            for (var i = 0; i < questions.length; i++) {
              this.addQuestionToProcessedTextValues(questions[i]);
            }
          };
          SurveyModel.prototype.addQuestionToProcessedTextValues = function (question) {
            this.processedTextValues[question.name.toLowerCase()] = "question";
          };
          SurveyModel.prototype.getProcessedTextValue = function (name) {
            var name = name.toLowerCase();
            var val = this.processedTextValues[name];
            if (!val) return null;
            if (val == "question") {
              var question = this.getQuestionByName(name, true);
              return question != null ? this.getValue(question.name) : null;
            }
            if (val == "value") {
              return this.getValue(name);
            }
            if (val == "variable") {
              return this.getVariable(name);
            }
            return val(name);
          };
          SurveyModel.prototype.clearInvisibleQuestionValues = function () {
            var questions = this.getAllQuestions();
            for (var i = 0; i < questions.length; i++) {
              if (questions[i].visible) continue;
              this.setValue(questions[i].name, null);
            }
          };
          SurveyModel.prototype.getVariable = function (name) {
            if (!name) return null;
            return this.variablesHash[name];
          };
          SurveyModel.prototype.setVariable = function (name, newValue) {
            if (!name) return;
            this.variablesHash[name] = newValue;
            this.processedTextValues[name.toLowerCase()] = "variable";
          };
          //ISurvey data
          SurveyModel.prototype.getUnbindValue = function (value) {
            if (value && value instanceof Object) {
              //do not return the same object instance!!!
              return JSON.parse(JSON.stringify(value));
            }
            return value;
          };
          SurveyModel.prototype.getValue = function (name) {
            if (!name || name.length == 0) return null;
            var value = this.valuesHash[name];
            return this.getUnbindValue(value);
          };
          SurveyModel.prototype.setValue = function (name, newValue) {
            if (this.isValueEqual(name, newValue)) return;
            if (newValue == "" || newValue == null) {
              delete this.valuesHash[name];
            } else {
              newValue = this.getUnbindValue(newValue);
              this.valuesHash[name] = newValue;
              this.processedTextValues[name.toLowerCase()] = "value";
            }
            this.notifyQuestionOnValueChanged(name, newValue);
            this.checkTriggers(name, newValue, false);
            this.runConditions();
            this.tryGoNextPageAutomatic(name);
          };
          SurveyModel.prototype.isValueEqual = function (name, newValue) {
            if (newValue == "") newValue = null;
            var oldValue = this.getValue(name);
            if (newValue === null || oldValue === null) return newValue === oldValue;
            return this.isTwoValueEquals(newValue, oldValue);
          };
          SurveyModel.prototype.isTwoValueEquals = function (x, y) {
            if (x === y) return true;
            if (!(x instanceof Object) || !(y instanceof Object)) return false;
            for (var p in x) {
              if (!x.hasOwnProperty(p)) continue;
              if (!y.hasOwnProperty(p)) return false;
              if (x[p] === y[p]) continue;
              if (_typeof(x[p]) !== "object") return false;
              if (!this.isTwoValueEquals(x[p], y[p])) return false;
            }
            for (p in y) {
              if (y.hasOwnProperty(p) && !x.hasOwnProperty(p)) return false;
            }
            return true;
          };
          SurveyModel.prototype.tryGoNextPageAutomatic = function (name) {
            if (!this.goNextPageAutomatic || !this.currentPage) return;
            var question = this.getQuestionByName(name);
            if (question && !question.supportGoNextPageAutomatic()) return;
            var questions = this.getCurrentPageQuestions();
            for (var i = 0; i < questions.length; i++) {
              if (!this.getValue(questions[i].name)) return;
            }
            if (!this.currentPage.hasErrors(true, false)) {
              if (!this.isLastPage) {
                this.nextPage();
              } else {
                this.doComplete();
              }
            }
          };
          SurveyModel.prototype.getComment = function (name) {
            var result = this.data[name + this.commentPrefix];
            if (result == null) result = "";
            return result;
          };
          SurveyModel.prototype.setComment = function (name, newValue) {
            name = name + this.commentPrefix;
            if (newValue == "" || newValue == null) {
              delete this.valuesHash[name];
            } else {
              this.valuesHash[name] = newValue;
              this.tryGoNextPageAutomatic(name);
            }
          };
          SurveyModel.prototype.questionVisibilityChanged = function (question, newValue) {
            this.updateVisibleIndexes();
            this.onVisibleChanged.fire(this, { 'question': question, 'name': question.name, 'visible': newValue });
            this.checkPageVisibility(question, !newValue);
          };
          SurveyModel.prototype.pageVisibilityChanged = function (page, newValue) {
            this.updateVisibleIndexes();
            this.onPageVisibleChanged.fire(this, { 'page': page, 'visible': newValue });
          };
          SurveyModel.prototype.questionAdded = function (question, index) {
            this.updateVisibleIndexes();
            this.addQuestionToProcessedTextValues(question);
            this.onQuestionAdded.fire(this, { 'question': question, 'name': question.name, 'index': index });
          };
          SurveyModel.prototype.questionRemoved = function (question) {
            this.updateVisibleIndexes();
            this.onQuestionRemoved.fire(this, { 'question': question, 'name': question.name });
          };
          SurveyModel.prototype.validateQuestion = function (name) {
            if (this.onValidateQuestion.isEmpty) return null;
            var options = { name: name, value: this.getValue(name), error: null };
            this.onValidateQuestion.fire(this, options);
            return options.error ? new _error.CustomError(options.error) : null;
          };
          SurveyModel.prototype.processHtml = function (html) {
            var options = { html: html };
            this.onProcessHtml.fire(this, options);
            return this.processText(options.html);
          };
          SurveyModel.prototype.processText = function (text) {
            return this.textPreProcessor.process(text);
          };
          //ISurveyTriggerOwner
          SurveyModel.prototype.getObjects = function (pages, questions) {
            var result = [];
            Array.prototype.push.apply(result, this.getPagesByNames(pages));
            Array.prototype.push.apply(result, this.getQuestionsByNames(questions));
            return result;
          };
          SurveyModel.prototype.setTriggerValue = function (name, value, isVariable) {
            if (!name) return;
            if (isVariable) {
              this.setVariable(name, value);
            } else {
              this.setValue(name, value);
            }
          };
          return SurveyModel;
        }(_base.Base);
        _jsonobject.JsonObject.metaData.addClass("survey", [{ name: "locale", choices: function choices() {
          return _surveyStrings.surveyLocalization.getLocales();
        } }, "title", "completedHtml:html", { name: "pages", className: "page" }, { name: "questions", baseClassName: "question", onGetValue: function onGetValue(obj) {
          return null;
        }, onSetValue: function onSetValue(obj, value, jsonConverter) {
          var page = obj.addNewPage("");jsonConverter.toObject({ questions: value }, page);
        } }, { name: "triggers:triggers", baseClassName: "surveytrigger", classNamePart: "trigger" }, "surveyId", "surveyPostId", "cookieName", "sendResultOnPageNext:boolean", { name: "showNavigationButtons:boolean", default: true }, { name: "showTitle:boolean", default: true }, { name: "showPageTitles:boolean", default: true }, "showPageNumbers:boolean", { name: "showQuestionNumbers", default: "on", choices: ["on", "onPage", "off"] }, { name: "questionTitleLocation", default: "top", choices: ["top", "bottom"] }, { name: "showProgressBar", default: "off", choices: ["off", "top", "bottom"] }, { name: "storeOthersAsComment:boolean", default: true }, "goNextPageAutomatic:boolean", "clearInvisibleValues:boolean", { name: "pagePrevText", onGetValue: function onGetValue(obj) {
          return obj.pagePrevTextValue;
        } }, { name: "pageNextText", onGetValue: function onGetValue(obj) {
          return obj.pageNextTextValue;
        } }, { name: "completeText", onGetValue: function onGetValue(obj) {
          return obj.completeTextValue;
        } }, { name: "requiredText", default: "*" }, "questionStartIndex", "questionTitleTemplate"]);
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 32 */
    /***/ function(module, exports) {

      'use strict';

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var dxSurveyService = exports.dxSurveyService = function () {
        //public static serviceUrl: string = "http://localhost:50488/api/Survey";
        function dxSurveyService() {}
        dxSurveyService.prototype.loadSurvey = function (surveyId, onLoad) {
          var xhr = new XMLHttpRequest();
          xhr.open('GET', dxSurveyService.serviceUrl + '/getSurvey?surveyId=' + surveyId);
          xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
          xhr.onload = function () {
            var result = JSON.parse(xhr.response);
            onLoad(xhr.status == 200, result, xhr.response);
          };
          xhr.send();
        };
        dxSurveyService.prototype.sendResult = function (postId, result, onSendResult, clientId, isPartialCompleted) {
          if (clientId === void 0) {
            clientId = null;
          }
          if (isPartialCompleted === void 0) {
            isPartialCompleted = false;
          }
          var xhr = new XMLHttpRequest();
          xhr.open('POST', dxSurveyService.serviceUrl + '/post/');
          xhr.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
          var data = { postId: postId, surveyResult: JSON.stringify(result) };
          if (clientId) data['clientId'] = clientId;
          if (isPartialCompleted) data['isPartialCompleted'] = true;
          var dataStringify = JSON.stringify(data);
          var self = this;
          xhr.onload = xhr.onerror = function () {
            if (!onSendResult) return;
            onSendResult(xhr.status == 200, xhr.response);
          };
          xhr.send(dataStringify);
        };
        dxSurveyService.prototype.sendFile = function (postId, file, onSendFile) {
          var xhr = new XMLHttpRequest();
          xhr.onload = xhr.onerror = function () {
            if (!onSendFile) return;
            onSendFile(xhr.status == 200, JSON.parse(xhr.response));
          };
          xhr.open("POST", dxSurveyService.serviceUrl + '/upload/', true);
          var formData = new FormData();
          formData.append("file", file);
          formData.append("postId", postId);
          xhr.send(formData);
        };
        dxSurveyService.prototype.getResult = function (resultId, name, onGetResult) {
          var xhr = new XMLHttpRequest();
          var data = 'resultId=' + resultId + '&name=' + name;
          xhr.open('GET', dxSurveyService.serviceUrl + '/getResult?' + data);
          xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
          var self = this;
          xhr.onload = function () {
            var result = null;
            var list = null;
            if (xhr.status == 200) {
              result = JSON.parse(xhr.response);
              list = [];
              for (var key in result.QuestionResult) {
                var el = { name: key, value: result.QuestionResult[key] };
                list.push(el);
              }
            }
            onGetResult(xhr.status == 200, result, list, xhr.response);
          };
          xhr.send();
        };
        dxSurveyService.prototype.isCompleted = function (resultId, clientId, onIsCompleted) {
          var xhr = new XMLHttpRequest();
          var data = 'resultId=' + resultId + '&clientId=' + clientId;
          xhr.open('GET', dxSurveyService.serviceUrl + '/isCompleted?' + data);
          xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
          var self = this;
          xhr.onload = function () {
            var result = null;
            if (xhr.status == 200) {
              result = JSON.parse(xhr.response);
            }
            onIsCompleted(xhr.status == 200, result, xhr.response);
          };
          xhr.send();
        };
        dxSurveyService.serviceUrl = "https://dxsurveyapi.azurewebsites.net/api/Survey";
        return dxSurveyService;
      }();

      /***/ },
    /* 33 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SurveyTriggerSetValue = exports.SurveyTriggerComplete = exports.SurveyTriggerVisible = exports.SurveyTrigger = exports.Trigger = undefined;

        var _base = __webpack_require__(5);

        var _jsonobject = __webpack_require__(8);

        var Trigger = exports.Trigger = function (_super) {
          __extends(Trigger, _super);
          function Trigger() {
            _super.call(this);
            this.opValue = "equal";
          }
          Object.defineProperty(Trigger, "operators", {
            get: function get() {
              if (Trigger.operatorsValue != null) return Trigger.operatorsValue;
              Trigger.operatorsValue = {
                empty: function empty(value, expectedValue) {
                  return !value;
                },
                notempty: function notempty(value, expectedValue) {
                  return !!value;
                },
                equal: function equal(value, expectedValue) {
                  return value == expectedValue;
                },
                notequal: function notequal(value, expectedValue) {
                  return value != expectedValue;
                },
                contains: function contains(value, expectedValue) {
                  return value && value["indexOf"] && value.indexOf(expectedValue) > -1;
                },
                notcontains: function notcontains(value, expectedValue) {
                  return !value || !value["indexOf"] || value.indexOf(expectedValue) == -1;
                },
                greater: function greater(value, expectedValue) {
                  return value > expectedValue;
                },
                less: function less(value, expectedValue) {
                  return value < expectedValue;
                },
                greaterorequal: function greaterorequal(value, expectedValue) {
                  return value >= expectedValue;
                },
                lessorequal: function lessorequal(value, expectedValue) {
                  return value <= expectedValue;
                }
              };
              return Trigger.operatorsValue;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(Trigger.prototype, "operator", {
            get: function get() {
              return this.opValue;
            },
            set: function set(value) {
              if (!value) return;
              value = value.toLowerCase();
              if (!Trigger.operators[value]) return;
              this.opValue = value;
            },
            enumerable: true,
            configurable: true
          });
          Trigger.prototype.check = function (value) {
            if (Trigger.operators[this.operator](value, this.value)) {
              this.onSuccess();
            } else {
              this.onFailure();
            }
          };
          Trigger.prototype.onSuccess = function () {};
          Trigger.prototype.onFailure = function () {};
          Trigger.operatorsValue = null;
          return Trigger;
        }(_base.Base);
        var SurveyTrigger = exports.SurveyTrigger = function (_super) {
          __extends(SurveyTrigger, _super);
          function SurveyTrigger() {
            _super.call(this);
            this.owner = null;
          }
          SurveyTrigger.prototype.setOwner = function (owner) {
            this.owner = owner;
          };
          Object.defineProperty(SurveyTrigger.prototype, "isOnNextPage", {
            get: function get() {
              return false;
            },
            enumerable: true,
            configurable: true
          });
          return SurveyTrigger;
        }(Trigger);
        var SurveyTriggerVisible = exports.SurveyTriggerVisible = function (_super) {
          __extends(SurveyTriggerVisible, _super);
          function SurveyTriggerVisible() {
            _super.call(this);
            this.pages = [];
            this.questions = [];
          }
          SurveyTriggerVisible.prototype.getType = function () {
            return "visibletrigger";
          };
          SurveyTriggerVisible.prototype.onSuccess = function () {
            this.onTrigger(this.onItemSuccess);
          };
          SurveyTriggerVisible.prototype.onFailure = function () {
            this.onTrigger(this.onItemFailure);
          };
          SurveyTriggerVisible.prototype.onTrigger = function (func) {
            if (!this.owner) return;
            var objects = this.owner.getObjects(this.pages, this.questions);
            for (var i = 0; i < objects.length; i++) {
              func(objects[i]);
            }
          };
          SurveyTriggerVisible.prototype.onItemSuccess = function (item) {
            item.visible = true;
          };
          SurveyTriggerVisible.prototype.onItemFailure = function (item) {
            item.visible = false;
          };
          return SurveyTriggerVisible;
        }(SurveyTrigger);
        var SurveyTriggerComplete = exports.SurveyTriggerComplete = function (_super) {
          __extends(SurveyTriggerComplete, _super);
          function SurveyTriggerComplete() {
            _super.call(this);
          }
          SurveyTriggerComplete.prototype.getType = function () {
            return "completetrigger";
          };
          Object.defineProperty(SurveyTriggerComplete.prototype, "isOnNextPage", {
            get: function get() {
              return true;
            },
            enumerable: true,
            configurable: true
          });
          SurveyTriggerComplete.prototype.onSuccess = function () {
            if (this.owner) this.owner.doComplete();
          };
          return SurveyTriggerComplete;
        }(SurveyTrigger);
        var SurveyTriggerSetValue = exports.SurveyTriggerSetValue = function (_super) {
          __extends(SurveyTriggerSetValue, _super);
          function SurveyTriggerSetValue() {
            _super.call(this);
          }
          SurveyTriggerSetValue.prototype.getType = function () {
            return "setvaluetrigger";
          };
          SurveyTriggerSetValue.prototype.onSuccess = function () {
            if (!this.setToName || !this.owner) return;
            this.owner.setTriggerValue(this.setToName, this.setValue, this.isVariable);
          };
          return SurveyTriggerSetValue;
        }(SurveyTrigger);
        _jsonobject.JsonObject.metaData.addClass("trigger", ["operator", "!value"]);
        _jsonobject.JsonObject.metaData.addClass("surveytrigger", ["!name"], null, "trigger");
        _jsonobject.JsonObject.metaData.addClass("visibletrigger", ["pages", "questions"], function () {
          return new SurveyTriggerVisible();
        }, "surveytrigger");
        _jsonobject.JsonObject.metaData.addClass("completetrigger", [], function () {
          return new SurveyTriggerComplete();
        }, "surveytrigger");
        _jsonobject.JsonObject.metaData.addClass("setvaluetrigger", ["!setToName", "setValue", "isVariable:boolean"], function () {
          return new SurveyTriggerSetValue();
        }, "surveytrigger");
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 34 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SurveyWindowModel = undefined;

        var _base = __webpack_require__(5);

        var _survey = __webpack_require__(31);

        var SurveyWindowModel = exports.SurveyWindowModel = function (_super) {
          __extends(SurveyWindowModel, _super);
          function SurveyWindowModel(jsonObj) {
            _super.call(this);
            this.surveyValue = this.createSurvey(jsonObj);
            this.surveyValue.showTitle = false;
            this.windowElement = document.createElement("div");
          }
          SurveyWindowModel.prototype.getType = function () {
            return "window";
          };
          Object.defineProperty(SurveyWindowModel.prototype, "survey", {
            get: function get() {
              return this.surveyValue;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(SurveyWindowModel.prototype, "isShowing", {
            get: function get() {
              return this.isShowingValue;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(SurveyWindowModel.prototype, "isExpanded", {
            get: function get() {
              return this.isExpandedValue;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(SurveyWindowModel.prototype, "title", {
            get: function get() {
              return this.titleValue ? this.titleValue : this.survey.title;
            },
            set: function set(value) {
              this.titleValue = value;
            },
            enumerable: true,
            configurable: true
          });
          SurveyWindowModel.prototype.expand = function () {
            this.expandcollapse(true);
          };
          SurveyWindowModel.prototype.collapse = function () {
            this.expandcollapse(false);
          };
          SurveyWindowModel.prototype.createSurvey = function (jsonObj) {
            return new _survey.SurveyModel(jsonObj);
          };
          SurveyWindowModel.prototype.expandcollapse = function (value) {
            this.isExpandedValue = value;
          };
          SurveyWindowModel.surveyElementName = "windowSurveyJS";
          return SurveyWindowModel;
        }(_base.Base);
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 35 */
    /***/ function(module, exports) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var surveyCss = exports.surveyCss = {
        currentType: "",
        getCss: function getCss() {
          var loc = this.currentType ? this[this.currentType] : defaultStandardCss;
          if (!loc) loc = defaultStandardCss;
          return loc;
        }
      };
      var defaultStandardCss = exports.defaultStandardCss = {
        root: "sv_main",
        header: "",
        body: "sv_body",
        footer: "sv_nav",
        navigationButton: "", navigation: { complete: "", prev: "", next: "" },
        progress: "sv_progress", progressBar: "",
        pageTitle: "sv_p_title",
        row: "sv_row",
        question: { root: "sv_q", title: "sv_q_title", comment: "", indent: 20 },
        error: { root: "sv_q_erbox", icon: "", item: "" },
        checkbox: { root: "sv_qcbc", item: "sv_q_checkbox", other: "sv_q_other" },
        comment: "",
        dropdown: "",
        matrix: { root: "sv_q_matrix" },
        matrixdropdown: { root: "sv_q_matrix" },
        matrixdynamic: { root: "table", button: "" },
        multipletext: { root: "", itemTitle: "", itemValue: "" },
        radiogroup: { root: "sv_qcbc", item: "sv_q_radiogroup", other: "sv_q_other" },
        rating: { root: "sv_q_rating", item: "sv_q_rating_item" },
        text: "",
        window: {
          root: "sv_window", body: "sv_window_content",
          header: {
            root: "sv_window_title", title: "", button: "", buttonExpanded: "", buttonCollapsed: ""
          }
        }
      };
      surveyCss["standard"] = defaultStandardCss;

      /***/ },
    /* 36 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Survey = undefined;

        var _react = __webpack_require__(37);

        var React = _interopRequireWildcard(_react);

        var _reactsurveymodel = __webpack_require__(41);

        var _reactpage = __webpack_require__(42);

        var _reactSurveyNavigation = __webpack_require__(46);

        var _reactquestionfactory = __webpack_require__(45);

        var _cssstandard = __webpack_require__(35);

        var _reactSurveyProgress = __webpack_require__(48);

        var _base = __webpack_require__(5);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

        var Survey = exports.Survey = function (_super) {
          __extends(Survey, _super);
          function Survey(props) {
            _super.call(this, props);
            this.isCurrentPageChanged = false;
            this.updateSurvey(props);
          }
          Object.defineProperty(Survey, "cssType", {
            get: function get() {
              return _cssstandard.surveyCss.currentType;
            },
            set: function set(value) {
              _cssstandard.surveyCss.currentType = value;
            },
            enumerable: true,
            configurable: true
          });
          Survey.prototype.componentWillReceiveProps = function (nextProps) {
            this.updateSurvey(nextProps);
          };
          Survey.prototype.componentDidUpdate = function () {
            if (this.isCurrentPageChanged) {
              this.isCurrentPageChanged = false;
              this.survey.focusFirstQuestion();
            }
          };
          Survey.prototype.render = function () {
            if (this.survey.state == "completed") return this.renderCompleted();
            if (this.survey.state == "loading") return this.renderLoading();
            return this.renderSurvey();
          };
          Object.defineProperty(Survey.prototype, "css", {
            get: function get() {
              return _cssstandard.surveyCss.getCss();
            },
            set: function set(value) {
              this.survey.mergeCss(value, this.css);
            },
            enumerable: true,
            configurable: true
          });
          Survey.prototype.renderCompleted = function () {
            var htmlValue = { __html: this.survey.processedCompletedHtml };
            return React.createElement("div", { dangerouslySetInnerHTML: htmlValue });
          };
          Survey.prototype.renderLoading = function () {
            var htmlValue = { __html: this.survey.processedLoadingHtml };
            return React.createElement("div", { dangerouslySetInnerHTML: htmlValue });
          };
          Survey.prototype.renderSurvey = function () {
            var title = this.survey.title && this.survey.showTitle ? this.renderTitle() : null;
            var currentPage = this.survey.currentPage ? this.renderPage() : null;
            var topProgress = this.survey.showProgressBar == "top" ? this.renderProgress(true) : null;
            var bottomProgress = this.survey.showProgressBar == "bottom" ? this.renderProgress(false) : null;
            var buttons = currentPage && this.survey.showNavigationButtons ? this.renderNavigation() : null;
            if (!currentPage) {
              currentPage = this.renderEmptySurvey();
            }
            return React.createElement("div", { className: this.css.root }, title, React.createElement("div", { id: _base.SurveyPageId, className: this.css.body }, topProgress, currentPage, bottomProgress), buttons);
          };
          Survey.prototype.renderTitle = function () {
            return React.createElement("div", { className: this.css.header }, React.createElement("h3", null, this.survey.title));
          };
          Survey.prototype.renderPage = function () {
            return React.createElement(_reactpage.SurveyPage, { survey: this.survey, page: this.survey.currentPage, css: this.css, creator: this });
          };
          Survey.prototype.renderProgress = function (isTop) {
            return React.createElement(_reactSurveyProgress.SurveyProgress, { survey: this.survey, css: this.css, isTop: isTop });
          };
          Survey.prototype.renderNavigation = function () {
            return React.createElement(_reactSurveyNavigation.SurveyNavigation, { survey: this.survey, css: this.css });
          };
          Survey.prototype.renderEmptySurvey = function () {
            return React.createElement("span", null, this.survey.emptySurveyText);
          };
          Survey.prototype.updateSurvey = function (newProps) {
            if (newProps) {
              if (newProps.model) {
                this.survey = newProps.model;
              } else {
                if (newProps.json) {
                  this.survey = new _reactsurveymodel.ReactSurveyModel(newProps.json);
                }
              }
            } else {
              this.survey = new _reactsurveymodel.ReactSurveyModel();
            }
            if (newProps) {
              if (newProps.clientId) this.survey.clientId = newProps.clientId;
              if (newProps.data) this.survey.data = newProps.data;
              if (newProps.css) this.survey.mergeCss(newProps.css, this.css);
            }
            //set the first page
            var dummy = this.survey.currentPage;
            this.state = { pageIndexChange: 0, isCompleted: false, modelChanged: 0 };
            this.setSurveyEvents(newProps);
          };
          Survey.prototype.setSurveyEvents = function (newProps) {
            var self = this;
            this.survey.renderCallback = function () {
              self.state.modelChanged = self.state.modelChanged + 1;
              self.setState(self.state);
            };
            this.survey.onComplete.add(function (sender) {
              self.state.isCompleted = true;self.setState(self.state);
            });
            this.survey.onCurrentPageChanged.add(function (sender, options) {
              self.isCurrentPageChanged = true;
              self.state.pageIndexChange = self.state.pageIndexChange + 1;
              self.setState(self.state);
              if (newProps && newProps.onCurrentPageChanged) newProps.onCurrentPageChanged(sender, options);
            });
            this.survey.onVisibleChanged.add(function (sender, options) {
              if (options.question && options.question.react) {
                var state = options.question.react.state;
                state.visible = options.question.visible;
                options.question.react.setState(state);
              }
            });
            this.survey.onValueChanged.add(function (sender, options) {
              if (options.question && options.question.react) {
                var state = options.question.react.state;
                state.value = options.value;
                options.question.react.setState(state);
              }
            });
            if (!newProps) return;
            this.survey.onValueChanged.add(function (sender, options) {
              if (newProps.data) newProps.data[options.name] = options.value;
              if (newProps.onValueChanged) newProps.onValueChanged(sender, options);
            });
            if (newProps.onComplete) {
              this.survey.onComplete.add(function (sender) {
                newProps.onComplete(sender);
              });
            }
            this.survey.onPageVisibleChanged.add(function (sender, options) {
              if (newProps.onPageVisibleChanged) newProps.onPageVisibleChanged(sender, options);
            });
            if (newProps.onQuestionAdded) {
              this.survey.onQuestionAdded.add(function (sender, options) {
                newProps.onQuestionAdded(sender, options);
              });
            }
            if (newProps.onQuestionRemoved) {
              this.survey.onQuestionRemoved.add(function (sender, options) {
                newProps.onQuestionRemoved(sender, options);
              });
            }
            if (newProps.onValidateQuestion) {
              this.survey.onValidateQuestion.add(function (sender, options) {
                newProps.onValidateQuestion(sender, options);
              });
            }
            if (newProps.onServerValidateQuestions) {
              this.survey.onServerValidateQuestions = newProps.onServerValidateQuestions;
            }
            if (newProps.onSendResult) {
              this.survey.onSendResult.add(function (sender, options) {
                newProps.onSendResult(sender, options);
              });
            }
            if (newProps.onGetResult) {
              this.survey.onGetResult.add(function (sender, options) {
                newProps.onGetResult(sender, options);
              });
            }
            if (newProps.onProcessHtml) {
              this.survey.onProcessHtml.add(function (sender, options) {
                newProps.onProcessHtml(sender, options);
              });
            }
          };
          //ISurveyCreator
          Survey.prototype.createQuestionElement = function (question) {
            var questionCss = this.css[question.getType()];
            return _reactquestionfactory.ReactQuestionFactory.Instance.createQuestion(question.getType(), {
              question: question, css: questionCss, rootCss: this.css, creator: this
            });
          };
          Survey.prototype.renderError = function (key, errorText) {
            return React.createElement("div", { key: key, className: this.css.error.item }, errorText);
          };
          Survey.prototype.questionTitleLocation = function () {
            return this.survey.questionTitleLocation;
          };
          return Survey;
        }(React.Component);
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 37 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(process) {(function (global, factory) {
        true ? module.exports = factory(__webpack_require__(39), __webpack_require__(40)) :
          typeof define === 'function' && define.amd ? define(['proptypes', 'preact'], factory) :
            (global.preactCompat = factory(global.PropTypes,global.preact));
      }(this, (function (PropTypes,preact) {

        PropTypes = 'default' in PropTypes ? PropTypes['default'] : PropTypes;

        var version = '15.1.0'; // trick libraries to think we are react

        var ELEMENTS = 'a abbr address area article aside audio b base bdi bdo big blockquote body br button canvas caption cite code col colgroup data datalist dd del details dfn dialog div dl dt em embed fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 head header hgroup hr html i iframe img input ins kbd keygen label legend li link main map mark menu menuitem meta meter nav noscript object ol optgroup option output p param picture pre progress q rp rt ruby s samp script section select small source span strong style sub summary sup table tbody td textarea tfoot th thead time title tr track u ul var video wbr circle clipPath defs ellipse g image line linearGradient mask path pattern polygon polyline radialGradient rect stop svg text tspan'.split(' ');

        var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element')) || 0xeac7;

        // don't autobind these methods since they already have guaranteed context.
        var AUTOBIND_BLACKLIST = {
          constructor: 1,
          render: 1,
          shouldComponentUpdate: 1,
          componentWillReceiveProps: 1,
          componentWillUpdate: 1,
          componentDidUpdate: 1,
          componentWillMount: 1,
          componentDidMount: 1,
          componentWillUnmount: 1,
          componentDidUnmount: 1
        };


        var CAMEL_PROPS = /^(?:accent|alignment|arabic|baseline|cap|clip|color|fill|flood|font|glyph|horiz|marker|overline|paint|stop|strikethrough|stroke|text|underline|unicode|units|v|vert|word|writing|x)[A-Z]/;


        var BYPASS_HOOK = {};

        /*global process*/
        var DEV = typeof process==='undefined' || !process.env || process.env.NODE_ENV!=='production';

        // a component that renders nothing. Used to replace components for unmountComponentAtNode.
        var EmptyComponent = function () { return null; };



        // make react think we're react.
        var VNode = preact.h('').constructor;
        VNode.prototype.$$typeof = REACT_ELEMENT_TYPE;
        VNode.prototype.preactCompatUpgraded = false;
        VNode.prototype.preactCompatNormalized = false;

        Object.defineProperty(VNode.prototype, 'type', {
          get: function get() { return this.nodeName; },
          set: function set(v) { this.nodeName = v; },
          configurable:true
        });

        Object.defineProperty(VNode.prototype, 'props', {
          get: function get$1() { return this.attributes; },
          set: function set$1(v) { this.attributes = v; },
          configurable:true
        });



        var oldEventHook = preact.options.event;
        preact.options.event = function (e) {
          e.persist = Object;
          if (oldEventHook) e = oldEventHook(e);
          return e;
        };


        var oldVnodeHook = preact.options.vnode;
        preact.options.vnode = function (vnode) {
          if (!vnode.preactCompatUpgraded) {
            vnode.preactCompatUpgraded = true;

            var tag = vnode.nodeName,
              attrs = vnode.attributes;

            if (!attrs) attrs = vnode.attributes = {};

            if (typeof tag==='function') {
              if (tag[COMPONENT_WRAPPER_KEY]===true || (tag.prototype && 'isReactComponent' in tag.prototype)) {
                if (!vnode.preactCompatNormalized) {
                  normalizeVNode(vnode);
                }
                handleComponentVNode(vnode);
              }
            }
            else if (attrs) {
              handleElementVNode(vnode, attrs);
            }
          }
          if (oldVnodeHook) oldVnodeHook(vnode);
        };




        function handleComponentVNode(vnode) {
          var tag = vnode.nodeName,
            a = vnode.attributes;

          vnode.attributes = {};
          if (tag.defaultProps) extend(vnode.attributes, tag.defaultProps);
          if (a) extend(vnode.attributes, a);
          a = vnode.attributes;

          if (vnode.children && !vnode.children.length) vnode.children = undefined;

          if (vnode.children) a.children = vnode.children;
        }

        function handleElementVNode(vnode, a) {
          var shouldSanitize, attrs, i;
          if (a) {
            for (i in a) if ((shouldSanitize = CAMEL_PROPS.test(i))) break;
            if (shouldSanitize) {
              attrs = vnode.attributes = {};
              for (i in a) {
                if (a.hasOwnProperty(i)) {
                  attrs[ CAMEL_PROPS.test(i) ? i.replace(/([A-Z0-9])/, '-$1').toLowerCase() : i ] = a[i];
                }
              }
            }
          }
        }



        // proxy render() since React returns a Component reference.
        function render$1$1(vnode, parent, callback) {
          var prev = parent && parent._preactCompatRendered;

          // ignore impossible previous renders
          if (prev && prev.parentNode!==parent) prev = null;

          // default to first Element child
          if (!prev) prev = parent.children[0];

          // remove unaffected siblings
          for (var i=parent.childNodes.length; i--; ) {
            if (parent.childNodes[i]!==prev) {
              parent.removeChild(parent.childNodes[i]);
            }
          }

          var out = preact.render(vnode, parent, prev);
          if (parent) parent._preactCompatRendered = out;
          if (typeof callback==='function') callback();
          return out && out._component || out.base;
        }


        var ContextProvider = function ContextProvider () {};

        ContextProvider.prototype.getChildContext = function getChildContext () {
          return this.props.context;
        };
        ContextProvider.prototype.render = function render$1 (props) {
          return props.children[0];
        };

        function renderSubtreeIntoContainer(parentComponent, vnode, container, callback) {
          var wrap = preact.h(ContextProvider, { context: parentComponent.context }, vnode);
          var c = render$1$1(wrap, container);
          if (callback) callback(c);
          return c;
        }


        function unmountComponentAtNode(container) {
          var existing = container._preactCompatRendered;
          if (existing && existing.parentNode===container) {
            preact.render(preact.h(EmptyComponent), container, existing);
            return true;
          }
          return false;
        }



        var ARR = [];

        // This API is completely unnecessary for Preact, so it's basically passthrough.
        var Children = {
          map: function map(children, fn, ctx) {
            children = Children.toArray(children);
            if (ctx && ctx!==children) fn = fn.bind(ctx);
            return children.map(fn);
          },
          forEach: function forEach(children, fn, ctx) {
            children = Children.toArray(children);
            if (ctx && ctx!==children) fn = fn.bind(ctx);
            children.forEach(fn);
          },
          count: function count(children) {
            children = Children.toArray(children);
            return children.length;
          },
          only: function only(children) {
            children = Children.toArray(children);
            if (children.length!==1) throw new Error('Children.only() expects only one child.');
            return children[0];
          },
          toArray: function toArray(children) {
            return Array.isArray && Array.isArray(children) ? children : ARR.concat(children);
          }
        };


        /** Track current render() component for ref assignment */
        var currentComponent;


        function createFactory(type) {
          return createElement.bind(null, type);
        }


        var DOM = {};
        for (var i=ELEMENTS.length; i--; ) {
          DOM[ELEMENTS[i]] = createFactory(ELEMENTS[i]);
        }

        function upgradeToVNodes(arr, offset) {
          for (var i=offset || 0; i<arr.length; i++) {
            var obj = arr[i];
            if (Array.isArray(obj)) {
              upgradeToVNodes(obj);
            }
            else if (obj && typeof obj==='object' && !isValidElement(obj) && ((obj.props && obj.type) || (obj.attributes && obj.nodeName) || obj.children)) {
              arr[i] = createElement(obj.type || obj.nodeName, obj.props || obj.attributes, obj.children);
            }
          }
        }

        function isStatelessComponent(c) {
          return typeof c==='function' && !(c.prototype && c.prototype.render);
        }


        var COMPONENT_WRAPPER_KEY = typeof Symbol!=='undefined' ? Symbol.for('__preactCompatWrapper') : '__preactCompatWrapper';

        // wraps stateless functional components in a PropTypes validator
        function wrapStatelessComponent(WrappedComponent) {
          return createClass({
            displayName: WrappedComponent.displayName || WrappedComponent.name,
            render: function render$1$1(props, state, context) {
              return WrappedComponent(props, context);
            }
          });
        }


        function statelessComponentHook(Ctor) {
          var Wrapped = Ctor[COMPONENT_WRAPPER_KEY];
          if (Wrapped) return Wrapped===true ? Ctor : Wrapped;

          Wrapped = wrapStatelessComponent(Ctor);

          Object.defineProperty(Wrapped, COMPONENT_WRAPPER_KEY, { configurable:true, value:true });
          Wrapped.displayName = Ctor.displayName;
          Wrapped.propTypes = Ctor.propTypes;
          Wrapped.defaultProps = Ctor.defaultProps;

          Object.defineProperty(Ctor, COMPONENT_WRAPPER_KEY, { configurable:true, value:Wrapped });

          return Wrapped;
        }


        function createElement() {
          var args = [], len = arguments.length;
          while ( len-- ) args[ len ] = arguments[ len ];

          upgradeToVNodes(args, 2);
          return normalizeVNode(preact.h.apply(void 0, args));
        }


        function normalizeVNode(vnode) {
          vnode.preactCompatNormalized = true;

          applyClassName(vnode);

          if (isStatelessComponent(vnode.nodeName)) {
            vnode.nodeName = statelessComponentHook(vnode.nodeName);
          }

          var ref = vnode.attributes.ref,
            type = ref && typeof ref;
          if (currentComponent && (type==='string' || type==='number')) {
            vnode.attributes.ref = createStringRefProxy(ref, currentComponent);
          }

          applyEventNormalization(vnode);

          return vnode;
        }


        function cloneElement$1(element, props) {
          var children = [], len = arguments.length - 2;
          while ( len-- > 0 ) children[ len ] = arguments[ len + 2 ];

          if (!isValidElement(element)) return element;
          var elementProps = element.attributes || element.props;
          var node = preact.h(
            element.nodeName || element.type,
            elementProps,
            element.children || elementProps && elementProps.children
          );
          return normalizeVNode(preact.cloneElement.apply(void 0, [ node, props ].concat( children )));
        }


        function isValidElement(element) {
          return element && ((element instanceof VNode) || element.$$typeof===REACT_ELEMENT_TYPE);
        }


        function createStringRefProxy(name, component) {
          return component._refProxies[name] || (component._refProxies[name] = function (resolved) {
              if (component && component.refs) {
                component.refs[name] = resolved;
                if (resolved===null) {
                  delete component._refProxies[name];
                  component = null;
                }
              }
            });
        }


        function applyEventNormalization(ref) {
          var nodeName = ref.nodeName;
          var attributes = ref.attributes;

          if (!attributes || typeof nodeName!=='string') return;
          var props = {};
          for (var i in attributes) {
            props[i.toLowerCase()] = i;
          }
          if (props.onchange) {
            nodeName = nodeName.toLowerCase();
            var attr = nodeName==='input' && String(attributes.type).toLowerCase()==='checkbox' ? 'onclick' : 'oninput',
              normalized = props[attr] || attr;
            if (!attributes[normalized]) {
              attributes[normalized] = multihook([attributes[props[attr]], attributes[props.onchange]]);
            }
          }
        }


        function applyClassName(ref) {
          var attributes = ref.attributes;

          if (!attributes) return;
          var cl = attributes.className || attributes.class;
          if (cl) attributes.className = cl;
        }


        function extend(base, props) {
          for (var key in props) {
            if (props.hasOwnProperty(key)) {
              base[key] = props[key];
            }
          }
          return base;
        }


        function shallowDiffers(a, b) {
          for (var i in a) if (!(i in b)) return true;
          for (var i$1 in b) if (a[i$1]!==b[i$1]) return true;
          return false;
        }


        var findDOMNode = function (component) { return component && component.base || component; };


        function F(){}

        function createClass(obj) {
          var mixins = obj.mixins && collateMixins(obj.mixins);

          function cl(props, context) {
            extend(this, obj);
            if (mixins) applyMixins(this, mixins);
            bindAll(this);
            Component$1.call(this, props, context, BYPASS_HOOK);
            newComponentHook.call(this, props, context);
          }

          if (obj.statics) {
            extend(cl, obj.statics);
          }
          if (obj.propTypes) {
            cl.propTypes = obj.propTypes;
          }
          if (obj.defaultProps) {
            cl.defaultProps = obj.defaultProps;
          }
          if (obj.getDefaultProps) {
            cl.defaultProps = obj.getDefaultProps();
          }

          F.prototype = Component$1.prototype;
          cl.prototype = new F();
          cl.prototype.constructor = cl;

          cl.displayName = obj.displayName || 'Component';

          return cl;
        }


        // Flatten an Array of mixins to a map of method name to mixin implementations
        function collateMixins(mixins) {
          var keyed = {};
          for (var i=0; i<mixins.length; i++) {
            var mixin = mixins[i];
            for (var key in mixin) {
              if (mixin.hasOwnProperty(key) && typeof mixin[key]==='function') {
                (keyed[key] || (keyed[key]=[])).push(mixin[key]);
              }
            }
          }
          return keyed;
        }


        // apply a mapping of Arrays of mixin methods to a component instance
        function applyMixins(inst, mixins) {
          for (var key in mixins) if (mixins.hasOwnProperty(key)) {
            inst[key] = multihook(mixins[key].concat(inst[key] || key));
          }
        }


        function bindAll(ctx) {
          for (var i in ctx) {
            var v = ctx[i];
            if (typeof v==='function' && !v.__bound && !AUTOBIND_BLACKLIST.hasOwnProperty(i)) {
              (ctx[i] = v.bind(ctx)).__bound = true;
            }
          }
        }


        function callMethod(ctx, m, args) {
          if (typeof m==='string') {
            m = ctx.constructor.prototype[m];
          }
          if (typeof m==='function') {
            return m.apply(ctx, args);
          }
        }

        function multihook(hooks) {
          return function() {
            var arguments$1 = arguments;
            var this$1 = this;

            var ret;
            for (var i=0; i<hooks.length; i++) {
              var r = callMethod(this$1, hooks[i], arguments$1);
              if (typeof r!=='undefined') ret = r;
            }
            return ret;
          };
        }


        function newComponentHook(props, context) {
          propsHook.call(this, props, context);
          this.componentWillReceiveProps = multihook([propsHook, this.componentWillReceiveProps || 'componentWillReceiveProps']);
          this.render = multihook([propsHook, beforeRender, this.render || 'render', afterRender]);
        }


        function propsHook(props, context) {
          var this$1 = this;

          if (!props) return;

          // React annoyingly special-cases single children, and some react components are ridiculously strict about this.
          var c = props.children;
          if (c && Array.isArray(c) && c.length===1) {
            props.children = c[0];

            // but its totally still going to be an Array.
            if (props.children && typeof props.children==='object') {
              props.children.length = 1;
              props.children[0] = props.children;
            }
          }

          // add proptype checking
          if (DEV) {
            var ctor = typeof this==='function' ? this : this.constructor,
              propTypes = this.propTypes || ctor.propTypes;
            if (propTypes) {
              for (var prop in propTypes) {
                if (propTypes.hasOwnProperty(prop) && typeof propTypes[prop]==='function') {
                  var displayName = this$1.displayName || ctor.name;
                  var err = propTypes[prop](props, prop, displayName, 'prop');
                  if (err) console.error(new Error(err.message || err));
                }
              }
            }
          }
        }


        function beforeRender(props) {
          currentComponent = this;
        }

        function afterRender() {
          if (currentComponent===this) {
            currentComponent = null;
          }
        }



        function Component$1(props, context, opts) {
          preact.Component.call(this, props, context);
          if (this.getInitialState) this.state = this.getInitialState();
          this.refs = {};
          this._refProxies = {};
          if (opts!==BYPASS_HOOK) {
            newComponentHook.call(this, props, context);
          }
        }
        Component$1.prototype = new preact.Component();
        extend(Component$1.prototype, {
          constructor: Component$1,

          isReactComponent: {},

          replaceState: function replaceState(state, callback) {
            var this$1 = this;

            this.setState(state, callback);
            for (var i in this.state) {
              if (!(i in state)) {
                delete this$1.state[i];
              }
            }
          },

          getDOMNode: function getDOMNode() {
            return this.base;
          },

          isMounted: function isMounted() {
            return !!this.base;
          }
        });



        function PureComponent(props, context) {
          Component$1.call(this, props, context);
        }
        PureComponent.prototype = new Component$1({}, {}, BYPASS_HOOK);
        PureComponent.prototype.shouldComponentUpdate = function(props, state) {
          return shallowDiffers(this.props, props) || shallowDiffers(this.state, state);
        };



        var index = {
          version: version,
          DOM: DOM,
          PropTypes: PropTypes,
          Children: Children,
          render: render$1$1,
          createClass: createClass,
          createFactory: createFactory,
          createElement: createElement,
          cloneElement: cloneElement$1,
          isValidElement: isValidElement,
          findDOMNode: findDOMNode,
          unmountComponentAtNode: unmountComponentAtNode,
          Component: Component$1,
          PureComponent: PureComponent,
          unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
        };

        return index;

      })));

        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38)))

      /***/ },
    /* 38 */
    /***/ function(module, exports) {

      // shim for using process in browser
      var process = module.exports = {};

      // cached from whatever global is present so that test runners that stub it
      // don't break things.  But we need to wrap it in a try catch in case it is
      // wrapped in strict mode code which doesn't define any globals.  It's inside a
      // function because try/catches deoptimize in certain engines.

      var cachedSetTimeout;
      var cachedClearTimeout;

      function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
      }
      function defaultClearTimeout () {
        throw new Error('clearTimeout has not been defined');
      }
      (function () {
        try {
          if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
          } else {
            cachedSetTimeout = defaultSetTimout;
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }
        try {
          if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
          } else {
            cachedClearTimeout = defaultClearTimeout;
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
        }
      } ())
      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }
        try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
        } catch(e){
          try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
          } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
          }
        }


      }
      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }
        try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
        } catch (e){
          try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
          } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
          }
        }



      }
      var queue = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;

      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }
        draining = false;
        if (currentQueue.length) {
          queue = currentQueue.concat(queue);
        } else {
          queueIndex = -1;
        }
        if (queue.length) {
          drainQueue();
        }
      }

      function drainQueue() {
        if (draining) {
          return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;

        var len = queue.length;
        while(len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }
          queueIndex = -1;
          len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }

      process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      };

      // v8 likes predictible objects
      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }
      Item.prototype.run = function () {
        this.fun.apply(null, this.array);
      };
      process.title = 'browser';
      process.browser = true;
      process.env = {};
      process.argv = [];
      process.version = ''; // empty string to avoid regexp issues
      process.versions = {};

      function noop() {}

      process.on = noop;
      process.addListener = noop;
      process.once = noop;
      process.off = noop;
      process.removeListener = noop;
      process.removeAllListeners = noop;
      process.emit = noop;

      process.binding = function (name) {
        throw new Error('process.binding is not supported');
      };

      process.cwd = function () { return '/' };
      process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
      };
      process.umask = function() { return 0; };


      /***/ },
    /* 39 */
    /***/ function(module, exports, __webpack_require__) {

      var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
        if (true) {
          !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, module], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {
          factory(exports, module);
        } else {
          var mod = {
            exports: {}
          };
          factory(mod.exports, mod);
          global.PropTypes = mod.exports;
        }
      })(this, function (exports, module) {

        'use strict';

        var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

        var ReactElement = {};

        ReactElement.isValidElement = function (object) {
          return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        };

        var ReactPropTypeLocationNames = {
          prop: 'prop',
          context: 'context',
          childContext: 'child context'
        };

        var emptyFunction = {
          thatReturns: function thatReturns(what) {
            return function () {
              return what;
            };
          }
        };

        var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = '@@iterator';
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === 'function') {
            return iteratorFn;
          }
        }

        var ANONYMOUS = '<<anonymous>>';

        var ReactPropTypes = {
          array: createPrimitiveTypeChecker('array'),
          bool: createPrimitiveTypeChecker('boolean'),
          func: createPrimitiveTypeChecker('function'),
          number: createPrimitiveTypeChecker('number'),
          object: createPrimitiveTypeChecker('object'),
          string: createPrimitiveTypeChecker('string'),

          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker
        };

        function createChainableTypeChecker(validate) {
          function checkType(isRequired, props, propName, componentName, location, propFullName) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (props[propName] == null) {
              var locationName = ReactPropTypeLocationNames[location];
              if (isRequired) {
                return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location, propFullName);
            }
          }

          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);

          return chainedCheckType;
        }

        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var locationName = ReactPropTypeLocationNames[location];

              var preciseType = getPreciseType(propValue);

              return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }

        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunction.thatReturns(null));
        }

        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var locationName = ReactPropTypeLocationNames[location];
              var propType = getPropType(propValue);
              return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
            }
            for (var i = 0; i < propValue.length; i++) {
              var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }

        function createElementTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            if (!ReactElement.isValidElement(props[propName])) {
              var locationName = ReactPropTypeLocationNames[location];
              return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }

        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var locationName = ReactPropTypeLocationNames[location];
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }

        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            return createChainableTypeChecker(function () {
              return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
            });
          }

          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for (var i = 0; i < expectedValues.length; i++) {
              if (propValue === expectedValues[i]) {
                return null;
              }
            }

            var locationName = ReactPropTypeLocationNames[location];
            var valuesString = JSON.stringify(expectedValues);
            return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
          }
          return createChainableTypeChecker(validate);
        }

        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') {
              var locationName = ReactPropTypeLocationNames[location];
              return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
            }
            for (var key in propValue) {
              if (propValue.hasOwnProperty(key)) {
                var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }

        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            return createChainableTypeChecker(function () {
              return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
            });
          }

          function validate(props, propName, componentName, location, propFullName) {
            for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
              var checker = arrayOfTypeCheckers[i];
              if (checker(props, propName, componentName, location, propFullName) == null) {
                return null;
              }
            }

            var locationName = ReactPropTypeLocationNames[location];
            return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
          }
          return createChainableTypeChecker(validate);
        }

        function createNodeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) {
              var locationName = ReactPropTypeLocationNames[location];
              return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }

        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') {
              var locationName = ReactPropTypeLocationNames[location];
              return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (!checker) {
                continue;
              }
              var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }

        function isNode(propValue) {
          switch (typeof propValue) {
            case 'number':
            case 'string':
            case 'undefined':
              return true;
            case 'boolean':
              return !propValue;
            case 'object':
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || ReactElement.isValidElement(propValue)) {
                return true;
              }

              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }

              return true;
            default:
              return false;
          }
        }

        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return 'array';
          }
          if (propValue instanceof RegExp) {
            return 'object';
          }
          return propType;
        }

        function getPreciseType(propValue) {
          var propType = getPropType(propValue);
          if (propType === 'object') {
            if (propValue instanceof Date) {
              return 'date';
            } else if (propValue instanceof RegExp) {
              return 'regexp';
            }
          }
          return propType;
        }

        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }

        module.exports = ReactPropTypes;
      });



      /***/ },
    /* 40 */
    /***/ function(module, exports, __webpack_require__) {

      !function(global, factory) {
        true ? factory(exports) : 'function' == typeof define && define.amd ? define([ 'exports' ], factory) : factory(global.preact = global.preact || {});
      }(this, function(exports) {
        function VNode(nodeName, attributes, children) {
          this.nodeName = nodeName;
          this.attributes = attributes;
          this.children = children;
          this.key = attributes && attributes.key;
        }
        function h(nodeName, attributes) {
          var lastSimple, child, simple, i, children = [];
          for (i = arguments.length; i-- > 2; ) stack.push(arguments[i]);
          if (attributes && attributes.children) {
            if (!stack.length) stack.push(attributes.children);
            delete attributes.children;
          }
          while (stack.length) if ((child = stack.pop()) instanceof Array) for (i = child.length; i--; ) stack.push(child[i]); else if (null != child && child !== !1) {
            if ('number' == typeof child || child === !0) child = String(child);
            simple = 'string' == typeof child;
            if (simple && lastSimple) children[children.length - 1] += child; else {
              children.push(child);
              lastSimple = simple;
            }
          }
          var p = new VNode(nodeName, attributes || void 0, children);
          if (options.vnode) options.vnode(p);
          return p;
        }
        function extend(obj, props) {
          if (props) for (var i in props) obj[i] = props[i];
          return obj;
        }
        function clone(obj) {
          return extend({}, obj);
        }
        function delve(obj, key) {
          for (var p = key.split('.'), i = 0; i < p.length && obj; i++) obj = obj[p[i]];
          return obj;
        }
        function isFunction(obj) {
          return 'function' == typeof obj;
        }
        function isString(obj) {
          return 'string' == typeof obj;
        }
        function hashToClassName(c) {
          var str = '';
          for (var prop in c) if (c[prop]) {
            if (str) str += ' ';
            str += prop;
          }
          return str;
        }
        function cloneElement(vnode, props) {
          return h(vnode.nodeName, extend(clone(vnode.attributes), props), arguments.length > 2 ? [].slice.call(arguments, 2) : vnode.children);
        }
        function createLinkedState(component, key, eventPath) {
          var path = key.split('.');
          return function(e) {
            var t = e && e.target || this, state = {}, obj = state, v = isString(eventPath) ? delve(e, eventPath) : t.nodeName ? t.type.match(/^che|rad/) ? t.checked : t.value : e, i = 0;
            for (;i < path.length - 1; i++) obj = obj[path[i]] || (obj[path[i]] = !i && component.state[path[i]] || {});
            obj[path[i]] = v;
            component.setState(state);
          };
        }
        function enqueueRender(component) {
          if (!component._dirty && (component._dirty = !0) && 1 == items.push(component)) (options.debounceRendering || defer)(rerender);
        }
        function rerender() {
          var p, list = items;
          items = [];
          while (p = list.pop()) if (p._dirty) renderComponent(p);
        }
        function isFunctionalComponent(vnode) {
          var nodeName = vnode && vnode.nodeName;
          return nodeName && isFunction(nodeName) && !(nodeName.prototype && nodeName.prototype.render);
        }
        function buildFunctionalComponent(vnode, context) {
          return vnode.nodeName(getNodeProps(vnode), context || EMPTY);
        }
        function isSameNodeType(node, vnode) {
          if (isString(vnode)) return node instanceof Text;
          if (isString(vnode.nodeName)) return !node._componentConstructor && isNamedNode(node, vnode.nodeName);
          if (isFunction(vnode.nodeName)) return (node._componentConstructor ? node._componentConstructor === vnode.nodeName : !0) || isFunctionalComponent(vnode); else ;
        }
        function isNamedNode(node, nodeName) {
          return node.normalizedNodeName === nodeName || toLowerCase(node.nodeName) === toLowerCase(nodeName);
        }
        function getNodeProps(vnode) {
          var props = clone(vnode.attributes);
          props.children = vnode.children;
          var defaultProps = vnode.nodeName.defaultProps;
          if (defaultProps) for (var i in defaultProps) if (void 0 === props[i]) props[i] = defaultProps[i];
          return props;
        }
        function removeNode(node) {
          var p = node.parentNode;
          if (p) p.removeChild(node);
        }
        function setAccessor(node, name, old, value, isSvg) {
          if ('className' === name) name = 'class';
          if ('class' === name && value && 'object' == typeof value) value = hashToClassName(value);
          if ('key' === name) ; else if ('class' === name && !isSvg) node.className = value || ''; else if ('style' === name) {
            if (!value || isString(value) || isString(old)) node.style.cssText = value || '';
            if (value && 'object' == typeof value) {
              if (!isString(old)) for (var i in old) if (!(i in value)) node.style[i] = '';
              for (var i in value) node.style[i] = 'number' == typeof value[i] && !NON_DIMENSION_PROPS[i] ? value[i] + 'px' : value[i];
            }
          } else if ('dangerouslySetInnerHTML' === name) node.innerHTML = value && value.__html || ''; else if ('o' == name[0] && 'n' == name[1]) {
            var l = node._listeners || (node._listeners = {});
            name = toLowerCase(name.substring(2));
            if (value) {
              if (!l[name]) node.addEventListener(name, eventProxy, !!NON_BUBBLING_EVENTS[name]);
            } else if (l[name]) node.removeEventListener(name, eventProxy, !!NON_BUBBLING_EVENTS[name]);
            l[name] = value;
          } else if ('list' !== name && 'type' !== name && !isSvg && name in node) {
            setProperty(node, name, null == value ? '' : value);
            if (null == value || value === !1) node.removeAttribute(name);
          } else {
            var ns = isSvg && name.match(/^xlink\:?(.+)/);
            if (null == value || value === !1) if (ns) node.removeAttributeNS('http://www.w3.org/1999/xlink', toLowerCase(ns[1])); else node.removeAttribute(name); else if ('object' != typeof value && !isFunction(value)) if (ns) node.setAttributeNS('http://www.w3.org/1999/xlink', toLowerCase(ns[1]), value); else node.setAttribute(name, value);
          }
        }
        function setProperty(node, name, value) {
          try {
            node[name] = value;
          } catch (e) {}
        }
        function eventProxy(e) {
          return this._listeners[e.type](options.event && options.event(e) || e);
        }
        function collectNode(node) {
          removeNode(node);
          if (node instanceof Element) {
            node._component = node._componentConstructor = null;
            var _name = node.normalizedNodeName || toLowerCase(node.nodeName);
            (nodes[_name] || (nodes[_name] = [])).push(node);
          }
        }
        function createNode(nodeName, isSvg) {
          var name = toLowerCase(nodeName), node = nodes[name] && nodes[name].pop() || (isSvg ? document.createElementNS('http://www.w3.org/2000/svg', nodeName) : document.createElement(nodeName));
          node.normalizedNodeName = name;
          return node;
        }
        function flushMounts() {
          var c;
          while (c = mounts.pop()) {
            if (options.afterMount) options.afterMount(c);
            if (c.componentDidMount) c.componentDidMount();
          }
        }
        function diff(dom, vnode, context, mountAll, parent, componentRoot) {
          if (!diffLevel++) {
            isSvgMode = parent instanceof SVGElement;
            hydrating = dom && !(ATTR_KEY in dom);
          }
          var ret = idiff(dom, vnode, context, mountAll);
          if (parent && ret.parentNode !== parent) parent.appendChild(ret);
          if (!--diffLevel) {
            hydrating = !1;
            if (!componentRoot) flushMounts();
          }
          return ret;
        }
        function idiff(dom, vnode, context, mountAll) {
          var originalAttributes = vnode && vnode.attributes;
          while (isFunctionalComponent(vnode)) vnode = buildFunctionalComponent(vnode, context);
          if (null == vnode) vnode = '';
          if (isString(vnode)) {
            if (dom && dom instanceof Text) {
              if (dom.nodeValue != vnode) dom.nodeValue = vnode;
            } else {
              if (dom) recollectNodeTree(dom);
              dom = document.createTextNode(vnode);
            }
            dom[ATTR_KEY] = !0;
            return dom;
          }
          if (isFunction(vnode.nodeName)) return buildComponentFromVNode(dom, vnode, context, mountAll);
          var out = dom, nodeName = String(vnode.nodeName), prevSvgMode = isSvgMode, vchildren = vnode.children;
          isSvgMode = 'svg' === nodeName ? !0 : 'foreignObject' === nodeName ? !1 : isSvgMode;
          if (!dom) out = createNode(nodeName, isSvgMode); else if (!isNamedNode(dom, nodeName)) {
            out = createNode(nodeName, isSvgMode);
            while (dom.firstChild) out.appendChild(dom.firstChild);
            if (dom.parentNode) dom.parentNode.replaceChild(out, dom);
            recollectNodeTree(dom);
          }
          var fc = out.firstChild, props = out[ATTR_KEY];
          if (!props) {
            out[ATTR_KEY] = props = {};
            for (var a = out.attributes, i = a.length; i--; ) props[a[i].name] = a[i].value;
          }
          diffAttributes(out, vnode.attributes, props);
          if (!hydrating && vchildren && 1 === vchildren.length && 'string' == typeof vchildren[0] && fc && fc instanceof Text && !fc.nextSibling) {
            if (fc.nodeValue != vchildren[0]) fc.nodeValue = vchildren[0];
          } else if (vchildren && vchildren.length || fc) innerDiffNode(out, vchildren, context, mountAll);
          if (originalAttributes && 'function' == typeof originalAttributes.ref) (props.ref = originalAttributes.ref)(out);
          isSvgMode = prevSvgMode;
          return out;
        }
        function innerDiffNode(dom, vchildren, context, mountAll) {
          var j, c, vchild, child, originalChildren = dom.childNodes, children = [], keyed = {}, keyedLen = 0, min = 0, len = originalChildren.length, childrenLen = 0, vlen = vchildren && vchildren.length;
          if (len) for (var i = 0; i < len; i++) {
            var _child = originalChildren[i], props = _child[ATTR_KEY], key = vlen ? (c = _child._component) ? c.__key : props ? props.key : null : null;
            if (null != key) {
              keyedLen++;
              keyed[key] = _child;
            } else if (hydrating || props) children[childrenLen++] = _child;
          }
          if (vlen) for (var i = 0; i < vlen; i++) {
            vchild = vchildren[i];
            child = null;
            var key = vchild.key;
            if (null != key) {
              if (keyedLen && key in keyed) {
                child = keyed[key];
                keyed[key] = void 0;
                keyedLen--;
              }
            } else if (!child && min < childrenLen) for (j = min; j < childrenLen; j++) {
              c = children[j];
              if (c && isSameNodeType(c, vchild)) {
                child = c;
                children[j] = void 0;
                if (j === childrenLen - 1) childrenLen--;
                if (j === min) min++;
                break;
              }
            }
            child = idiff(child, vchild, context, mountAll);
            if (child && child !== dom) if (i >= len) dom.appendChild(child); else if (child !== originalChildren[i]) {
              if (child === originalChildren[i + 1]) removeNode(originalChildren[i]);
              dom.insertBefore(child, originalChildren[i] || null);
            }
          }
          if (keyedLen) for (var i in keyed) if (keyed[i]) recollectNodeTree(keyed[i]);
          while (min <= childrenLen) {
            child = children[childrenLen--];
            if (child) recollectNodeTree(child);
          }
        }
        function recollectNodeTree(node, unmountOnly) {
          var component = node._component;
          if (component) unmountComponent(component, !unmountOnly); else {
            if (node[ATTR_KEY] && node[ATTR_KEY].ref) node[ATTR_KEY].ref(null);
            if (!unmountOnly) collectNode(node);
            var c;
            while (c = node.lastChild) recollectNodeTree(c, unmountOnly);
          }
        }
        function diffAttributes(dom, attrs, old) {
          for (var _name in old) if (!(attrs && _name in attrs) && null != old[_name]) setAccessor(dom, _name, old[_name], old[_name] = void 0, isSvgMode);
          if (attrs) for (var _name2 in attrs) if (!('children' === _name2 || 'innerHTML' === _name2 || _name2 in old && attrs[_name2] === ('value' === _name2 || 'checked' === _name2 ? dom[_name2] : old[_name2]))) setAccessor(dom, _name2, old[_name2], old[_name2] = attrs[_name2], isSvgMode);
        }
        function collectComponent(component) {
          var name = component.constructor.name, list = components[name];
          if (list) list.push(component); else components[name] = [ component ];
        }
        function createComponent(Ctor, props, context) {
          var inst = new Ctor(props, context), list = components[Ctor.name];
          Component.call(inst, props, context);
          if (list) for (var i = list.length; i--; ) if (list[i].constructor === Ctor) {
            inst.nextBase = list[i].nextBase;
            list.splice(i, 1);
            break;
          }
          return inst;
        }
        function setComponentProps(component, props, opts, context, mountAll) {
          if (!component._disable) {
            component._disable = !0;
            if (component.__ref = props.ref) delete props.ref;
            if (component.__key = props.key) delete props.key;
            if (!component.base || mountAll) {
              if (component.componentWillMount) component.componentWillMount();
            } else if (component.componentWillReceiveProps) component.componentWillReceiveProps(props, context);
            if (context && context !== component.context) {
              if (!component.prevContext) component.prevContext = component.context;
              component.context = context;
            }
            if (!component.prevProps) component.prevProps = component.props;
            component.props = props;
            component._disable = !1;
            if (0 !== opts) if (1 === opts || options.syncComponentUpdates !== !1 || !component.base) renderComponent(component, 1, mountAll); else enqueueRender(component);
            if (component.__ref) component.__ref(component);
          }
        }
        function renderComponent(component, opts, mountAll, isChild) {
          if (!component._disable) {
            var skip, rendered, inst, cbase, props = component.props, state = component.state, context = component.context, previousProps = component.prevProps || props, previousState = component.prevState || state, previousContext = component.prevContext || context, isUpdate = component.base, nextBase = component.nextBase, initialBase = isUpdate || nextBase, initialChildComponent = component._component;
            if (isUpdate) {
              component.props = previousProps;
              component.state = previousState;
              component.context = previousContext;
              if (2 !== opts && component.shouldComponentUpdate && component.shouldComponentUpdate(props, state, context) === !1) skip = !0; else if (component.componentWillUpdate) component.componentWillUpdate(props, state, context);
              component.props = props;
              component.state = state;
              component.context = context;
            }
            component.prevProps = component.prevState = component.prevContext = component.nextBase = null;
            component._dirty = !1;
            if (!skip) {
              if (component.render) rendered = component.render(props, state, context);
              if (component.getChildContext) context = extend(clone(context), component.getChildContext());
              while (isFunctionalComponent(rendered)) rendered = buildFunctionalComponent(rendered, context);
              var toUnmount, base, childComponent = rendered && rendered.nodeName;
              if (isFunction(childComponent)) {
                var childProps = getNodeProps(rendered);
                inst = initialChildComponent;
                if (inst && inst.constructor === childComponent && childProps.key == inst.__key) setComponentProps(inst, childProps, 1, context); else {
                  toUnmount = inst;
                  inst = createComponent(childComponent, childProps, context);
                  inst.nextBase = inst.nextBase || nextBase;
                  inst._parentComponent = component;
                  component._component = inst;
                  setComponentProps(inst, childProps, 0, context);
                  renderComponent(inst, 1, mountAll, !0);
                }
                base = inst.base;
              } else {
                cbase = initialBase;
                toUnmount = initialChildComponent;
                if (toUnmount) cbase = component._component = null;
                if (initialBase || 1 === opts) {
                  if (cbase) cbase._component = null;
                  base = diff(cbase, rendered, context, mountAll || !isUpdate, initialBase && initialBase.parentNode, !0);
                }
              }
              if (initialBase && base !== initialBase && inst !== initialChildComponent) {
                var baseParent = initialBase.parentNode;
                if (baseParent && base !== baseParent) {
                  baseParent.replaceChild(base, initialBase);
                  if (!toUnmount) {
                    initialBase._component = null;
                    recollectNodeTree(initialBase);
                  }
                }
              }
              if (toUnmount) unmountComponent(toUnmount, base !== initialBase);
              component.base = base;
              if (base && !isChild) {
                var componentRef = component, t = component;
                while (t = t._parentComponent) (componentRef = t).base = base;
                base._component = componentRef;
                base._componentConstructor = componentRef.constructor;
              }
            }
            if (!isUpdate || mountAll) mounts.unshift(component); else if (!skip) {
              if (component.componentDidUpdate) component.componentDidUpdate(previousProps, previousState, previousContext);
              if (options.afterUpdate) options.afterUpdate(component);
            }
            var fn, cb = component._renderCallbacks;
            if (cb) while (fn = cb.pop()) fn.call(component);
            if (!diffLevel && !isChild) flushMounts();
          }
        }
        function buildComponentFromVNode(dom, vnode, context, mountAll) {
          var c = dom && dom._component, oldDom = dom, isDirectOwner = c && dom._componentConstructor === vnode.nodeName, isOwner = isDirectOwner, props = getNodeProps(vnode);
          while (c && !isOwner && (c = c._parentComponent)) isOwner = c.constructor === vnode.nodeName;
          if (c && isOwner && (!mountAll || c._component)) {
            setComponentProps(c, props, 3, context, mountAll);
            dom = c.base;
          } else {
            if (c && !isDirectOwner) {
              unmountComponent(c, !0);
              dom = oldDom = null;
            }
            c = createComponent(vnode.nodeName, props, context);
            if (dom && !c.nextBase) {
              c.nextBase = dom;
              oldDom = null;
            }
            setComponentProps(c, props, 1, context, mountAll);
            dom = c.base;
            if (oldDom && dom !== oldDom) {
              oldDom._component = null;
              recollectNodeTree(oldDom);
            }
          }
          return dom;
        }
        function unmountComponent(component, remove) {
          if (options.beforeUnmount) options.beforeUnmount(component);
          var base = component.base;
          component._disable = !0;
          if (component.componentWillUnmount) component.componentWillUnmount();
          component.base = null;
          var inner = component._component;
          if (inner) unmountComponent(inner, remove); else if (base) {
            if (base[ATTR_KEY] && base[ATTR_KEY].ref) base[ATTR_KEY].ref(null);
            component.nextBase = base;
            if (remove) {
              removeNode(base);
              collectComponent(component);
            }
            var c;
            while (c = base.lastChild) recollectNodeTree(c, !remove);
          }
          if (component.__ref) component.__ref(null);
          if (component.componentDidUnmount) component.componentDidUnmount();
        }
        function Component(props, context) {
          this._dirty = !0;
          this.context = context;
          this.props = props;
          if (!this.state) this.state = {};
        }
        function render(vnode, parent, merge) {
          return diff(merge, vnode, {}, !1, parent);
        }
        var options = {};
        var stack = [];
        var lcCache = {};
        var toLowerCase = function(s) {
          return lcCache[s] || (lcCache[s] = s.toLowerCase());
        };
        var resolved = 'undefined' != typeof Promise && Promise.resolve();
        var defer = resolved ? function(f) {
          resolved.then(f);
        } : setTimeout;
        var EMPTY = {};
        var ATTR_KEY = 'undefined' != typeof Symbol ? Symbol.for('preactattr') : '__preactattr_';
        var NON_DIMENSION_PROPS = {
          boxFlex: 1,
          boxFlexGroup: 1,
          columnCount: 1,
          fillOpacity: 1,
          flex: 1,
          flexGrow: 1,
          flexPositive: 1,
          flexShrink: 1,
          flexNegative: 1,
          fontWeight: 1,
          lineClamp: 1,
          lineHeight: 1,
          opacity: 1,
          order: 1,
          orphans: 1,
          strokeOpacity: 1,
          widows: 1,
          zIndex: 1,
          zoom: 1
        };
        var NON_BUBBLING_EVENTS = {
          blur: 1,
          error: 1,
          focus: 1,
          load: 1,
          resize: 1,
          scroll: 1
        };
        var items = [];
        var nodes = {};
        var mounts = [];
        var diffLevel = 0;
        var isSvgMode = !1;
        var hydrating = !1;
        var components = {};
        extend(Component.prototype, {
          linkState: function(key, eventPath) {
            var c = this._linkedStates || (this._linkedStates = {});
            return c[key + eventPath] || (c[key + eventPath] = createLinkedState(this, key, eventPath));
          },
          setState: function(state, callback) {
            var s = this.state;
            if (!this.prevState) this.prevState = clone(s);
            extend(s, isFunction(state) ? state(s, this.props) : state);
            if (callback) (this._renderCallbacks = this._renderCallbacks || []).push(callback);
            enqueueRender(this);
          },
          forceUpdate: function() {
            renderComponent(this, 2);
          },
          render: function() {}
        });
        exports.h = h;
        exports.cloneElement = cloneElement;
        exports.Component = Component;
        exports.render = render;
        exports.rerender = rerender;
        exports.options = options;
      });


      /***/ },
    /* 41 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ReactSurveyModel = undefined;

        var _survey = __webpack_require__(31);

        var ReactSurveyModel = exports.ReactSurveyModel = function (_super) {
          __extends(ReactSurveyModel, _super);
          function ReactSurveyModel(jsonObj) {
            if (jsonObj === void 0) {
              jsonObj = null;
            }
            _super.call(this, jsonObj);
          }
          ReactSurveyModel.prototype.render = function () {
            if (this.renderCallback) {
              this.renderCallback();
            }
          };
          ReactSurveyModel.prototype.mergeCss = function (src, dest) {
            this.mergeValues(src, dest);
          };
          ReactSurveyModel.prototype.onLoadSurveyFromService = function () {
            this.render();
          };
          ReactSurveyModel.prototype.onLoadingSurveyFromService = function () {
            this.render();
          };
          return ReactSurveyModel;
        }(_survey.SurveyModel);
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 42 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SurveyRow = exports.SurveyPage = undefined;

        var _react = __webpack_require__(37);

        var React = _interopRequireWildcard(_react);

        var _reactquestion = __webpack_require__(43);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

        var SurveyPage = exports.SurveyPage = function (_super) {
          __extends(SurveyPage, _super);
          function SurveyPage(props) {
            _super.call(this, props);
            this.page = props.page;
            this.survey = props.survey;
            this.creator = props.creator;
            this.css = props.css;
          }
          SurveyPage.prototype.componentWillReceiveProps = function (nextProps) {
            this.page = nextProps.page;
            this.survey = nextProps.survey;
            this.creator = nextProps.creator;
            this.css = nextProps.css;
          };
          SurveyPage.prototype.render = function () {
            if (this.page == null || this.survey == null || this.creator == null) return null;
            var title = this.renderTitle();
            var rows = [];
            var questionRows = this.page.rows;
            for (var i = 0; i < questionRows.length; i++) {
              rows.push(this.createRow(questionRows[i], i));
            }
            return React.createElement("div", null, title, rows);
          };
          SurveyPage.prototype.createRow = function (row, index) {
            var rowName = "row" + (index + 1);
            return React.createElement(SurveyRow, { key: rowName, row: row, survey: this.survey, creator: this.creator, css: this.css });
          };
          SurveyPage.prototype.renderTitle = function () {
            if (!this.page.title || !this.survey.showPageTitles) return null;
            var text = this.page.processedTitle;
            if (this.page.num > 0) {
              text = this.page.num + ". " + text;
            }
            return React.createElement("h4", { className: this.css.pageTitle }, text);
          };
          return SurveyPage;
        }(React.Component);
        var SurveyRow = exports.SurveyRow = function (_super) {
          __extends(SurveyRow, _super);
          function SurveyRow(props) {
            _super.call(this, props);
            this.setProperties(props);
          }
          SurveyRow.prototype.componentWillReceiveProps = function (nextProps) {
            this.setProperties(nextProps);
          };
          SurveyRow.prototype.setProperties = function (props) {
            this.row = props.row;
            if (this.row) {
              var self = this;
              this.row.visibilityChangedCallback = function () {
                self.setState({ visible: self.row.visible });
              };
            }
            this.survey = props.survey;
            this.creator = props.creator;
            this.css = props.css;
          };
          SurveyRow.prototype.render = function () {
            if (this.row == null || this.survey == null || this.creator == null) return null;
            if (!this.row.visible) return null;
            var questions = [];
            for (var i = 0; i < this.row.questions.length; i++) {
              var question = this.row.questions[i];
              questions.push(this.createQuestion(question));
            }
            return React.createElement("div", { className: this.css.row }, questions);
          };
          SurveyRow.prototype.createQuestion = function (question) {
            return React.createElement(_reactquestion.SurveyQuestion, { key: question.name, question: question, creator: this.creator, css: this.css });
          };
          return SurveyRow;
        }(React.Component);
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 43 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SurveyQuestionErrors = exports.SurveyQuestion = undefined;

        var _react = __webpack_require__(37);

        var React = _interopRequireWildcard(_react);

        var _question = __webpack_require__(13);

        var _reactquestioncomment = __webpack_require__(44);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

        var SurveyQuestion = exports.SurveyQuestion = function (_super) {
          __extends(SurveyQuestion, _super);
          function SurveyQuestion(props) {
            _super.call(this, props);
            this.setQuestion(props.question);
            this.creator = props.creator;
            this.css = props.css;
          }
          SurveyQuestion.prototype.componentWillReceiveProps = function (nextProps) {
            this.creator = nextProps.creator;
            this.css = nextProps.css;
            this.setQuestion(nextProps.question);
          };
          SurveyQuestion.prototype.setQuestion = function (question) {
            this.questionBase = question;
            this.question = question instanceof _question.Question ? question : null;
            var value = this.question ? this.question.value : null;
            this.state = {
              visible: this.questionBase.visible, value: value, error: 0, renderWidth: 0,
              visibleIndexValue: -1
            };
          };
          SurveyQuestion.prototype.componentDidMount = function () {
            if (this.questionBase) {
              var self = this;
              this.questionBase["react"] = self;
              this.questionBase.renderWidthChangedCallback = function () {
                self.state.renderWidth = self.state.renderWidth + 1;
                self.setState(self.state);
              };
              this.questionBase.visibleIndexChangedCallback = function () {
                self.state.visibleIndexValue = self.questionBase.visibleIndex;
                self.setState(self.state);
              };
            }
          };
          SurveyQuestion.prototype.componentWillUnmount = function () {
            if (this.questionBase) {
              this.questionBase["react"] = null;
              this.questionBase.renderWidthChangedCallback = null;
              this.questionBase.visibleIndexChangedCallback = null;
            }
          };
          SurveyQuestion.prototype.render = function () {
            if (!this.questionBase || !this.creator) return null;
            if (!this.questionBase.visible) return null;
            var questionRender = this.creator.createQuestionElement(this.questionBase);
            var title = this.questionBase.hasTitle ? this.renderTitle() : null;
            var titleTop = this.creator.questionTitleLocation() == "top" ? title : null;
            var titleBottom = this.creator.questionTitleLocation() == "bottom" ? title : null;
            var comment = this.question && this.question.hasComment ? this.renderComment() : null;
            var errors = this.renderErrors();
            var marginLeft = this.questionBase.indent > 0 ? this.questionBase.indent * this.css.question.indent + "px" : null;
            var paddingRight = this.questionBase.rightIndent > 0 ? this.questionBase.rightIndent * this.css.question.indent + "px" : null;
            var rootStyle = { display: 'inline-block', verticalAlign: 'top' };
            if (this.questionBase.renderWidth) rootStyle["width"] = this.questionBase.renderWidth;
            if (marginLeft) rootStyle["marginLeft"] = marginLeft;
            if (paddingRight) rootStyle["paddingRight"] = paddingRight;
            return React.createElement("div", { id: this.questionBase.id, className: this.css.question.root, style: rootStyle }, titleTop, errors, questionRender, comment, titleBottom);
          };
          SurveyQuestion.prototype.renderTitle = function () {
            var titleText = this.question.fullTitle;
            return React.createElement("h5", { className: this.css.question.title }, titleText);
          };
          SurveyQuestion.prototype.renderComment = function () {
            return React.createElement("div", null, React.createElement("div", null, this.question.commentText), React.createElement("div", { className: this.css.question.comment }, React.createElement(_reactquestioncomment.SurveyQuestionCommentItem, { question: this.question })));
          };
          SurveyQuestion.prototype.renderErrors = function () {
            return React.createElement(SurveyQuestionErrors, { question: this.question, css: this.css, creator: this.creator });
          };
          return SurveyQuestion;
        }(React.Component);
        var SurveyQuestionErrors = exports.SurveyQuestionErrors = function (_super) {
          __extends(SurveyQuestionErrors, _super);
          function SurveyQuestionErrors(props) {
            _super.call(this, props);
            this.setQuestion(props.question);
            this.creator = props.creator;
            this.css = props.css;
          }
          SurveyQuestionErrors.prototype.componentWillReceiveProps = function (nextProps) {
            this.setQuestion(nextProps.question);
            this.creator = nextProps.creator;
            this.css = nextProps.css;
          };
          SurveyQuestionErrors.prototype.setQuestion = function (question) {
            this.question = question instanceof _question.Question ? question : null;
            if (this.question) {
              var self = this;
              this.question.errorsChangedCallback = function () {
                self.state.error = self.state.error + 1;
                self.setState(self.state);
              };
            }
            this.state = { error: 0 };
          };
          SurveyQuestionErrors.prototype.render = function () {
            if (!this.question || this.question.errors.length == 0) return null;
            var errors = [];
            for (var i = 0; i < this.question.errors.length; i++) {
              var errorText = this.question.errors[i].getText();
              var key = "error" + i;
              errors.push(this.creator.renderError(key, errorText));
            }
            return React.createElement("div", { className: this.css.error.root }, errors);
          };
          return SurveyQuestionErrors;
        }(React.Component);
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 44 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SurveyQuestionCommentItem = exports.SurveyQuestionComment = undefined;

        var _react = __webpack_require__(37);

        var React = _interopRequireWildcard(_react);

        var _reactquestionfactory = __webpack_require__(45);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

        var SurveyQuestionComment = exports.SurveyQuestionComment = function (_super) {
          __extends(SurveyQuestionComment, _super);
          function SurveyQuestionComment(props) {
            _super.call(this, props);
            this.question = props.question;
            this.css = props.css;
            this.state = { value: this.question.value };
            this.handleOnChange = this.handleOnChange.bind(this);
          }
          SurveyQuestionComment.prototype.handleOnChange = function (event) {
            this.question.value = event.target.value;
            this.setState({ value: this.question.value });
          };
          SurveyQuestionComment.prototype.componentWillReceiveProps = function (nextProps) {
            this.question = nextProps.question;
          };
          SurveyQuestionComment.prototype.render = function () {
            if (!this.question) return null;
            return React.createElement("textarea", { id: this.question.inputId, className: this.css, type: "text", value: this.state.value, onChange: this.handleOnChange, cols: this.question.cols, rows: this.question.rows });
          };
          return SurveyQuestionComment;
        }(React.Component);
        var SurveyQuestionCommentItem = exports.SurveyQuestionCommentItem = function (_super) {
          __extends(SurveyQuestionCommentItem, _super);
          function SurveyQuestionCommentItem(props) {
            _super.call(this, props);
            this.question = props.question;
            this.css = props.css;
            this.comment = this.question.comment;
            this.state = { value: this.comment };
            this.handleOnChange = this.handleOnChange.bind(this);
            this.handleOnBlur = this.handleOnBlur.bind(this);
          }
          SurveyQuestionCommentItem.prototype.handleOnChange = function (event) {
            this.comment = event.target.value;
            this.setState({ value: this.comment });
          };
          SurveyQuestionCommentItem.prototype.handleOnBlur = function (event) {
            this.question.comment = this.comment;
          };
          SurveyQuestionCommentItem.prototype.componentWillReceiveProps = function (nextProps) {
            this.question = nextProps.question;
          };
          SurveyQuestionCommentItem.prototype.render = function () {
            if (!this.question) return null;
            return React.createElement("input", { type: "text", className: this.css.question.comment, value: this.state.value, onChange: this.handleOnChange, onBlur: this.handleOnBlur });
          };
          return SurveyQuestionCommentItem;
        }(React.Component);
        _reactquestionfactory.ReactQuestionFactory.Instance.registerQuestion("comment", function (props) {
          return React.createElement(SurveyQuestionComment, props);
        });
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 45 */
    /***/ function(module, exports) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var ReactQuestionFactory = exports.ReactQuestionFactory = function () {
        function ReactQuestionFactory() {
          this.creatorHash = {};
        }
        ReactQuestionFactory.prototype.registerQuestion = function (questionType, questionCreator) {
          this.creatorHash[questionType] = questionCreator;
        };
        ReactQuestionFactory.prototype.getAllTypes = function () {
          var result = new Array();
          for (var key in this.creatorHash) {
            result.push(key);
          }
          return result.sort();
        };
        ReactQuestionFactory.prototype.createQuestion = function (questionType, params) {
          var creator = this.creatorHash[questionType];
          if (creator == null) return null;
          return creator(params);
        };
        ReactQuestionFactory.Instance = new ReactQuestionFactory();
        ReactQuestionFactory.DefaultChoices = ["one", "two|second value", "three|third value"];
        return ReactQuestionFactory;
      }();

      /***/ },
    /* 46 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SurveyNavigation = undefined;

        var _react = __webpack_require__(37);

        var React = _interopRequireWildcard(_react);

        var _reactSurveyNavigationBase = __webpack_require__(47);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

        var SurveyNavigation = exports.SurveyNavigation = function (_super) {
          __extends(SurveyNavigation, _super);
          function SurveyNavigation(props) {
            _super.call(this, props);
            this.handlePrevClick = this.handlePrevClick.bind(this);
            this.handleNextClick = this.handleNextClick.bind(this);
            this.handleCompleteClick = this.handleCompleteClick.bind(this);
          }
          SurveyNavigation.prototype.handlePrevClick = function (event) {
            this.survey.prevPage();
          };
          SurveyNavigation.prototype.handleNextClick = function (event) {
            this.survey.nextPage();
          };
          SurveyNavigation.prototype.handleCompleteClick = function (event) {
            this.survey.completeLastPage();
          };
          SurveyNavigation.prototype.render = function () {
            if (!this.survey) return null;
            var prevButton = !this.survey.isFirstPage ? this.renderButton(this.handlePrevClick, this.survey.pagePrevText, this.css.navigation.prev) : null;
            var nextButton = !this.survey.isLastPage ? this.renderButton(this.handleNextClick, this.survey.pageNextText, this.css.navigation.next) : null;
            var completeButton = this.survey.isLastPage ? this.renderButton(this.handleCompleteClick, this.survey.completeText, this.css.navigation.complete) : null;
            return React.createElement("div", { className: this.css.footer }, prevButton, nextButton, completeButton);
          };
          SurveyNavigation.prototype.renderButton = function (click, text, btnClassName) {
            var style = { marginRight: "5px" };
            var className = this.css.navigationButton + (btnClassName ? ' ' + btnClassName : "");
            return React.createElement("input", { className: className, style: style, type: "button", onClick: click, value: text });
          };
          return SurveyNavigation;
        }(_reactSurveyNavigationBase.SurveyNavigationBase);
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 47 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SurveyNavigationBase = undefined;

        var _react = __webpack_require__(37);

        var React = _interopRequireWildcard(_react);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

        var SurveyNavigationBase = exports.SurveyNavigationBase = function (_super) {
          __extends(SurveyNavigationBase, _super);
          function SurveyNavigationBase(props) {
            _super.call(this, props);
            this.updateStateFunction = null;
            this.survey = props.survey;
            this.css = props.css;
            this.state = { update: 0 };
          }
          SurveyNavigationBase.prototype.componentWillReceiveProps = function (nextProps) {
            this.survey = nextProps.survey;
            this.css = nextProps.css;
          };
          SurveyNavigationBase.prototype.componentDidMount = function () {
            if (this.survey) {
              var self = this;
              this.updateStateFunction = function () {
                self.state.update = self.state.update + 1;
                self.setState(self.state);
              };
              this.survey.onPageVisibleChanged.add(this.updateStateFunction);
            }
          };
          SurveyNavigationBase.prototype.componentWillUnmount = function () {
            if (this.survey && this.updateStateFunction) {
              this.survey.onPageVisibleChanged.remove(this.updateStateFunction);
              this.updateStateFunction = null;
            }
          };
          return SurveyNavigationBase;
        }(React.Component);
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 48 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SurveyProgress = undefined;

        var _react = __webpack_require__(37);

        var React = _interopRequireWildcard(_react);

        var _reactSurveyNavigationBase = __webpack_require__(47);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

        var SurveyProgress = exports.SurveyProgress = function (_super) {
          __extends(SurveyProgress, _super);
          function SurveyProgress(props) {
            _super.call(this, props);
            this.isTop = props.isTop;
          }
          SurveyProgress.prototype.componentWillReceiveProps = function (nextProps) {
            _super.prototype.componentWillReceiveProps.call(this, nextProps);
            this.isTop = nextProps.isTop;
          };
          Object.defineProperty(SurveyProgress.prototype, "progress", {
            get: function get() {
              return this.survey.getProgress();
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(SurveyProgress.prototype, "progressText", {
            get: function get() {
              return this.survey.progressText;
            },
            enumerable: true,
            configurable: true
          });
          SurveyProgress.prototype.render = function () {
            var style = this.isTop ? { width: "60%" } : { width: "60%", marginTop: "10px" };
            var progressStyle = { width: this.progress + "%" };
            return React.createElement("div", { className: this.css.progress, style: style }, React.createElement("div", { style: progressStyle, className: this.css.progressBar, role: "progressbar", "aria-valuemin": "0", "aria-valuemax": "100" }, React.createElement("span", null, this.progressText)));
          };
          return SurveyProgress;
        }(_reactSurveyNavigationBase.SurveyNavigationBase);
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 49 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SurveyQuestionCheckboxItem = exports.SurveyQuestionCheckbox = undefined;

        var _react = __webpack_require__(37);

        var React = _interopRequireWildcard(_react);

        var _reactquestioncomment = __webpack_require__(44);

        var _reactquestionfactory = __webpack_require__(45);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

        var SurveyQuestionCheckbox = exports.SurveyQuestionCheckbox = function (_super) {
          __extends(SurveyQuestionCheckbox, _super);
          function SurveyQuestionCheckbox(props) {
            _super.call(this, props);
            this.question = props.question;
            this.css = props.css;
            this.rootCss = props.rootCss;
            this.state = { choicesChanged: 0 };
            var self = this;
            this.question.choicesChangedCallback = function () {
              self.state.choicesChanged = self.state.choicesChanged + 1;
              self.setState(self.state);
            };
          }
          SurveyQuestionCheckbox.prototype.componentWillReceiveProps = function (nextProps) {
            this.question = nextProps.question;
            this.css = nextProps.css;
            this.rootCss = nextProps.rootCss;
          };
          SurveyQuestionCheckbox.prototype.render = function () {
            if (!this.question) return null;
            return React.createElement("form", { className: this.css.root }, this.getItems());
          };
          SurveyQuestionCheckbox.prototype.getItems = function () {
            var items = [];
            for (var i = 0; i < this.question.visibleChoices.length; i++) {
              var item = this.question.visibleChoices[i];
              var key = "item" + i;
              items.push(this.renderItem(key, item, i == 0));
            }
            return items;
          };
          Object.defineProperty(SurveyQuestionCheckbox.prototype, "textStyle", {
            get: function get() {
              return null;
            },
            enumerable: true,
            configurable: true
          });
          SurveyQuestionCheckbox.prototype.renderItem = function (key, item, isFirst) {
            return React.createElement(SurveyQuestionCheckboxItem, { key: key, question: this.question, css: this.css, rootCss: this.rootCss, item: item, textStyle: this.textStyle, isFirst: isFirst });
          };
          return SurveyQuestionCheckbox;
        }(React.Component);
        var SurveyQuestionCheckboxItem = exports.SurveyQuestionCheckboxItem = function (_super) {
          __extends(SurveyQuestionCheckboxItem, _super);
          function SurveyQuestionCheckboxItem(props) {
            _super.call(this, props);
            this.item = props.item;
            this.question = props.question;
            this.css = props.css;
            this.rootCss = props.rootCss;
            this.textStyle = props.textStyle;
            this.isFirst = props.isFirst;
            this.handleOnChange = this.handleOnChange.bind(this);
          }
          SurveyQuestionCheckboxItem.prototype.componentWillReceiveProps = function (nextProps) {
            this.item = nextProps.item;
            this.css = nextProps.css;
            this.rootCss = nextProps.rootCss;
            this.textStyle = nextProps.textStyle;
            this.question = nextProps.question;
            this.isFirst = nextProps.isFirst;
          };
          SurveyQuestionCheckboxItem.prototype.handleOnChange = function (event) {
            var newValue = this.question.value;
            if (!newValue) {
              newValue = [];
            }
            var index = newValue.indexOf(this.item.value);
            if (event.target.checked) {
              if (index < 0) {
                newValue.push(this.item.value);
              }
            } else {
              if (index > -1) {
                newValue.splice(index, 1);
              }
            }
            this.question.value = newValue;
            this.setState({ value: this.question.value });
          };
          SurveyQuestionCheckboxItem.prototype.render = function () {
            if (!this.item || !this.question) return null;
            var itemWidth = this.question.colCount > 0 ? 100 / this.question.colCount + "%" : "";
            var marginRight = this.question.colCount == 0 ? "5px" : "0px";
            var divStyle = { marginRight: marginRight };
            if (itemWidth) {
              divStyle["width"] = itemWidth;
            }
            var isChecked = this.question.value && this.question.value.indexOf(this.item.value) > -1 || false;
            var otherItem = this.item.value === this.question.otherItem.value && isChecked ? this.renderOther() : null;
            return this.renderCheckbox(isChecked, divStyle, otherItem);
          };
          Object.defineProperty(SurveyQuestionCheckboxItem.prototype, "inputStyle", {
            get: function get() {
              return { marginRight: "3px" };
            },
            enumerable: true,
            configurable: true
          });
          SurveyQuestionCheckboxItem.prototype.renderCheckbox = function (isChecked, divStyle, otherItem) {
            var id = this.isFirst ? this.question.inputId : null;
            return React.createElement("div", { className: this.css.item, style: divStyle }, React.createElement("label", { className: this.css.item }, React.createElement("input", { type: "checkbox", id: id, style: this.inputStyle, checked: isChecked, onChange: this.handleOnChange }), React.createElement("span", null, this.item.text)), otherItem);
          };
          SurveyQuestionCheckboxItem.prototype.renderOther = function () {
            return React.createElement("div", { className: this.css.other }, React.createElement(_reactquestioncomment.SurveyQuestionCommentItem, { question: this.question, css: this.rootCss }));
          };
          return SurveyQuestionCheckboxItem;
        }(React.Component);
        _reactquestionfactory.ReactQuestionFactory.Instance.registerQuestion("checkbox", function (props) {
          return React.createElement(SurveyQuestionCheckbox, props);
        });
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 50 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SurveyQuestionDropdown = undefined;

        var _react = __webpack_require__(37);

        var React = _interopRequireWildcard(_react);

        var _reactquestioncomment = __webpack_require__(44);

        var _reactquestionfactory = __webpack_require__(45);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

        var SurveyQuestionDropdown = exports.SurveyQuestionDropdown = function (_super) {
          __extends(SurveyQuestionDropdown, _super);
          function SurveyQuestionDropdown(props) {
            _super.call(this, props);
            this.question = props.question;
            this.css = props.css;
            this.rootCss = props.rootCss;
            this.state = { value: this.question.value, choicesChanged: 0 };
            var self = this;
            this.question.choicesChangedCallback = function () {
              self.state.choicesChanged = self.state.choicesChanged + 1;
              self.setState(self.state);
            };
            this.handleOnChange = this.handleOnChange.bind(this);
          }
          SurveyQuestionDropdown.prototype.handleOnChange = function (event) {
            this.question.value = event.target.value;
            this.setState({ value: this.question.value });
          };
          SurveyQuestionDropdown.prototype.componentWillReceiveProps = function (nextProps) {
            this.question = nextProps.question;
            this.css = nextProps.css;
            this.rootCss = nextProps.rootCss;
          };
          SurveyQuestionDropdown.prototype.render = function () {
            if (!this.question) return null;
            var options = [];
            for (var i = 0; i < this.question.visibleChoices.length; i++) {
              var item = this.question.visibleChoices[i];
              var key = "item" + i;
              var option = React.createElement("option", { key: key, value: item.value }, item.text);
              options.push(option);
            }
            var comment = this.question.value === this.question.otherItem.value ? this.renderOther() : null;
            return React.createElement("div", null, React.createElement("select", { id: this.question.inputId, className: this.css, value: this.state.value, onChange: this.handleOnChange }, React.createElement("option", { value: "" }, this.question.optionsCaption), options), comment);
          };
          SurveyQuestionDropdown.prototype.renderOther = function () {
            var style = { marginTop: "3px" };
            return React.createElement("div", { style: style }, React.createElement(_reactquestioncomment.SurveyQuestionCommentItem, { question: this.question, css: this.rootCss }));
          };
          return SurveyQuestionDropdown;
        }(React.Component);
        _reactquestionfactory.ReactQuestionFactory.Instance.registerQuestion("dropdown", function (props) {
          return React.createElement(SurveyQuestionDropdown, props);
        });
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 51 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SurveyQuestionMatrixDropdownRow = exports.SurveyQuestionMatrixDropdown = undefined;

        var _react = __webpack_require__(37);

        var React = _interopRequireWildcard(_react);

        var _reactquestion = __webpack_require__(43);

        var _reactquestionfactory = __webpack_require__(45);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

        var SurveyQuestionMatrixDropdown = exports.SurveyQuestionMatrixDropdown = function (_super) {
          __extends(SurveyQuestionMatrixDropdown, _super);
          function SurveyQuestionMatrixDropdown(props) {
            _super.call(this, props);
            this.setProperties(props);
          }
          SurveyQuestionMatrixDropdown.prototype.componentWillReceiveProps = function (nextProps) {
            this.setProperties(nextProps);
          };
          SurveyQuestionMatrixDropdown.prototype.setProperties = function (nextProps) {
            this.question = nextProps.question;
            this.css = nextProps.css;
            this.rootCss = nextProps.rootCss;
            this.creator = nextProps.creator;
          };
          SurveyQuestionMatrixDropdown.prototype.render = function () {
            if (!this.question) return null;
            var headers = [];
            for (var i = 0; i < this.question.columns.length; i++) {
              var column = this.question.columns[i];
              var key = "column" + i;
              var minWidth = this.question.getColumnWidth(column);
              var columnStyle = minWidth ? { minWidth: minWidth } : {};
              headers.push(React.createElement("th", { key: key, style: columnStyle }, this.question.getColumnTitle(column)));
            }
            var rows = [];
            var visibleRows = this.question.visibleRows;
            for (var i = 0; i < visibleRows.length; i++) {
              var row = visibleRows[i];
              var key = "row" + i;
              rows.push(React.createElement(SurveyQuestionMatrixDropdownRow, { key: key, row: row, css: this.css, rootCss: this.rootCss, creator: this.creator }));
            }
            var divStyle = this.question.horizontalScroll ? { overflowX: 'scroll' } : {};
            return React.createElement("div", { style: divStyle }, React.createElement("table", { className: this.css.root }, React.createElement("thead", null, React.createElement("tr", null, React.createElement("th", null), headers)), React.createElement("tbody", null, rows)));
          };
          return SurveyQuestionMatrixDropdown;
        }(React.Component);
        var SurveyQuestionMatrixDropdownRow = exports.SurveyQuestionMatrixDropdownRow = function (_super) {
          __extends(SurveyQuestionMatrixDropdownRow, _super);
          function SurveyQuestionMatrixDropdownRow(props) {
            _super.call(this, props);
            this.setProperties(props);
          }
          SurveyQuestionMatrixDropdownRow.prototype.componentWillReceiveProps = function (nextProps) {
            this.setProperties(nextProps);
          };
          SurveyQuestionMatrixDropdownRow.prototype.setProperties = function (nextProps) {
            this.row = nextProps.row;
            this.css = nextProps.css;
            this.rootCss = nextProps.rootCss;
            this.creator = nextProps.creator;
          };
          SurveyQuestionMatrixDropdownRow.prototype.render = function () {
            if (!this.row) return null;
            var tds = [];
            for (var i = 0; i < this.row.cells.length; i++) {
              var cell = this.row.cells[i];
              var errors = React.createElement(_reactquestion.SurveyQuestionErrors, { question: cell.question, css: this.rootCss, creator: this.creator });
              var select = this.renderSelect(cell);
              tds.push(React.createElement("td", { key: "row" + i }, errors, select));
            }
            return React.createElement("tr", null, React.createElement("td", null, this.row.text), tds);
          };
          SurveyQuestionMatrixDropdownRow.prototype.renderSelect = function (cell) {
            return this.creator.createQuestionElement(cell.question);
          };
          return SurveyQuestionMatrixDropdownRow;
        }(React.Component);
        _reactquestionfactory.ReactQuestionFactory.Instance.registerQuestion("matrixdropdown", function (props) {
          return React.createElement(SurveyQuestionMatrixDropdown, props);
        });
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 52 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SurveyQuestionMatrixRow = exports.SurveyQuestionMatrix = undefined;

        var _react = __webpack_require__(37);

        var React = _interopRequireWildcard(_react);

        var _reactquestionfactory = __webpack_require__(45);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

        var SurveyQuestionMatrix = exports.SurveyQuestionMatrix = function (_super) {
          __extends(SurveyQuestionMatrix, _super);
          function SurveyQuestionMatrix(props) {
            _super.call(this, props);
            this.question = props.question;
            this.css = props.css;
          }
          SurveyQuestionMatrix.prototype.componentWillReceiveProps = function (nextProps) {
            this.question = nextProps.question;
            this.css = nextProps.css;
          };
          SurveyQuestionMatrix.prototype.render = function () {
            if (!this.question) return null;
            var firstTH = this.question.hasRows ? React.createElement("th", null) : null;
            var headers = [];
            for (var i = 0; i < this.question.columns.length; i++) {
              var column = this.question.columns[i];
              var key = "column" + i;
              headers.push(React.createElement("th", { key: key }, column.text));
            }
            var rows = [];
            var visibleRows = this.question.visibleRows;
            for (var i = 0; i < visibleRows.length; i++) {
              var row = visibleRows[i];
              var key = "row" + i;
              rows.push(React.createElement(SurveyQuestionMatrixRow, { key: key, question: this.question, row: row, isFirst: i == 0 }));
            }
            return React.createElement("table", { className: this.css.root }, React.createElement("thead", null, React.createElement("tr", null, firstTH, headers)), React.createElement("tbody", null, rows));
          };
          return SurveyQuestionMatrix;
        }(React.Component);
        var SurveyQuestionMatrixRow = exports.SurveyQuestionMatrixRow = function (_super) {
          __extends(SurveyQuestionMatrixRow, _super);
          function SurveyQuestionMatrixRow(props) {
            _super.call(this, props);
            this.question = props.question;
            this.row = props.row;
            this.isFirst = props.isFirst;
            this.handleOnChange = this.handleOnChange.bind(this);
          }
          SurveyQuestionMatrixRow.prototype.handleOnChange = function (event) {
            this.row.value = event.target.value;
            this.setState({ value: this.row.value });
          };
          SurveyQuestionMatrixRow.prototype.componentWillReceiveProps = function (nextProps) {
            this.question = nextProps.question;
            this.row = nextProps.row;
            this.isFirst = nextProps.isFirst;
          };
          SurveyQuestionMatrixRow.prototype.render = function () {
            if (!this.row) return null;
            var firstTD = this.question.hasRows ? React.createElement("td", null, this.row.text) : null;
            var tds = [];
            for (var i = 0; i < this.question.columns.length; i++) {
              var column = this.question.columns[i];
              var key = "value" + i;
              var isChecked = this.row.value == column.value;
              var inputId = this.isFirst && i == 0 ? this.question.inputId : null;
              var td = React.createElement("td", { key: key }, React.createElement("input", { id: inputId, type: "radio", name: this.row.fullName, value: column.value, checked: isChecked, onChange: this.handleOnChange }));
              tds.push(td);
            }
            return React.createElement("tr", null, firstTD, tds);
          };
          return SurveyQuestionMatrixRow;
        }(React.Component);
        _reactquestionfactory.ReactQuestionFactory.Instance.registerQuestion("matrix", function (props) {
          return React.createElement(SurveyQuestionMatrix, props);
        });
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 53 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SurveyQuestionHtml = undefined;

        var _react = __webpack_require__(37);

        var React = _interopRequireWildcard(_react);

        var _reactquestionfactory = __webpack_require__(45);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

        var SurveyQuestionHtml = exports.SurveyQuestionHtml = function (_super) {
          __extends(SurveyQuestionHtml, _super);
          function SurveyQuestionHtml(props) {
            _super.call(this, props);
            this.question = props.question;
          }
          SurveyQuestionHtml.prototype.componentWillReceiveProps = function (nextProps) {
            this.question = nextProps.question;
          };
          SurveyQuestionHtml.prototype.render = function () {
            if (!this.question || !this.question.html) return null;
            var htmlValue = { __html: this.question.processedHtml };
            return React.createElement("div", { dangerouslySetInnerHTML: htmlValue });
          };
          return SurveyQuestionHtml;
        }(React.Component);
        _reactquestionfactory.ReactQuestionFactory.Instance.registerQuestion("html", function (props) {
          return React.createElement(SurveyQuestionHtml, props);
        });
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 54 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SurveyQuestionFile = undefined;

        var _react = __webpack_require__(37);

        var React = _interopRequireWildcard(_react);

        var _reactquestionfactory = __webpack_require__(45);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

        var SurveyQuestionFile = exports.SurveyQuestionFile = function (_super) {
          __extends(SurveyQuestionFile, _super);
          function SurveyQuestionFile(props) {
            _super.call(this, props);
            this.question = props.question;
            this.css = props.css;
            this.state = { fileLoaded: 0 };
            this.handleOnChange = this.handleOnChange.bind(this);
          }
          SurveyQuestionFile.prototype.handleOnChange = function (event) {
            var src = event.target || event.srcElement;
            if (!window["FileReader"]) return;
            if (!src || !src.files || src.files.length < 1) return;
            this.question.loadFile(src.files[0]);
            this.setState({ fileLoaded: this.state.fileLoaded + 1 });
          };
          SurveyQuestionFile.prototype.componentWillReceiveProps = function (nextProps) {
            this.question = nextProps.question;
          };
          SurveyQuestionFile.prototype.render = function () {
            if (!this.question) return null;
            var img = this.renderImage();
            return React.createElement("div", null, React.createElement("input", { id: this.question.inputId, type: "file", onChange: this.handleOnChange }), img);
          };
          SurveyQuestionFile.prototype.renderImage = function () {
            if (!this.question.previewValue) return null;
            return React.createElement("div", null, "  ", React.createElement("img", { src: this.question.previewValue, height: this.question.imageHeight, width: this.question.imageWidth }));
          };
          return SurveyQuestionFile;
        }(React.Component);
        _reactquestionfactory.ReactQuestionFactory.Instance.registerQuestion("file", function (props) {
          return React.createElement(SurveyQuestionFile, props);
        });
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 55 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SurveyQuestionMultipleTextItem = exports.SurveyQuestionMultipleText = undefined;

        var _react = __webpack_require__(37);

        var React = _interopRequireWildcard(_react);

        var _reactquestionfactory = __webpack_require__(45);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

        var SurveyQuestionMultipleText = exports.SurveyQuestionMultipleText = function (_super) {
          __extends(SurveyQuestionMultipleText, _super);
          function SurveyQuestionMultipleText(props) {
            _super.call(this, props);
            this.question = props.question;
            this.css = props.css;
          }
          SurveyQuestionMultipleText.prototype.componentWillReceiveProps = function (nextProps) {
            this.question = nextProps.question;
            this.css = nextProps.css;
          };
          SurveyQuestionMultipleText.prototype.render = function () {
            if (!this.question) return null;
            var tableRows = this.question.getRows();
            var rows = [];
            for (var i = 0; i < tableRows.length; i++) {
              rows.push(this.renderRow("item" + i, tableRows[i]));
            }
            return React.createElement("table", { className: this.css.root }, React.createElement("tbody", null, rows));
          };
          SurveyQuestionMultipleText.prototype.renderRow = function (key, items) {
            var tds = [];
            for (var i = 0; i < items.length; i++) {
              var item = items[i];
              tds.push(React.createElement("td", { key: "label" + i }, React.createElement("span", { className: this.css.itemTitle }, item.title)));
              tds.push(React.createElement("td", { key: "value" + i }, this.renderItem(item, i == 0)));
            }
            return React.createElement("tr", { key: key }, tds);
          };
          SurveyQuestionMultipleText.prototype.renderItem = function (item, isFirst) {
            var inputId = isFirst ? this.question.inputId : null;
            return React.createElement(SurveyQuestionMultipleTextItem, { item: item, css: this.css, inputId: inputId });
          };
          return SurveyQuestionMultipleText;
        }(React.Component);
        var SurveyQuestionMultipleTextItem = exports.SurveyQuestionMultipleTextItem = function (_super) {
          __extends(SurveyQuestionMultipleTextItem, _super);
          function SurveyQuestionMultipleTextItem(props) {
            _super.call(this, props);
            this.item = props.item;
            this.css = props.css;
            this.inputId = props.inputId;
            this.state = { value: this.item.value };
            this.handleOnChange = this.handleOnChange.bind(this);
          }
          SurveyQuestionMultipleTextItem.prototype.handleOnChange = function (event) {
            this.item.value = event.target.value;
            this.setState({ value: this.item.value });
          };
          SurveyQuestionMultipleTextItem.prototype.componentWillReceiveProps = function (nextProps) {
            this.item = nextProps.item;
            this.css = nextProps.css;
          };
          SurveyQuestionMultipleTextItem.prototype.render = function () {
            if (!this.item) return null;
            var style = { float: "left" };
            return React.createElement("input", { id: this.inputId, className: this.css.itemValue, style: style, type: "text", value: this.state.value, onChange: this.handleOnChange });
          };
          Object.defineProperty(SurveyQuestionMultipleTextItem.prototype, "mainClassName", {
            get: function get() {
              return "";
            },
            enumerable: true,
            configurable: true
          });
          return SurveyQuestionMultipleTextItem;
        }(React.Component);
        _reactquestionfactory.ReactQuestionFactory.Instance.registerQuestion("multipletext", function (props) {
          return React.createElement(SurveyQuestionMultipleText, props);
        });
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 56 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SurveyQuestionRadiogroup = undefined;

        var _react = __webpack_require__(37);

        var React = _interopRequireWildcard(_react);

        var _reactquestioncomment = __webpack_require__(44);

        var _reactquestionfactory = __webpack_require__(45);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

        var SurveyQuestionRadiogroup = exports.SurveyQuestionRadiogroup = function (_super) {
          __extends(SurveyQuestionRadiogroup, _super);
          function SurveyQuestionRadiogroup(props) {
            _super.call(this, props);
            this.question = props.question;
            this.css = props.css;
            this.rootCss = props.rootCss;
            this.state = { choicesChanged: 0 };
            var self = this;
            this.question.choicesChangedCallback = function () {
              self.state.choicesChanged = self.state.choicesChanged + 1;
              self.setState(self.state);
            };
            this.handleOnChange = this.handleOnChange.bind(this);
          }
          SurveyQuestionRadiogroup.prototype.componentWillReceiveProps = function (nextProps) {
            this.question = nextProps.question;
            this.css = nextProps.css;
            this.rootCss = nextProps.rootCss;
            this.handleOnChange = this.handleOnChange.bind(this);
          };
          SurveyQuestionRadiogroup.prototype.handleOnChange = function (event) {
            this.question.value = event.target.value;
            this.setState({ value: this.question.value });
          };
          SurveyQuestionRadiogroup.prototype.render = function () {
            if (!this.question) return null;
            return React.createElement("form", { className: this.css.root }, this.getItems());
          };
          SurveyQuestionRadiogroup.prototype.getItems = function () {
            var items = [];
            for (var i = 0; i < this.question.visibleChoices.length; i++) {
              var item = this.question.visibleChoices[i];
              var key = "item" + i;
              items.push(this.renderItem(key, item, i == 0));
            }
            return items;
          };
          Object.defineProperty(SurveyQuestionRadiogroup.prototype, "textStyle", {
            get: function get() {
              return { marginLeft: "3px" };
            },
            enumerable: true,
            configurable: true
          });
          SurveyQuestionRadiogroup.prototype.renderItem = function (key, item, isFirst) {
            var itemWidth = this.question.colCount > 0 ? 100 / this.question.colCount + "%" : "";
            var marginRight = this.question.colCount == 0 ? "5px" : "0px";
            var divStyle = { marginRight: marginRight };
            if (itemWidth) {
              divStyle["width"] = itemWidth;
            }
            var isChecked = this.question.value == item.value;
            var otherItem = isChecked && item.value === this.question.otherItem.value ? this.renderOther() : null;
            return this.renderRadio(key, item, isChecked, divStyle, otherItem, isFirst);
          };
          SurveyQuestionRadiogroup.prototype.renderRadio = function (key, item, isChecked, divStyle, otherItem, isFirst) {
            var id = isFirst ? this.question.inputId : null;
            return React.createElement("div", { key: key, className: this.css.item, style: divStyle }, React.createElement("label", { className: this.css.item }, React.createElement("input", { id: id, type: "radio", checked: isChecked, value: item.value, onChange: this.handleOnChange }), React.createElement("span", { style: this.textStyle }, item.text)), otherItem);
          };
          SurveyQuestionRadiogroup.prototype.renderOther = function () {
            return React.createElement("div", { className: this.css.other }, React.createElement(_reactquestioncomment.SurveyQuestionCommentItem, { question: this.question, css: this.rootCss }));
          };
          return SurveyQuestionRadiogroup;
        }(React.Component);
        _reactquestionfactory.ReactQuestionFactory.Instance.registerQuestion("radiogroup", function (props) {
          return React.createElement(SurveyQuestionRadiogroup, props);
        });
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 57 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SurveyQuestionText = undefined;

        var _react = __webpack_require__(37);

        var React = _interopRequireWildcard(_react);

        var _reactquestionfactory = __webpack_require__(45);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

        var SurveyQuestionText = exports.SurveyQuestionText = function (_super) {
          __extends(SurveyQuestionText, _super);
          function SurveyQuestionText(props) {
            _super.call(this, props);
            this.question = props.question;
            this.css = props.css;
            this.state = { value: this.question.value };
            this.handleOnChange = this.handleOnChange.bind(this);
          }
          SurveyQuestionText.prototype.handleOnChange = function (event) {
            this.question.value = event.target.value;
            this.setState({ value: this.question.value });
          };
          SurveyQuestionText.prototype.componentWillReceiveProps = function (nextProps) {
            this.question = nextProps.question;
            this.css = nextProps.css;
          };
          SurveyQuestionText.prototype.render = function () {
            if (!this.question) return null;
            return React.createElement("input", { id: this.question.inputId, className: this.css, type: this.question.inputType, value: this.question.value || '', size: this.question.size, onChange: this.handleOnChange });
          };
          return SurveyQuestionText;
        }(React.Component);
        _reactquestionfactory.ReactQuestionFactory.Instance.registerQuestion("text", function (props) {
          return React.createElement(SurveyQuestionText, props);
        });
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 58 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SurveyQuestionMatrixDynamicRow = exports.SurveyQuestionMatrixDynamic = undefined;

        var _react = __webpack_require__(37);

        var React = _interopRequireWildcard(_react);

        var _reactquestion = __webpack_require__(43);

        var _reactquestionfactory = __webpack_require__(45);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

        var SurveyQuestionMatrixDynamic = exports.SurveyQuestionMatrixDynamic = function (_super) {
          __extends(SurveyQuestionMatrixDynamic, _super);
          function SurveyQuestionMatrixDynamic(props) {
            _super.call(this, props);
            this.setProperties(props);
          }
          SurveyQuestionMatrixDynamic.prototype.componentWillReceiveProps = function (nextProps) {
            this.setProperties(nextProps);
          };
          SurveyQuestionMatrixDynamic.prototype.setProperties = function (nextProps) {
            this.question = nextProps.question;
            this.css = nextProps.css;
            this.rootCss = nextProps.rootCss;
            this.creator = nextProps.creator;
            var self = this;
            this.state = { rowCounter: 0 };
            this.question.rowCountChangedCallback = function () {
              self.state.rowCounter = self.state.rowCounter + 1;
              self.setState(self.state);
            };
            this.handleOnRowAddClick = this.handleOnRowAddClick.bind(this);
          };
          SurveyQuestionMatrixDynamic.prototype.handleOnRowAddClick = function (event) {
            this.question.addRow();
          };
          SurveyQuestionMatrixDynamic.prototype.render = function () {
            if (!this.question) return null;
            var headers = [];
            for (var i = 0; i < this.question.columns.length; i++) {
              var column = this.question.columns[i];
              var key = "column" + i;
              var minWidth = this.question.getColumnWidth(column);
              var columnStyle = minWidth ? { minWidth: minWidth } : {};
              headers.push(React.createElement("th", { key: key, style: columnStyle }, this.question.getColumnTitle(column)));
            }
            var rows = [];
            var visibleRows = this.question.visibleRows;
            for (var i = 0; i < visibleRows.length; i++) {
              var row = visibleRows[i];
              var key = "row" + i;
              rows.push(React.createElement(SurveyQuestionMatrixDynamicRow, { key: key, row: row, question: this.question, index: i, css: this.css, rootCss: this.rootCss, creator: this.creator }));
            }
            var divStyle = this.question.horizontalScroll ? { overflowX: 'scroll' } : {};
            return React.createElement("div", null, React.createElement("div", { style: divStyle }, React.createElement("table", { className: this.css.root }, React.createElement("thead", null, React.createElement("tr", null, headers, React.createElement("th", null))), React.createElement("tbody", null, rows))), this.renderAddRowButton());
          };
          SurveyQuestionMatrixDynamic.prototype.renderAddRowButton = function () {
            return React.createElement("input", { className: this.css.button, type: "button", onClick: this.handleOnRowAddClick, value: this.question.addRowText });
          };
          return SurveyQuestionMatrixDynamic;
        }(React.Component);
        var SurveyQuestionMatrixDynamicRow = exports.SurveyQuestionMatrixDynamicRow = function (_super) {
          __extends(SurveyQuestionMatrixDynamicRow, _super);
          function SurveyQuestionMatrixDynamicRow(props) {
            _super.call(this, props);
            this.setProperties(props);
          }
          SurveyQuestionMatrixDynamicRow.prototype.componentWillReceiveProps = function (nextProps) {
            this.setProperties(nextProps);
          };
          SurveyQuestionMatrixDynamicRow.prototype.setProperties = function (nextProps) {
            this.row = nextProps.row;
            this.question = nextProps.question;
            this.index = nextProps.index;
            this.css = nextProps.css;
            this.rootCss = nextProps.rootCss;
            this.creator = nextProps.creator;
            this.handleOnRowRemoveClick = this.handleOnRowRemoveClick.bind(this);
          };
          SurveyQuestionMatrixDynamicRow.prototype.handleOnRowRemoveClick = function (event) {
            this.question.removeRow(this.index);
          };
          SurveyQuestionMatrixDynamicRow.prototype.render = function () {
            if (!this.row) return null;
            var tds = [];
            for (var i = 0; i < this.row.cells.length; i++) {
              var cell = this.row.cells[i];
              var errors = React.createElement(_reactquestion.SurveyQuestionErrors, { question: cell.question, css: this.rootCss, creator: this.creator });
              var select = this.renderQuestion(cell);
              tds.push(React.createElement("td", { key: "row" + i }, errors, select));
            }
            var removeButton = this.renderButton();
            tds.push(React.createElement("td", { key: "row" + this.row.cells.length + 1 }, removeButton));
            return React.createElement("tr", null, tds);
          };
          SurveyQuestionMatrixDynamicRow.prototype.renderQuestion = function (cell) {
            return this.creator.createQuestionElement(cell.question);
          };
          SurveyQuestionMatrixDynamicRow.prototype.renderButton = function () {
            return React.createElement("input", { className: this.css.button, type: "button", onClick: this.handleOnRowRemoveClick, value: this.question.removeRowText });
          };
          return SurveyQuestionMatrixDynamicRow;
        }(React.Component);
        _reactquestionfactory.ReactQuestionFactory.Instance.registerQuestion("matrixdynamic", function (props) {
          return React.createElement(SurveyQuestionMatrixDynamic, props);
        });
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 59 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SurveyQuestionRating = undefined;

        var _react = __webpack_require__(37);

        var React = _interopRequireWildcard(_react);

        var _reactquestioncomment = __webpack_require__(44);

        var _reactquestionfactory = __webpack_require__(45);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

        var SurveyQuestionRating = exports.SurveyQuestionRating = function (_super) {
          __extends(SurveyQuestionRating, _super);
          function SurveyQuestionRating(props) {
            _super.call(this, props);
            this.question = props.question;
            this.css = props.css;
            this.rootCss = props.rootCss;
            this.handleOnChange = this.handleOnChange.bind(this);
          }
          SurveyQuestionRating.prototype.handleOnChange = function (event) {
            this.question.value = event.target.value;
            this.setState({ value: this.question.value });
          };
          SurveyQuestionRating.prototype.componentWillReceiveProps = function (nextProps) {
            this.question = nextProps.question;
            this.css = nextProps.css;
            this.rootCss = nextProps.rootCss;
          };
          SurveyQuestionRating.prototype.render = function () {
            if (!this.question) return null;
            var values = [];
            for (var i = 0; i < this.question.visibleRateValues.length; i++) {
              var minText = i == 0 ? this.question.mininumRateDescription + " " : null;
              var maxText = i == this.question.visibleRateValues.length - 1 ? " " + this.question.maximumRateDescription : null;
              values.push(this.renderItem("value" + i, this.question.visibleRateValues[i], minText, maxText));
            }
            var comment = this.question.hasOther ? this.renderOther() : null;
            return React.createElement("div", { className: this.css.root }, values, comment);
          };
          SurveyQuestionRating.prototype.renderItem = function (key, item, minText, maxText) {
            var isChecked = this.question.value == item.value;
            var className = this.css.item;
            if (isChecked) className += " active";
            var min = minText ? React.createElement("span", null, minText) : null;
            var max = maxText ? React.createElement("span", null, maxText) : null;
            return React.createElement("label", { key: key, className: className }, React.createElement("input", { type: "radio", style: { display: "none" }, name: this.question.name, value: item.value, checked: this.question.value == item.value, onChange: this.handleOnChange }), min, React.createElement("span", null, item.text), max);
          };
          SurveyQuestionRating.prototype.renderOther = function () {
            return React.createElement("div", { className: this.css.other }, React.createElement(_reactquestioncomment.SurveyQuestionCommentItem, { question: this.question, css: this.rootCss }));
          };
          return SurveyQuestionRating;
        }(React.Component);
        _reactquestionfactory.ReactQuestionFactory.Instance.registerQuestion("rating", function (props) {
          return React.createElement(SurveyQuestionRating, props);
        });
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 60 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__extends) {"use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SurveyWindow = undefined;

        var _react = __webpack_require__(37);

        var React = _interopRequireWildcard(_react);

        var _reactSurvey = __webpack_require__(36);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

        var SurveyWindow = exports.SurveyWindow = function (_super) {
          __extends(SurveyWindow, _super);
          function SurveyWindow(props) {
            _super.call(this, props);
            this.handleOnExpanded = this.handleOnExpanded.bind(this);
          }
          SurveyWindow.prototype.handleOnExpanded = function (event) {
            this.state.expanded = !this.state.expanded;
            this.setState(this.state);
          };
          SurveyWindow.prototype.render = function () {
            if (this.state.hidden) return null;
            var header = this.renderHeader();
            var body = this.state.expanded ? this.renderBody() : null;
            var style = { position: "fixed", bottom: "3px", right: "10px" };
            return React.createElement("div", { className: this.css.window.root, style: style }, header, body);
          };
          SurveyWindow.prototype.renderHeader = function () {
            var styleA = { width: "100%" };
            var styleTitle = { paddingRight: "10px" };
            var glyphClassName = this.state.expanded ? this.css.window.header.buttonCollapsed : this.css.window.header.buttonExpanded;
            glyphClassName = "glyphicon pull-right " + glyphClassName;
            return React.createElement("div", { className: this.css.window.header.root }, React.createElement("a", { href: "#", onClick: this.handleOnExpanded, style: styleA }, React.createElement("span", { className: this.css.window.header.title, style: styleTitle }, this.title), React.createElement("span", { className: glyphClassName, "aria-hidden": "true" })));
          };
          SurveyWindow.prototype.renderBody = function () {
            return React.createElement("div", { class: this.css.window.body }, this.renderSurvey());
          };
          SurveyWindow.prototype.updateSurvey = function (newProps) {
            _super.prototype.updateSurvey.call(this, newProps);
            this.title = newProps.title ? newProps.title : this.survey.title;
            var hasExpanded = newProps["expanded"] ? newProps.expanded : false;
            this.state = { expanded: hasExpanded, hidden: false };
            var self = this;
            this.survey.onComplete.add(function (s) {
              self.state.hidden = true;
              self.setState(self.state);
            });
          };
          return SurveyWindow;
        }(_reactSurvey.Survey);
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

      /***/ },
    /* 61 */
    /***/ function(module, exports, __webpack_require__) {

      'use strict';

      __webpack_require__(62);

      __webpack_require__(63);

      __webpack_require__(64);

      __webpack_require__(65);

      __webpack_require__(66);

      __webpack_require__(67);

      __webpack_require__(68);

      __webpack_require__(69);

      __webpack_require__(70);

      /***/ },
    /* 62 */
    /***/ function(module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.danishSurveyStrings = undefined;

      var _surveyStrings = __webpack_require__(7);

      var danishSurveyStrings = exports.danishSurveyStrings = {
        pagePrevText: "Tilbage",
        pageNextText: "Videre",
        completeText: "Færdig",
        progressText: "Side {0} af {1}",
        emptySurvey: "Der er ingen synlige spørgsmål.",
        completingSurvey: "Mange tak for din besvarelse!",
        loadingSurvey: "Spørgeskemaet hentes fra serveren...",
        otherItemText: "Valgfrit svar...",
        optionsCaption: "Vælg...",
        requiredError: "Besvar venligst spørgsmålet.",
        numericError: "Angiv et tal.",
        textMinLength: "Angiv mindst {0} tegn.",
        minSelectError: "Vælg venligst mindst  {0} svarmulighed(er).",
        maxSelectError: "Vælg venligst færre {0} svarmuligheder(er).",
        numericMinMax: "'{0}' skal være lig med eller større end {1} og lig med eller mindre end {2}",
        numericMin: "'{0}' skal være lig med eller større end {1}",
        numericMax: "'{0}' skal være lig med eller mindre end {1}",
        invalidEmail: "Angiv venligst en gyldig e-mail adresse.",
        exceedMaxSize: "Filstørrelsen må ikke overstige {0}.",
        otherRequiredError: "Angiv en værdi for dit valgfrie svar."
      };
      _surveyStrings.surveyLocalization.locales["da"] = danishSurveyStrings;

      /***/ },
    /* 63 */
    /***/ function(module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.dutchSurveyStrings = undefined;

      var _surveyStrings = __webpack_require__(7);

      var dutchSurveyStrings = exports.dutchSurveyStrings = {
        pagePrevText: "Vorige",
        pageNextText: "Volgende",
        completeText: "Afsluiten",
        otherItemText: "Andere",
        progressText: "Pagina {0} van {1}",
        emptySurvey: "Er is geen zichtbare pagina of vraag in deze vragenlijst",
        completingSurvey: "Bedankt om deze vragenlijst in te vullen",
        loadingSurvey: "De vragenlijst is aan het laden...",
        optionsCaption: "Kies...",
        requiredError: "Gelieve een antwoord in te vullen",
        numericError: "Het antwoord moet een getal zijn",
        textMinLength: "Gelieve minsten {0} karakters in te vullen.",
        minSelectError: "Gelieve minimum {0} antwoorden te selecteren.",
        maxSelectError: "Gelieve niet meer dan {0} antwoorden te selecteren.",
        numericMinMax: "Uw antwoord '{0}' moet groter of gelijk zijn aan {1} en kleiner of gelijk aan {2}",
        numericMin: "Uw antwoord '{0}' moet groter of gelijk zijn aan {1}",
        numericMax: "Uw antwoord '{0}' moet groter of gelijk zijn aan {1}",
        invalidEmail: "Gelieve een geldig e-mailadres in te vullen.",
        exceedMaxSize: "De grootte van het bestand mag niet groter zijn dan {0}.",
        otherRequiredError: "Gelieve het veld 'Andere' in te vullen"
      };
      _surveyStrings.surveyLocalization.locales["nl"] = dutchSurveyStrings;

      /***/ },
    /* 64 */
    /***/ function(module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.finnishSurveyStrings = undefined;

      var _surveyStrings = __webpack_require__(7);

      var finnishSurveyStrings = exports.finnishSurveyStrings = {
        pagePrevText: "Edellinen",
        pageNextText: "Seuraava",
        completeText: "Valmis",
        otherItemText: "Muu (kuvaile)",
        progressText: "Sivu {0}/{1}",
        emptySurvey: "Tässä kyselyssä ei ole yhtäkään näkyvillä olevaa sivua tai kysymystä.",
        completingSurvey: "Kiitos kyselyyn vastaamisesta!",
        loadingSurvey: "Kyselyä ladataan palvelimelta...",
        optionsCaption: "Valitse...",
        requiredError: "Vastaa kysymykseen, kiitos.",
        numericError: "Arvon tulee olla numeerinen.",
        textMinLength: "Ole hyvä ja syötä vähintään {0} merkkiä.",
        minSelectError: "Ole hyvä ja valitse vähintään {0} vaihtoehtoa.",
        maxSelectError: "Ole hyvä ja valitse enintään {0} vaihtoehtoa.",
        numericMinMax: "'{0}' täytyy olla enemmän tai yhtä suuri kuin {1} ja vähemmän tai yhtä suuri kuin {2}",
        numericMin: "'{0}' täytyy olla enemmän tai yhtä suuri kuin {1}",
        numericMax: "'{0}' täytyy olla vähemmän tai yhtä suuri kuin {1}",
        invalidEmail: "Syötä validi sähköpostiosoite.",
        otherRequiredError: "Ole hyvä ja syötä \"Muu (kuvaile)\""
      };
      _surveyStrings.surveyLocalization.locales["fi"] = finnishSurveyStrings;

      /***/ },
    /* 65 */
    /***/ function(module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.frenchSurveyStrings = undefined;

      var _surveyStrings = __webpack_require__(7);

      var frenchSurveyStrings = exports.frenchSurveyStrings = {
        pagePrevText: "Pr\xE9c\xE9dent",
        pageNextText: "Suivant",
        completeText: "Terminer",
        otherItemText: "Autre (pr\xE9ciser)",
        progressText: "Page {0} sur {1}",
        emptySurvey: "Il n'y a ni page visible ni question visible dans ce questionnaire",
        completingSurvey: "Merci d'avoir r\xE9pondu au questionnaire!",
        loadingSurvey: "Le questionnaire est en cours de chargement...",
        optionsCaption: "Choisissez...",
        requiredError: "La r\xE9ponse \xE0 cette question est obligatoire.",
        numericError: "La r\xE9ponse doit \xEAtre un nombre.",
        textMinLength: "Merci d'entrer au moins {0} symboles.",
        minSelectError: "Merci de s\xE9lectionner au moins {0}r\xE9ponses.",
        maxSelectError: "Merci de s\xE9lectionner au plus {0}r\xE9ponses.",
        numericMinMax: "Votre r\xE9ponse '{0}' doit \xEAtresup\xE9rieure ou \xE9gale \xE0 {1} et inf\xE9rieure ou\xE9gale \xE0 {2}",
        numericMin: "Votre r\xE9ponse '{0}' doit \xEAtresup\xE9rieure ou \xE9gale \xE0 {1}",
        numericMax: "Votre r\xE9ponse '{0}' doit \xEAtreinf\xE9rieure ou \xE9gale \xE0 {1}",
        invalidEmail: "Merci d'entrer une adresse mail valide.",
        exceedMaxSize: "La taille du fichier ne doit pas exc\xE9der {0}.",
        otherRequiredError: "Merci de pr\xE9ciser le champ 'Autre'."
      };
      _surveyStrings.surveyLocalization.locales["fr"] = frenchSurveyStrings;

      /***/ },
    /* 66 */
    /***/ function(module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.germanSurveyStrings = undefined;

      var _surveyStrings = __webpack_require__(7);

      var germanSurveyStrings = exports.germanSurveyStrings = {
        pagePrevText: "Zurück",
        pageNextText: "Weiter",
        completeText: "Fertig",
        progressText: "Seite {0} von {1}",
        emptySurvey: "Es gibt keine sichtbare Frage.",
        completingSurvey: "Vielen Dank für das Ausfüllen des Fragebogens!",
        loadingSurvey: "Der Fragebogen wird vom Server geladen...",
        otherItemText: "Benutzerdefinierte Antwort...",
        optionsCaption: "Wählen...",
        requiredError: "Bitte antworten Sie auf die Frage.",
        numericError: "Der Wert sollte eine Zahl sein.",
        textMinLength: "Bitte geben Sie mindestens {0} Symbole.",
        minSelectError: "Bitte wählen Sie mindestens {0} Varianten.",
        maxSelectError: "Bitte wählen Sie nicht mehr als {0} Varianten.",
        numericMinMax: "'{0}' solte gleich oder größer sein als {1} und gleich oder kleiner als {2}",
        numericMin: "'{0}' solte gleich oder größer sein als {1}",
        numericMax: "'{0}' solte gleich oder kleiner als {1}",
        invalidEmail: "Bitte geben Sie eine gültige Email-Adresse ein.",
        exceedMaxSize: "Die Dateigröße soll nicht mehr als {0}.",
        otherRequiredError: "Bitte geben Sie einen Wert für Ihre benutzerdefinierte Antwort ein."
      };
      _surveyStrings.surveyLocalization.locales["de"] = germanSurveyStrings;

      /***/ },
    /* 67 */
    /***/ function(module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.greekSurveyStrings = undefined;

      var _surveyStrings = __webpack_require__(7);

      var greekSurveyStrings = exports.greekSurveyStrings = {
        pagePrevText: "Προηγούμενο",
        pageNextText: "Επόμενο",
        completeText: "Ολοκλήρωση",
        otherItemText: "Άλλο (παρακαλώ διευκρινίστε)",
        progressText: "Σελίδα {0} από {1}",
        emptySurvey: "Δεν υπάρχει καμία ορατή σελίδα ή ορατή ερώτηση σε αυτό το ερωτηματολόγιο.",
        completingSurvey: "Ευχαριστούμε για την συμπλήρωση αυτου του ερωτηματολογίου!",
        loadingSurvey: "Το ερωτηματολόγιο φορτώνεται απο το διακομιστή...",
        optionsCaption: "Επιλέξτε...",
        requiredError: "Παρακαλώ απαντήστε στην ερώτηση.",
        requiredInAllRowsError: "Παρακαλώ απαντήστε στις ερωτήσεις σε όλες τις γραμμές.",
        numericError: "Η τιμή πρέπει να είναι αριθμιτική.",
        textMinLength: "Παρακαλώ συμπληρώστε τουλάχιστον {0} σύμβολα.",
        minRowCountError: "Παρακαλώ συμπληρώστε τουλάχιστον {0} γραμμές.",
        minSelectError: "Παρακαλώ επιλέξτε τουλάχιστον {0} παραλλαγές.",
        maxSelectError: "Παρακαλώ επιλέξτε όχι παραπάνω απο {0} παραλλαγές.",
        numericMinMax: "Το '{0}' θα πρέπει να είναι ίσο ή μεγαλύτερο απο το {1} και ίσο ή μικρότερο απο το {2}",
        numericMin: "Το '{0}' πρέπει να είναι μεγαλύτερο ή ισο με το {1}",
        numericMax: "Το '{0}' πρέπει να είναι μικρότερο ή ίσο απο το {1}",
        invalidEmail: "Παρακαλώ δώστε μια αποδεκτή διεύθυνση e-mail.",
        urlRequestError: "Η αίτηση επέστρεψε σφάλμα '{0}'. {1}",
        urlGetChoicesError: "Η αίτηση επέστρεψε κενά δεδομένα ή η ιδότητα 'μονοπάτι/path' είναι εσφαλέμένη",
        exceedMaxSize: "Το μέγεθος δεν μπορεί να υπερβένει τα {0}.",
        otherRequiredError: "Παρακαλώ συμπληρώστε την τιμή για το πεδίο 'άλλο'.",
        uploadingFile: "Το αρχείο σας ανεβαίνει. Παρακαλώ περιμένετε καποια δευτερόλεπτα και δοκιμάστε ξανά.",
        addRow: "Προσθήκη γραμμής",
        removeRow: "Αφαίρεση"
      };
      _surveyStrings.surveyLocalization.locales["gr"] = greekSurveyStrings;

      /***/ },
    /* 68 */
    /***/ function(module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.polishSurveyStrings = undefined;

      var _surveyStrings = __webpack_require__(7);

      var polishSurveyStrings = exports.polishSurveyStrings = {
        pagePrevText: "Wstecz",
        pageNextText: "Dalej",
        completeText: "Gotowe",
        progressText: "Strona {0} z {1}",
        emptySurvey: "Nie ma widocznych pytań.",
        completingSurvey: "Dziękujemy za wypełnienie ankiety!",
        loadingSurvey: "Trwa wczytywanie ankiety...",
        otherItemText: "Inna odpowiedź...",
        optionsCaption: "Wybierz...",
        requiredError: "Proszę odpowiedzieć na to pytanie.",
        numericError: "W tym polu można wpisać tylko liczby.",
        textMinLength: "Proszę wpisać co najmniej {0} znaków.",
        minSelectError: "Proszę wybrać co najmniej {0} pozycji.",
        maxSelectError: "Proszę wybrać nie więcej niż {0} pozycji.",
        numericMinMax: "Odpowiedź '{0}' powinna być większa lub równa {1} oraz mniejsza lub równa {2}",
        numericMin: "Odpowiedź '{0}' powinna być większa lub równa {1}",
        numericMax: "Odpowiedź '{0}' powinna być mniejsza lub równa {1}",
        invalidEmail: "Proszę podać prawidłowy adres email.",
        exceedMaxSize: "Rozmiar przesłanego pliku nie może przekraczać {0}.",
        otherRequiredError: "Proszę podać inną odpowiedź."
      };
      _surveyStrings.surveyLocalization.locales["pl"] = polishSurveyStrings;

      /***/ },
    /* 69 */
    /***/ function(module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.russianSurveyStrings = undefined;

      var _surveyStrings = __webpack_require__(7);

      var russianSurveyStrings = exports.russianSurveyStrings = {
        pagePrevText: "Назад",
        pageNextText: "Далее",
        completeText: "Готово",
        progressText: "Страница {0} из {1}",
        emptySurvey: "Нет ни одного вопроса.",
        completingSurvey: "Благодарим Вас за заполнение анкеты!",
        loadingSurvey: "Загрузка с сервера...",
        otherItemText: "Другое (пожалуйста, опишите)",
        optionsCaption: "Выбрать...",
        requiredError: "Пожалуйста, ответьте на вопрос.",
        numericError: "Ответ должен быть числом.",
        textMinLength: "Пожалуйста, введите хотя бы {0} символов.",
        minSelectError: "Пожалуйста, выберите хотя бы {0} вариантов.",
        maxSelectError: "Пожалуйста, выберите не более {0} вариантов.",
        numericMinMax: "'{0}' должно быть равным или больше, чем {1}, и равным или меньше, чем {2}",
        numericMin: "'{0}' должно быть равным или больше, чем {1}",
        numericMax: "'{0}' должно быть равным или меньше, чем {1}",
        invalidEmail: "Пожалуйста, введите действительный адрес электронной почты.",
        otherRequiredError: "Пожалуйста, введите данные в поле \"Другое\""
      };
      _surveyStrings.surveyLocalization.locales["ru"] = russianSurveyStrings;

      /***/ },
    /* 70 */
    /***/ function(module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.turkishSurveyStrings = undefined;

      var _surveyStrings = __webpack_require__(7);

      var turkishSurveyStrings = exports.turkishSurveyStrings = {
        pagePrevText: "Geri",
        pageNextText: "İleri",
        completeText: "Anketi Tamamla",
        otherItemText: "Diğer (açıklayınız)",
        progressText: "Sayfa {0} / {1}",
        emptySurvey: "Ankette görüntülenecek sayfa ya da soru mevcut değil.",
        completingSurvey: "Anketimizi tamamladığınız için teşekkür ederiz.",
        loadingSurvey: "Anket sunucudan yükleniyor ...",
        optionsCaption: "Seçiniz ...",
        requiredError: "Lütfen soruya cevap veriniz",
        numericError: "Girilen değer numerik olmalıdır",
        textMinLength: "En az {0} sembol giriniz.",
        minRowCountError: "Lütfen en az {0} satırı doldurun.",
        minSelectError: "Lütfen en az {0} seçeneği seçiniz.",
        maxSelectError: "Lütfen {0} adetten fazla seçmeyiniz.",
        numericMinMax: "The '{0}' should be equal or more than {1} and equal or less than {2}",
        numericMin: "'{0}' değeri {1} değerine eşit veya büyük olmalıdır",
        numericMax: "'{0}' değeri {1} değerine eşit ya da küçük olmalıdır.",
        invalidEmail: "Lütfen geçerli bir eposta adresi giriniz.",
        urlRequestError: "Talebi şu hatayı döndü '{0}'. {1}",
        urlGetChoicesError: "Talep herhangi bir veri dönmedi ya da 'path' özelliği hatalı.",
        exceedMaxSize: "Dosya boyutu {0} değerini geçemez.",
        otherRequiredError: "Lütfen diğer değerleri giriniz.",
        uploadingFile: "Dosyanız yükleniyor. LÜtfen birkaç saniye bekleyin ve tekrar deneyin.",
        addRow: "Satır Ekle",
        removeRow: "Kaldır"
      };
      _surveyStrings.surveyLocalization.locales["tr"] = turkishSurveyStrings;

      /***/ },
    /* 71 */
    /***/ function(module, exports, __webpack_require__) {

      'use strict';

      __webpack_require__(72);

      /***/ },
    /* 72 */
    /***/ function(module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.defaultBootstrapCss = undefined;

      var _cssstandard = __webpack_require__(35);

      var defaultBootstrapCss = exports.defaultBootstrapCss = {
        root: "",
        header: "panel-heading",
        body: "panel-body",
        footer: "panel-footer",
        navigationButton: "", navigation: { complete: "", prev: "", next: "" },
        progress: "progress center-block", progressBar: "progress-bar",
        pageTitle: "",
        row: "",
        question: { root: "", title: "", comment: "form-control", indent: 20 },
        error: { root: "alert alert-danger", icon: "glyphicon glyphicon-exclamation-sign", item: "" },
        checkbox: { root: "form-inline", item: "checkbox", other: "" },
        comment: "form-control",
        dropdown: "form-control",
        matrix: { root: "table" },
        matrixdropdown: { root: "table" },
        matrixdynamic: { root: "table", button: "button" },
        multipletext: { root: "table", itemTitle: "", itemValue: "form-control" },
        radiogroup: { root: "form-inline", item: "radio", other: "" },
        rating: { root: "btn-group", item: "btn btn-default" },
        text: "form-control",
        window: {
          root: "modal-content", body: "modal-body",
          header: {
            root: "modal-header panel-title", title: "pull-left", button: "glyphicon pull-right",
            buttonExpanded: "glyphicon pull-right glyphicon-chevron-up", buttonCollapsed: "glyphicon pull-right glyphicon-chevron-down"
          }
        }
      };
      _cssstandard.surveyCss["bootstrap"] = defaultBootstrapCss;

      /***/ },
    /* 73 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__assign) {'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.__assign = __assign;
        function __assign(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) {
              if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
          }
          return t;
        }
        ;
        if (typeof module !== 'undefined' && module.exports) {
          exports = module.exports = __assign;
        }
        exports.__assign = __assign;
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(73)))

      /***/ },
    /* 74 */
    /***/ function(module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function(__assign) {'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SurveyWindowNG = exports.SurveyNG = undefined;

        var _react = __webpack_require__(37);

        var React = _interopRequireWildcard(_react);

        var _reactDom = __webpack_require__(37);

        var ReactDOM = _interopRequireWildcard(_reactDom);

        var _reactSurvey = __webpack_require__(36);

        var _reactSurveyWindow = __webpack_require__(60);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

        var SurveyNG = exports.SurveyNG = function () {
          function SurveyNG() {}
          SurveyNG.render = function (elementId, props) {
            ReactDOM.render(React.createElement(_reactSurvey.Survey, __assign({}, props)), document.getElementById(elementId));
          };
          return SurveyNG;
        }();
        var SurveyWindowNG = exports.SurveyWindowNG = function () {
          function SurveyWindowNG() {}
          SurveyWindowNG.render = function (elementId, props) {
            ReactDOM.render(React.createElement(_reactSurveyWindow.SurveyWindow, __assign({}, props)), document.getElementById(elementId));
          };
          return SurveyWindowNG;
        }();
        /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(73)))

      /***/ }
    /******/ ])
});
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
